
GateSwing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f2  00800100  00003f90  00004044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f90  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  008004f2  008004f2  00004436  2**0
                  ALLOC
  3 .eeprom       00000018  00810000  00810000  00004436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000444e  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000044aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fcc  00000000  00000000  00004852  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbc  00000000  00000000  0000881e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003812  00000000  00000000  000093da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b8  00000000  00000000  0000cbec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b39  00000000  00000000  0000d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000335b  00000000  00000000  0000e0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00011438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	64 c3       	rjmp	.+1736   	; 0x6ca <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_1>
       8:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_2>
       c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_3>
      10:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_4>
      14:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__vector_5>
      18:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_6>
      1c:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_7>
      20:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_8>
      24:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_9>
      28:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_10>
      2c:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_11>
      30:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_12>
      34:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_13>
      38:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_14>
      3c:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_15>
      40:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_16>
      44:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_17>
      48:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__vector_18>
      4c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_19>
      50:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_20>
      54:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_21>
      58:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_22>
      5c:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_23>
      60:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_24>
      64:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__vector_25>
      68:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_26>
      6c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_27>
      70:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_28>
      74:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_29>
      78:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_30>
      7c:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_31>
      80:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__vector_32>
      84:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_33>
      88:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_34>
      8c:	aa 03       	fmulsu	r18, r18
      8e:	b8 03       	fmulsu	r19, r16
      90:	b4 03       	fmuls	r19, r20
      92:	ac 03       	fmulsu	r18, r20
      94:	b6 03       	fmuls	r19, r22
      96:	b6 03       	fmuls	r19, r22
      98:	b6 03       	fmuls	r19, r22
      9a:	ae 03       	fmulsu	r18, r22
      9c:	b6 03       	fmuls	r19, r22
      9e:	b6 03       	fmuls	r19, r22
      a0:	b6 03       	fmuls	r19, r22
      a2:	b6 03       	fmuls	r19, r22
      a4:	b6 03       	fmuls	r19, r22
      a6:	b6 03       	fmuls	r19, r22
      a8:	b6 03       	fmuls	r19, r22
      aa:	b0 03       	fmuls	r19, r16
      ac:	b6 03       	fmuls	r19, r22
      ae:	b6 03       	fmuls	r19, r22
      b0:	b6 03       	fmuls	r19, r22
      b2:	b6 03       	fmuls	r19, r22
      b4:	b6 03       	fmuls	r19, r22
      b6:	b6 03       	fmuls	r19, r22
      b8:	b6 03       	fmuls	r19, r22
      ba:	b6 03       	fmuls	r19, r22
      bc:	b6 03       	fmuls	r19, r22
      be:	b6 03       	fmuls	r19, r22
      c0:	b6 03       	fmuls	r19, r22
      c2:	b6 03       	fmuls	r19, r22
      c4:	b6 03       	fmuls	r19, r22
      c6:	b6 03       	fmuls	r19, r22
      c8:	b6 03       	fmuls	r19, r22
      ca:	b2 03       	fmuls	r19, r18
      cc:	87 04       	cpc	r8, r7
      ce:	da 04       	cpc	r13, r10
      d0:	fe 04       	cpc	r15, r14
      d2:	3c 05       	cpc	r19, r12
      d4:	83 05       	cpc	r24, r3
      d6:	c1 05       	cpc	r28, r1
      d8:	e4 05       	cpc	r30, r4
      da:	07 06       	cpc	r0, r23
      dc:	4e 06       	cpc	r4, r30
      de:	95 06       	cpc	r9, r21
      e0:	2a 06       	cpc	r2, r26
      e2:	71 06       	cpc	r7, r17
      e4:	b9 06       	cpc	r11, r25
      e6:	c5 06       	cpc	r12, r21
      e8:	c5 06       	cpc	r12, r21
      ea:	94 04       	cpc	r9, r4
      ec:	b7 04       	cpc	r11, r7
      ee:	c5 06       	cpc	r12, r21
      f0:	c5 06       	cpc	r12, r21
      f2:	c5 06       	cpc	r12, r21
      f4:	c5 06       	cpc	r12, r21
      f6:	c5 06       	cpc	r12, r21
      f8:	c5 06       	cpc	r12, r21
      fa:	c5 06       	cpc	r12, r21
      fc:	c5 06       	cpc	r12, r21
      fe:	c5 06       	cpc	r12, r21
     100:	c5 06       	cpc	r12, r21
     102:	c5 06       	cpc	r12, r21
     104:	c5 06       	cpc	r12, r21
     106:	c5 06       	cpc	r12, r21
     108:	c5 06       	cpc	r12, r21
     10a:	c5 06       	cpc	r12, r21
     10c:	c5 06       	cpc	r12, r21
     10e:	c5 06       	cpc	r12, r21
     110:	c5 06       	cpc	r12, r21
     112:	c5 06       	cpc	r12, r21
     114:	c5 06       	cpc	r12, r21
     116:	c5 06       	cpc	r12, r21
     118:	c5 06       	cpc	r12, r21
     11a:	c5 06       	cpc	r12, r21
     11c:	c5 06       	cpc	r12, r21
     11e:	c5 06       	cpc	r12, r21
     120:	c5 06       	cpc	r12, r21
     122:	5f 05       	cpc	r21, r15
     124:	e2 06       	cpc	r14, r18
     126:	f1 06       	cpc	r15, r17
     128:	7a 08       	sbc	r7, r10
     12a:	7a 08       	sbc	r7, r10
     12c:	7a 08       	sbc	r7, r10
     12e:	7a 08       	sbc	r7, r10
     130:	7a 08       	sbc	r7, r10
     132:	7a 08       	sbc	r7, r10
     134:	7a 08       	sbc	r7, r10
     136:	7a 08       	sbc	r7, r10
     138:	7a 08       	sbc	r7, r10
     13a:	7a 08       	sbc	r7, r10
     13c:	7a 08       	sbc	r7, r10
     13e:	7a 08       	sbc	r7, r10
     140:	7a 08       	sbc	r7, r10
     142:	7a 08       	sbc	r7, r10
     144:	7a 08       	sbc	r7, r10
     146:	7a 08       	sbc	r7, r10
     148:	7a 08       	sbc	r7, r10
     14a:	7a 08       	sbc	r7, r10
     14c:	7a 08       	sbc	r7, r10
     14e:	7a 08       	sbc	r7, r10
     150:	7a 08       	sbc	r7, r10
     152:	7a 08       	sbc	r7, r10
     154:	7a 08       	sbc	r7, r10
     156:	7a 08       	sbc	r7, r10
     158:	7a 08       	sbc	r7, r10
     15a:	7a 08       	sbc	r7, r10
     15c:	7a 08       	sbc	r7, r10
     15e:	7a 08       	sbc	r7, r10
     160:	7a 08       	sbc	r7, r10
     162:	7a 08       	sbc	r7, r10
     164:	7a 08       	sbc	r7, r10
     166:	7a 08       	sbc	r7, r10
     168:	7a 08       	sbc	r7, r10
     16a:	7a 08       	sbc	r7, r10
     16c:	7a 08       	sbc	r7, r10
     16e:	7a 08       	sbc	r7, r10
     170:	7a 08       	sbc	r7, r10
     172:	7a 08       	sbc	r7, r10
     174:	7a 08       	sbc	r7, r10
     176:	7a 08       	sbc	r7, r10
     178:	7a 08       	sbc	r7, r10
     17a:	7a 08       	sbc	r7, r10
     17c:	7a 08       	sbc	r7, r10
     17e:	7a 08       	sbc	r7, r10
     180:	7a 08       	sbc	r7, r10
     182:	7a 08       	sbc	r7, r10
     184:	7a 08       	sbc	r7, r10
     186:	7a 08       	sbc	r7, r10
     188:	7a 08       	sbc	r7, r10
     18a:	7a 08       	sbc	r7, r10
     18c:	7a 08       	sbc	r7, r10
     18e:	7a 08       	sbc	r7, r10
     190:	7a 08       	sbc	r7, r10
     192:	7a 08       	sbc	r7, r10
     194:	7a 08       	sbc	r7, r10
     196:	7a 08       	sbc	r7, r10
     198:	7a 08       	sbc	r7, r10
     19a:	7a 08       	sbc	r7, r10
     19c:	7a 08       	sbc	r7, r10
     19e:	7a 08       	sbc	r7, r10
     1a0:	7a 08       	sbc	r7, r10
     1a2:	7a 08       	sbc	r7, r10
     1a4:	7a 08       	sbc	r7, r10
     1a6:	7a 08       	sbc	r7, r10
     1a8:	7a 08       	sbc	r7, r10
     1aa:	7a 08       	sbc	r7, r10
     1ac:	7a 08       	sbc	r7, r10
     1ae:	7a 08       	sbc	r7, r10
     1b0:	7a 08       	sbc	r7, r10
     1b2:	7a 08       	sbc	r7, r10
     1b4:	7a 08       	sbc	r7, r10
     1b6:	7a 08       	sbc	r7, r10
     1b8:	7a 08       	sbc	r7, r10
     1ba:	7a 08       	sbc	r7, r10
     1bc:	7a 08       	sbc	r7, r10
     1be:	7a 08       	sbc	r7, r10
     1c0:	7a 08       	sbc	r7, r10
     1c2:	7a 08       	sbc	r7, r10
     1c4:	7a 08       	sbc	r7, r10
     1c6:	7a 08       	sbc	r7, r10
     1c8:	7a 08       	sbc	r7, r10
     1ca:	7a 08       	sbc	r7, r10
     1cc:	7a 08       	sbc	r7, r10
     1ce:	7a 08       	sbc	r7, r10
     1d0:	7a 08       	sbc	r7, r10
     1d2:	7a 08       	sbc	r7, r10
     1d4:	7a 08       	sbc	r7, r10
     1d6:	7a 08       	sbc	r7, r10
     1d8:	7a 08       	sbc	r7, r10
     1da:	7a 08       	sbc	r7, r10
     1dc:	7a 08       	sbc	r7, r10
     1de:	7a 08       	sbc	r7, r10
     1e0:	7a 08       	sbc	r7, r10
     1e2:	7a 08       	sbc	r7, r10
     1e4:	7a 08       	sbc	r7, r10
     1e6:	7a 08       	sbc	r7, r10
     1e8:	7a 08       	sbc	r7, r10
     1ea:	7a 08       	sbc	r7, r10
     1ec:	00 07       	cpc	r16, r16
     1ee:	0f 07       	cpc	r16, r31
     1f0:	1e 07       	cpc	r17, r30
     1f2:	2d 07       	cpc	r18, r29
     1f4:	7a 08       	sbc	r7, r10
     1f6:	7a 08       	sbc	r7, r10
     1f8:	4b 07       	cpc	r20, r27
     1fa:	5a 07       	cpc	r21, r26
     1fc:	69 07       	cpc	r22, r25
     1fe:	78 07       	cpc	r23, r24
     200:	87 07       	cpc	r24, r23
     202:	96 07       	cpc	r25, r22
     204:	3c 07       	cpc	r19, r28
     206:	7a 08       	sbc	r7, r10
     208:	7a 08       	sbc	r7, r10
     20a:	7a 08       	sbc	r7, r10
     20c:	7a 08       	sbc	r7, r10
     20e:	7a 08       	sbc	r7, r10
     210:	7a 08       	sbc	r7, r10
     212:	7a 08       	sbc	r7, r10
     214:	7a 08       	sbc	r7, r10
     216:	7a 08       	sbc	r7, r10
     218:	7a 08       	sbc	r7, r10
     21a:	7a 08       	sbc	r7, r10
     21c:	7a 08       	sbc	r7, r10
     21e:	7a 08       	sbc	r7, r10
     220:	7a 08       	sbc	r7, r10
     222:	7a 08       	sbc	r7, r10
     224:	7a 08       	sbc	r7, r10
     226:	7a 08       	sbc	r7, r10
     228:	7a 08       	sbc	r7, r10
     22a:	7a 08       	sbc	r7, r10
     22c:	7a 08       	sbc	r7, r10
     22e:	7a 08       	sbc	r7, r10
     230:	7a 08       	sbc	r7, r10
     232:	7a 08       	sbc	r7, r10
     234:	7a 08       	sbc	r7, r10
     236:	7a 08       	sbc	r7, r10
     238:	7a 08       	sbc	r7, r10
     23a:	7a 08       	sbc	r7, r10
     23c:	7a 08       	sbc	r7, r10
     23e:	7a 08       	sbc	r7, r10
     240:	7a 08       	sbc	r7, r10
     242:	7a 08       	sbc	r7, r10
     244:	7a 08       	sbc	r7, r10
     246:	7a 08       	sbc	r7, r10
     248:	7a 08       	sbc	r7, r10
     24a:	7a 08       	sbc	r7, r10
     24c:	7a 08       	sbc	r7, r10
     24e:	7a 08       	sbc	r7, r10
     250:	7a 08       	sbc	r7, r10
     252:	7a 08       	sbc	r7, r10
     254:	7a 08       	sbc	r7, r10
     256:	7a 08       	sbc	r7, r10
     258:	7a 08       	sbc	r7, r10
     25a:	7a 08       	sbc	r7, r10
     25c:	7a 08       	sbc	r7, r10
     25e:	7a 08       	sbc	r7, r10
     260:	7a 08       	sbc	r7, r10
     262:	7a 08       	sbc	r7, r10
     264:	7a 08       	sbc	r7, r10
     266:	7a 08       	sbc	r7, r10
     268:	7a 08       	sbc	r7, r10
     26a:	7a 08       	sbc	r7, r10
     26c:	7a 08       	sbc	r7, r10
     26e:	7a 08       	sbc	r7, r10
     270:	7a 08       	sbc	r7, r10
     272:	7a 08       	sbc	r7, r10
     274:	7a 08       	sbc	r7, r10
     276:	7a 08       	sbc	r7, r10
     278:	7a 08       	sbc	r7, r10
     27a:	7a 08       	sbc	r7, r10
     27c:	7a 08       	sbc	r7, r10
     27e:	7a 08       	sbc	r7, r10
     280:	7a 08       	sbc	r7, r10
     282:	7a 08       	sbc	r7, r10
     284:	7a 08       	sbc	r7, r10
     286:	7a 08       	sbc	r7, r10
     288:	7a 08       	sbc	r7, r10
     28a:	7a 08       	sbc	r7, r10
     28c:	7a 08       	sbc	r7, r10
     28e:	7a 08       	sbc	r7, r10
     290:	7a 08       	sbc	r7, r10
     292:	7a 08       	sbc	r7, r10
     294:	7a 08       	sbc	r7, r10
     296:	7a 08       	sbc	r7, r10
     298:	7a 08       	sbc	r7, r10
     29a:	7a 08       	sbc	r7, r10
     29c:	7a 08       	sbc	r7, r10
     29e:	7a 08       	sbc	r7, r10
     2a0:	7a 08       	sbc	r7, r10
     2a2:	7a 08       	sbc	r7, r10
     2a4:	7a 08       	sbc	r7, r10
     2a6:	7a 08       	sbc	r7, r10
     2a8:	7a 08       	sbc	r7, r10
     2aa:	7a 08       	sbc	r7, r10
     2ac:	7a 08       	sbc	r7, r10
     2ae:	7a 08       	sbc	r7, r10
     2b0:	7a 08       	sbc	r7, r10
     2b2:	7a 08       	sbc	r7, r10
     2b4:	a5 07       	cpc	r26, r21
     2b6:	b4 07       	cpc	r27, r20
     2b8:	c3 07       	cpc	r28, r19
     2ba:	7a 08       	sbc	r7, r10
     2bc:	d2 07       	cpc	r29, r18
     2be:	e1 07       	cpc	r30, r17
     2c0:	ff 07       	cpc	r31, r31
     2c2:	0e 08       	sbc	r0, r14
     2c4:	1d 08       	sbc	r1, r13
     2c6:	2c 08       	sbc	r2, r12
     2c8:	7a 08       	sbc	r7, r10
     2ca:	3b 08       	sbc	r3, r11
     2cc:	4a 08       	sbc	r4, r10
     2ce:	68 08       	sbc	r6, r8
     2d0:	59 08       	sbc	r5, r9
     2d2:	f0 07       	cpc	r31, r16
     2d4:	4e 0f       	add	r20, r30
     2d6:	7c 0f       	add	r23, r28
     2d8:	ca 15       	cp	r28, r10
     2da:	ca 15       	cp	r28, r10
     2dc:	ca 15       	cp	r28, r10
     2de:	ca 15       	cp	r28, r10
     2e0:	ca 15       	cp	r28, r10
     2e2:	ca 15       	cp	r28, r10
     2e4:	ca 15       	cp	r28, r10
     2e6:	ca 15       	cp	r28, r10
     2e8:	ca 15       	cp	r28, r10
     2ea:	ca 15       	cp	r28, r10
     2ec:	ca 15       	cp	r28, r10
     2ee:	ca 15       	cp	r28, r10
     2f0:	ca 15       	cp	r28, r10
     2f2:	ca 15       	cp	r28, r10
     2f4:	ca 15       	cp	r28, r10
     2f6:	ca 15       	cp	r28, r10
     2f8:	ca 15       	cp	r28, r10
     2fa:	ca 15       	cp	r28, r10
     2fc:	ca 15       	cp	r28, r10
     2fe:	ca 15       	cp	r28, r10
     300:	ca 15       	cp	r28, r10
     302:	ca 15       	cp	r28, r10
     304:	ca 15       	cp	r28, r10
     306:	ca 15       	cp	r28, r10
     308:	ca 15       	cp	r28, r10
     30a:	ca 15       	cp	r28, r10
     30c:	ca 15       	cp	r28, r10
     30e:	ca 15       	cp	r28, r10
     310:	ca 15       	cp	r28, r10
     312:	ca 15       	cp	r28, r10
     314:	ca 15       	cp	r28, r10
     316:	ca 15       	cp	r28, r10
     318:	ca 15       	cp	r28, r10
     31a:	ca 15       	cp	r28, r10
     31c:	ca 15       	cp	r28, r10
     31e:	ca 15       	cp	r28, r10
     320:	ca 15       	cp	r28, r10
     322:	ca 15       	cp	r28, r10
     324:	ca 15       	cp	r28, r10
     326:	ca 15       	cp	r28, r10
     328:	ca 15       	cp	r28, r10
     32a:	ca 15       	cp	r28, r10
     32c:	ca 15       	cp	r28, r10
     32e:	ca 15       	cp	r28, r10
     330:	ca 15       	cp	r28, r10
     332:	ca 15       	cp	r28, r10
     334:	ca 15       	cp	r28, r10
     336:	ca 15       	cp	r28, r10
     338:	ca 15       	cp	r28, r10
     33a:	ca 15       	cp	r28, r10
     33c:	ca 15       	cp	r28, r10
     33e:	ca 15       	cp	r28, r10
     340:	ca 15       	cp	r28, r10
     342:	ca 15       	cp	r28, r10
     344:	ca 15       	cp	r28, r10
     346:	ca 15       	cp	r28, r10
     348:	ca 15       	cp	r28, r10
     34a:	ca 15       	cp	r28, r10
     34c:	ca 15       	cp	r28, r10
     34e:	ca 15       	cp	r28, r10
     350:	ca 15       	cp	r28, r10
     352:	ca 15       	cp	r28, r10
     354:	ca 15       	cp	r28, r10
     356:	ca 15       	cp	r28, r10
     358:	ca 15       	cp	r28, r10
     35a:	ca 15       	cp	r28, r10
     35c:	ca 15       	cp	r28, r10
     35e:	ca 15       	cp	r28, r10
     360:	ca 15       	cp	r28, r10
     362:	ca 15       	cp	r28, r10
     364:	ca 15       	cp	r28, r10
     366:	ca 15       	cp	r28, r10
     368:	ca 15       	cp	r28, r10
     36a:	ca 15       	cp	r28, r10
     36c:	ca 15       	cp	r28, r10
     36e:	ca 15       	cp	r28, r10
     370:	ca 15       	cp	r28, r10
     372:	ca 15       	cp	r28, r10
     374:	ca 15       	cp	r28, r10
     376:	ca 15       	cp	r28, r10
     378:	ca 15       	cp	r28, r10
     37a:	ca 15       	cp	r28, r10
     37c:	ca 15       	cp	r28, r10
     37e:	ca 15       	cp	r28, r10
     380:	ca 15       	cp	r28, r10
     382:	ca 15       	cp	r28, r10
     384:	ca 15       	cp	r28, r10
     386:	ca 15       	cp	r28, r10
     388:	ca 15       	cp	r28, r10
     38a:	ca 15       	cp	r28, r10
     38c:	ca 15       	cp	r28, r10
     38e:	ca 15       	cp	r28, r10
     390:	ca 15       	cp	r28, r10
     392:	ca 15       	cp	r28, r10
     394:	ca 15       	cp	r28, r10
     396:	ca 15       	cp	r28, r10
     398:	ca 15       	cp	r28, r10
     39a:	ca 15       	cp	r28, r10
     39c:	9b 0f       	add	r25, r27
     39e:	db 0f       	add	r29, r27
     3a0:	fa 0f       	add	r31, r26
     3a2:	2a 10       	cpse	r2, r10
     3a4:	ca 15       	cp	r28, r10
     3a6:	ca 15       	cp	r28, r10
     3a8:	ce 10       	cpse	r12, r14
     3aa:	31 11       	cpse	r19, r1
     3ac:	50 11       	cpse	r21, r0
     3ae:	9a 11       	cpse	r25, r10
     3b0:	00 12       	cpse	r0, r16
     3b2:	db 11       	cpse	r29, r11
     3b4:	51 10       	cpse	r5, r1
     3b6:	ca 15       	cp	r28, r10
     3b8:	ca 15       	cp	r28, r10
     3ba:	ca 15       	cp	r28, r10
     3bc:	ca 15       	cp	r28, r10
     3be:	ca 15       	cp	r28, r10
     3c0:	ca 15       	cp	r28, r10
     3c2:	ca 15       	cp	r28, r10
     3c4:	ca 15       	cp	r28, r10
     3c6:	ca 15       	cp	r28, r10
     3c8:	ca 15       	cp	r28, r10
     3ca:	ca 15       	cp	r28, r10
     3cc:	ca 15       	cp	r28, r10
     3ce:	ca 15       	cp	r28, r10
     3d0:	ca 15       	cp	r28, r10
     3d2:	ca 15       	cp	r28, r10
     3d4:	ca 15       	cp	r28, r10
     3d6:	ca 15       	cp	r28, r10
     3d8:	ca 15       	cp	r28, r10
     3da:	ca 15       	cp	r28, r10
     3dc:	ca 15       	cp	r28, r10
     3de:	ca 15       	cp	r28, r10
     3e0:	ca 15       	cp	r28, r10
     3e2:	ca 15       	cp	r28, r10
     3e4:	ca 15       	cp	r28, r10
     3e6:	ca 15       	cp	r28, r10
     3e8:	ca 15       	cp	r28, r10
     3ea:	ca 15       	cp	r28, r10
     3ec:	ca 15       	cp	r28, r10
     3ee:	ca 15       	cp	r28, r10
     3f0:	ca 15       	cp	r28, r10
     3f2:	ca 15       	cp	r28, r10
     3f4:	ca 15       	cp	r28, r10
     3f6:	ca 15       	cp	r28, r10
     3f8:	ca 15       	cp	r28, r10
     3fa:	ca 15       	cp	r28, r10
     3fc:	ca 15       	cp	r28, r10
     3fe:	ca 15       	cp	r28, r10
     400:	ca 15       	cp	r28, r10
     402:	ca 15       	cp	r28, r10
     404:	ca 15       	cp	r28, r10
     406:	ca 15       	cp	r28, r10
     408:	ca 15       	cp	r28, r10
     40a:	ca 15       	cp	r28, r10
     40c:	ca 15       	cp	r28, r10
     40e:	ca 15       	cp	r28, r10
     410:	ca 15       	cp	r28, r10
     412:	ca 15       	cp	r28, r10
     414:	ca 15       	cp	r28, r10
     416:	ca 15       	cp	r28, r10
     418:	ca 15       	cp	r28, r10
     41a:	ca 15       	cp	r28, r10
     41c:	ca 15       	cp	r28, r10
     41e:	ca 15       	cp	r28, r10
     420:	ca 15       	cp	r28, r10
     422:	ca 15       	cp	r28, r10
     424:	ca 15       	cp	r28, r10
     426:	ca 15       	cp	r28, r10
     428:	ca 15       	cp	r28, r10
     42a:	ca 15       	cp	r28, r10
     42c:	ca 15       	cp	r28, r10
     42e:	ca 15       	cp	r28, r10
     430:	ca 15       	cp	r28, r10
     432:	ca 15       	cp	r28, r10
     434:	ca 15       	cp	r28, r10
     436:	ca 15       	cp	r28, r10
     438:	ca 15       	cp	r28, r10
     43a:	ca 15       	cp	r28, r10
     43c:	ca 15       	cp	r28, r10
     43e:	ca 15       	cp	r28, r10
     440:	ca 15       	cp	r28, r10
     442:	ca 15       	cp	r28, r10
     444:	ca 15       	cp	r28, r10
     446:	ca 15       	cp	r28, r10
     448:	ca 15       	cp	r28, r10
     44a:	ca 15       	cp	r28, r10
     44c:	ca 15       	cp	r28, r10
     44e:	ca 15       	cp	r28, r10
     450:	ca 15       	cp	r28, r10
     452:	ca 15       	cp	r28, r10
     454:	ca 15       	cp	r28, r10
     456:	ca 15       	cp	r28, r10
     458:	ca 15       	cp	r28, r10
     45a:	ca 15       	cp	r28, r10
     45c:	ca 15       	cp	r28, r10
     45e:	ca 15       	cp	r28, r10
     460:	ca 15       	cp	r28, r10
     462:	ca 15       	cp	r28, r10
     464:	5f 12       	cpse	r5, r31
     466:	7e 12       	cpse	r7, r30
     468:	b8 12       	cpse	r11, r24
     46a:	ca 15       	cp	r28, r10
     46c:	e9 12       	cpse	r14, r25
     46e:	15 13       	cpse	r17, r21
     470:	b9 13       	cpse	r27, r25
     472:	1c 14       	cp	r1, r12
     474:	3b 14       	cp	r3, r11
     476:	8f 14       	cp	r8, r15
     478:	ca 15       	cp	r28, r10
     47a:	c8 14       	cp	r12, r8
     47c:	12 15       	cp	r17, r2
     47e:	7c 15       	cp	r23, r12
     480:	57 15       	cp	r21, r7
     482:	3c 13       	cpse	r19, r28
     484:	5b 16       	cp	r5, r27
     486:	7a 16       	cp	r7, r26
     488:	08 1b       	sub	r16, r24
     48a:	08 1b       	sub	r16, r24
     48c:	08 1b       	sub	r16, r24
     48e:	08 1b       	sub	r16, r24
     490:	08 1b       	sub	r16, r24
     492:	08 1b       	sub	r16, r24
     494:	08 1b       	sub	r16, r24
     496:	08 1b       	sub	r16, r24
     498:	08 1b       	sub	r16, r24
     49a:	08 1b       	sub	r16, r24
     49c:	08 1b       	sub	r16, r24
     49e:	08 1b       	sub	r16, r24
     4a0:	08 1b       	sub	r16, r24
     4a2:	08 1b       	sub	r16, r24
     4a4:	08 1b       	sub	r16, r24
     4a6:	08 1b       	sub	r16, r24
     4a8:	08 1b       	sub	r16, r24
     4aa:	08 1b       	sub	r16, r24
     4ac:	08 1b       	sub	r16, r24
     4ae:	08 1b       	sub	r16, r24
     4b0:	08 1b       	sub	r16, r24
     4b2:	08 1b       	sub	r16, r24
     4b4:	08 1b       	sub	r16, r24
     4b6:	08 1b       	sub	r16, r24
     4b8:	08 1b       	sub	r16, r24
     4ba:	08 1b       	sub	r16, r24
     4bc:	08 1b       	sub	r16, r24
     4be:	08 1b       	sub	r16, r24
     4c0:	08 1b       	sub	r16, r24
     4c2:	08 1b       	sub	r16, r24
     4c4:	08 1b       	sub	r16, r24
     4c6:	08 1b       	sub	r16, r24
     4c8:	08 1b       	sub	r16, r24
     4ca:	08 1b       	sub	r16, r24
     4cc:	08 1b       	sub	r16, r24
     4ce:	08 1b       	sub	r16, r24
     4d0:	08 1b       	sub	r16, r24
     4d2:	08 1b       	sub	r16, r24
     4d4:	08 1b       	sub	r16, r24
     4d6:	08 1b       	sub	r16, r24
     4d8:	08 1b       	sub	r16, r24
     4da:	08 1b       	sub	r16, r24
     4dc:	08 1b       	sub	r16, r24
     4de:	08 1b       	sub	r16, r24
     4e0:	08 1b       	sub	r16, r24
     4e2:	08 1b       	sub	r16, r24
     4e4:	08 1b       	sub	r16, r24
     4e6:	08 1b       	sub	r16, r24
     4e8:	08 1b       	sub	r16, r24
     4ea:	08 1b       	sub	r16, r24
     4ec:	08 1b       	sub	r16, r24
     4ee:	08 1b       	sub	r16, r24
     4f0:	08 1b       	sub	r16, r24
     4f2:	08 1b       	sub	r16, r24
     4f4:	08 1b       	sub	r16, r24
     4f6:	08 1b       	sub	r16, r24
     4f8:	08 1b       	sub	r16, r24
     4fa:	08 1b       	sub	r16, r24
     4fc:	08 1b       	sub	r16, r24
     4fe:	08 1b       	sub	r16, r24
     500:	08 1b       	sub	r16, r24
     502:	08 1b       	sub	r16, r24
     504:	08 1b       	sub	r16, r24
     506:	08 1b       	sub	r16, r24
     508:	08 1b       	sub	r16, r24
     50a:	08 1b       	sub	r16, r24
     50c:	08 1b       	sub	r16, r24
     50e:	08 1b       	sub	r16, r24
     510:	08 1b       	sub	r16, r24
     512:	08 1b       	sub	r16, r24
     514:	08 1b       	sub	r16, r24
     516:	08 1b       	sub	r16, r24
     518:	08 1b       	sub	r16, r24
     51a:	08 1b       	sub	r16, r24
     51c:	08 1b       	sub	r16, r24
     51e:	08 1b       	sub	r16, r24
     520:	08 1b       	sub	r16, r24
     522:	08 1b       	sub	r16, r24
     524:	08 1b       	sub	r16, r24
     526:	08 1b       	sub	r16, r24
     528:	08 1b       	sub	r16, r24
     52a:	08 1b       	sub	r16, r24
     52c:	08 1b       	sub	r16, r24
     52e:	08 1b       	sub	r16, r24
     530:	08 1b       	sub	r16, r24
     532:	08 1b       	sub	r16, r24
     534:	08 1b       	sub	r16, r24
     536:	08 1b       	sub	r16, r24
     538:	08 1b       	sub	r16, r24
     53a:	08 1b       	sub	r16, r24
     53c:	08 1b       	sub	r16, r24
     53e:	08 1b       	sub	r16, r24
     540:	08 1b       	sub	r16, r24
     542:	08 1b       	sub	r16, r24
     544:	08 1b       	sub	r16, r24
     546:	08 1b       	sub	r16, r24
     548:	08 1b       	sub	r16, r24
     54a:	08 1b       	sub	r16, r24
     54c:	91 16       	cp	r9, r17
     54e:	a8 16       	cp	r10, r24
     550:	df 16       	cp	r13, r31
     552:	16 17       	cp	r17, r22
     554:	08 1b       	sub	r16, r24
     556:	08 1b       	sub	r16, r24
     558:	47 17       	cp	r20, r23
     55a:	6f 17       	cp	r22, r31
     55c:	a3 17       	cp	r26, r19
     55e:	d7 17       	cp	r29, r23
     560:	0b 18       	sub	r0, r11
     562:	24 18       	sub	r2, r4
     564:	3e 18       	sub	r3, r14
     566:	08 1b       	sub	r16, r24
     568:	08 1b       	sub	r16, r24
     56a:	08 1b       	sub	r16, r24
     56c:	08 1b       	sub	r16, r24
     56e:	08 1b       	sub	r16, r24
     570:	08 1b       	sub	r16, r24
     572:	08 1b       	sub	r16, r24
     574:	08 1b       	sub	r16, r24
     576:	08 1b       	sub	r16, r24
     578:	08 1b       	sub	r16, r24
     57a:	08 1b       	sub	r16, r24
     57c:	08 1b       	sub	r16, r24
     57e:	08 1b       	sub	r16, r24
     580:	08 1b       	sub	r16, r24
     582:	08 1b       	sub	r16, r24
     584:	08 1b       	sub	r16, r24
     586:	08 1b       	sub	r16, r24
     588:	08 1b       	sub	r16, r24
     58a:	08 1b       	sub	r16, r24
     58c:	08 1b       	sub	r16, r24
     58e:	08 1b       	sub	r16, r24
     590:	08 1b       	sub	r16, r24
     592:	08 1b       	sub	r16, r24
     594:	08 1b       	sub	r16, r24
     596:	08 1b       	sub	r16, r24
     598:	08 1b       	sub	r16, r24
     59a:	08 1b       	sub	r16, r24
     59c:	08 1b       	sub	r16, r24
     59e:	08 1b       	sub	r16, r24
     5a0:	08 1b       	sub	r16, r24
     5a2:	08 1b       	sub	r16, r24
     5a4:	08 1b       	sub	r16, r24
     5a6:	08 1b       	sub	r16, r24
     5a8:	08 1b       	sub	r16, r24
     5aa:	08 1b       	sub	r16, r24
     5ac:	08 1b       	sub	r16, r24
     5ae:	08 1b       	sub	r16, r24
     5b0:	08 1b       	sub	r16, r24
     5b2:	08 1b       	sub	r16, r24
     5b4:	08 1b       	sub	r16, r24
     5b6:	08 1b       	sub	r16, r24
     5b8:	08 1b       	sub	r16, r24
     5ba:	08 1b       	sub	r16, r24
     5bc:	08 1b       	sub	r16, r24
     5be:	08 1b       	sub	r16, r24
     5c0:	08 1b       	sub	r16, r24
     5c2:	08 1b       	sub	r16, r24
     5c4:	08 1b       	sub	r16, r24
     5c6:	08 1b       	sub	r16, r24
     5c8:	08 1b       	sub	r16, r24
     5ca:	08 1b       	sub	r16, r24
     5cc:	08 1b       	sub	r16, r24
     5ce:	08 1b       	sub	r16, r24
     5d0:	08 1b       	sub	r16, r24
     5d2:	08 1b       	sub	r16, r24
     5d4:	08 1b       	sub	r16, r24
     5d6:	08 1b       	sub	r16, r24
     5d8:	08 1b       	sub	r16, r24
     5da:	08 1b       	sub	r16, r24
     5dc:	08 1b       	sub	r16, r24
     5de:	08 1b       	sub	r16, r24
     5e0:	08 1b       	sub	r16, r24
     5e2:	08 1b       	sub	r16, r24
     5e4:	08 1b       	sub	r16, r24
     5e6:	08 1b       	sub	r16, r24
     5e8:	08 1b       	sub	r16, r24
     5ea:	08 1b       	sub	r16, r24
     5ec:	08 1b       	sub	r16, r24
     5ee:	08 1b       	sub	r16, r24
     5f0:	08 1b       	sub	r16, r24
     5f2:	08 1b       	sub	r16, r24
     5f4:	08 1b       	sub	r16, r24
     5f6:	08 1b       	sub	r16, r24
     5f8:	08 1b       	sub	r16, r24
     5fa:	08 1b       	sub	r16, r24
     5fc:	08 1b       	sub	r16, r24
     5fe:	08 1b       	sub	r16, r24
     600:	08 1b       	sub	r16, r24
     602:	08 1b       	sub	r16, r24
     604:	08 1b       	sub	r16, r24
     606:	08 1b       	sub	r16, r24
     608:	08 1b       	sub	r16, r24
     60a:	08 1b       	sub	r16, r24
     60c:	08 1b       	sub	r16, r24
     60e:	08 1b       	sub	r16, r24
     610:	08 1b       	sub	r16, r24
     612:	08 1b       	sub	r16, r24
     614:	68 18       	sub	r6, r8
     616:	94 18       	sub	r9, r4
     618:	c0 18       	sub	r12, r0
     61a:	08 1b       	sub	r16, r24
     61c:	07 19       	sub	r16, r7
     61e:	4e 19       	sub	r20, r14
     620:	90 19       	sub	r25, r0
     622:	b2 19       	sub	r27, r2
     624:	d6 19       	sub	r29, r6
     626:	fa 19       	sub	r31, r10
     628:	08 1b       	sub	r16, r24
     62a:	3c 1a       	sub	r3, r28
     62c:	7e 1a       	sub	r7, r30
     62e:	c0 1a       	sub	r12, r16
     630:	e2 1a       	sub	r14, r18
     632:	1b 1b       	sub	r17, r27
     634:	54 1b       	sub	r21, r20
     636:	87 1b       	sub	r24, r23
     638:	a0 1b       	sub	r26, r16
     63a:	ec 1b       	sub	r30, r28
     63c:	05 1c       	adc	r0, r5
     63e:	1e 1c       	adc	r1, r14
     640:	37 1c       	adc	r3, r7
     642:	50 1c       	adc	r5, r0
     644:	69 1c       	adc	r6, r9
     646:	81 1c       	adc	r8, r1
     648:	98 1c       	adc	r9, r8
     64a:	af 1c       	adc	r10, r15
     64c:	b8 1c       	adc	r11, r8
     64e:	b8 1c       	adc	r11, r8
     650:	22 1b       	sub	r18, r18
     652:	3b 1b       	sub	r19, r27
     654:	b8 1c       	adc	r11, r8
     656:	b8 1c       	adc	r11, r8
     658:	b8 1c       	adc	r11, r8
     65a:	b8 1c       	adc	r11, r8
     65c:	b8 1c       	adc	r11, r8
     65e:	b8 1c       	adc	r11, r8
     660:	b8 1c       	adc	r11, r8
     662:	b8 1c       	adc	r11, r8
     664:	b8 1c       	adc	r11, r8
     666:	b8 1c       	adc	r11, r8
     668:	b8 1c       	adc	r11, r8
     66a:	b8 1c       	adc	r11, r8
     66c:	b8 1c       	adc	r11, r8
     66e:	b8 1c       	adc	r11, r8
     670:	b8 1c       	adc	r11, r8
     672:	b8 1c       	adc	r11, r8
     674:	b8 1c       	adc	r11, r8
     676:	b8 1c       	adc	r11, r8
     678:	b8 1c       	adc	r11, r8
     67a:	b8 1c       	adc	r11, r8
     67c:	b8 1c       	adc	r11, r8
     67e:	b8 1c       	adc	r11, r8
     680:	b8 1c       	adc	r11, r8
     682:	b8 1c       	adc	r11, r8
     684:	b8 1c       	adc	r11, r8
     686:	b8 1c       	adc	r11, r8
     688:	b9 1b       	sub	r27, r25

0000068a <LcdCustomChar>:
     68a:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     69a:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     6aa:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     6ba:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000006ca <__ctors_end>:
     6ca:	11 24       	eor	r1, r1
     6cc:	1f be       	out	0x3f, r1	; 63
     6ce:	cf ef       	ldi	r28, 0xFF	; 255
     6d0:	d0 e1       	ldi	r29, 0x10	; 16
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	cd bf       	out	0x3d, r28	; 61

000006d6 <__do_copy_data>:
     6d6:	14 e0       	ldi	r17, 0x04	; 4
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b1 e0       	ldi	r27, 0x01	; 1
     6dc:	e0 e9       	ldi	r30, 0x90	; 144
     6de:	ff e3       	ldi	r31, 0x3F	; 63
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	0b bf       	out	0x3b, r16	; 59
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__do_copy_data+0x14>
     6e6:	07 90       	elpm	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	a2 3f       	cpi	r26, 0xF2	; 242
     6ec:	b1 07       	cpc	r27, r17
     6ee:	d9 f7       	brne	.-10     	; 0x6e6 <__do_copy_data+0x10>

000006f0 <__do_clear_bss>:
     6f0:	25 e0       	ldi	r18, 0x05	; 5
     6f2:	a2 ef       	ldi	r26, 0xF2	; 242
     6f4:	b4 e0       	ldi	r27, 0x04	; 4
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <.do_clear_bss_start>

000006f8 <.do_clear_bss_loop>:
     6f8:	1d 92       	st	X+, r1

000006fa <.do_clear_bss_start>:
     6fa:	ac 35       	cpi	r26, 0x5C	; 92
     6fc:	b2 07       	cpc	r27, r18
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <.do_clear_bss_loop>
     700:	87 d0       	rcall	.+270    	; 0x810 <main>
     702:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <_exit>

00000706 <schedulerInit>:
/************************************************************************/
/* @Scheduler Init                                                                     */
/************************************************************************/
void schedulerInit(void){
	
	TCCR0 |= TIMER0_SCHED_PRESC;
     706:	83 b7       	in	r24, 0x33	; 51
     708:	85 60       	ori	r24, 0x05	; 5
     70a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_WAVEFORM_MODE_CTC;
     70c:	83 b7       	in	r24, 0x33	; 51
     70e:	88 60       	ori	r24, 0x08	; 8
     710:	83 bf       	out	0x33, r24	; 51
	OCR0  = TIMER0_SCHED_RELOAD; // timer count reload
     712:	8d e7       	ldi	r24, 0x7D	; 125
     714:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<< OCIE0); // Enable timer compare interrupt
     716:	87 b7       	in	r24, 0x37	; 55
     718:	82 60       	ori	r24, 0x02	; 2
     71a:	87 bf       	out	0x37, r24	; 55
     71c:	08 95       	ret

0000071e <configGPIO>:
/* @Config GPIO                                                                     */
/************************************************************************/
void configGPIO(void){
	
	
	DDRE = 0x00; // inputs
     71e:	12 b8       	out	0x02, r1	; 2
	PORTE =0xFF; // enable pullups
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	83 b9       	out	0x03, r24	; 3
	
	DDRF =0xFF; // all outputs
     724:	80 93 61 00 	sts	0x0061, r24
	PORTF=0x00;
     728:	10 92 62 00 	sts	0x0062, r1
	
	DDRA = 0xD0; // low nible input
     72c:	80 ed       	ldi	r24, 0xD0	; 208
     72e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x3F; // enable pullpups
     730:	8f e3       	ldi	r24, 0x3F	; 63
     732:	8b bb       	out	0x1b, r24	; 27
     734:	08 95       	ret

00000736 <readButtons>:
/************************************************************************/
/* @read the buttons and complement and clean                                                                     */
/************************************************************************/
uint8_t readButtons(void){

	return (~PINA) &0x3F; // read the low nibble
     736:	89 b3       	in	r24, 0x19	; 25
     738:	80 95       	com	r24
}
     73a:	8f 73       	andi	r24, 0x3F	; 63
     73c:	08 95       	ret

0000073e <decodeButton>:

/************************************************************************/
/* @decode Button                                                                     */
/************************************************************************/
uint8_t decodeButton(uint8_t button){
	button &=0x3F; // ensure
     73e:	8f 73       	andi	r24, 0x3F	; 63
	switch (button){
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	fc 01       	movw	r30, r24
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	e0 32       	cpi	r30, 0x20	; 32
     748:	f1 05       	cpc	r31, r1
     74a:	80 f4       	brcc	.+32     	; 0x76c <decodeButton+0x2e>
     74c:	ea 5b       	subi	r30, 0xBA	; 186
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__tablejump2__>
		
		case 1: return BUTTON_ESC;
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	08 95       	ret
		break;
		
		case 2: return BUTTON_ENTER;
		break;
		
		case 4: return BUTTON_UP;
     758:	85 e0       	ldi	r24, 0x05	; 5
     75a:	08 95       	ret
		break;
		
		case 8: return BUTTON_DOWN;
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	08 95       	ret
		break;
		
		case 16: return SIGNAL_REMOTE_PED;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	08 95       	ret
		break;
		
		case 32: return SIGNAL_REMOTE_SWING;
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	08 95       	ret
		break;
		
		case 3: return BUTTON_PRG; // entering program
     768:	87 e0       	ldi	r24, 0x07	; 7
     76a:	08 95       	ret
		break;
		
		default: return 0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
	switch (button){
		
		case 1: return BUTTON_ESC;
		break;
		
		case 2: return BUTTON_ENTER;
     770:	84 e0       	ldi	r24, 0x04	; 4
		break;
		
		default: return 0;
		break;
	}
}
     772:	08 95       	ret

00000774 <debounceKey>:
/************************************************************************/
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
     774:	98 2f       	mov	r25, r24
	uint8_t key =0; // by default
	static uint8_t codeOld;
	static uint8_t keyCount;
	
	// ALREADY SOMETHIN PRESSED
	if(keyCount != 0){
     776:	80 91 f3 04 	lds	r24, 0x04F3
     77a:	88 23       	and	r24, r24
     77c:	69 f0       	breq	.+26     	; 0x798 <debounceKey+0x24>
		
		// IF SAME KEY and inside debounce times save
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
     77e:	20 91 f2 04 	lds	r18, 0x04F2
     782:	92 13       	cpse	r25, r18
     784:	1b c0       	rjmp	.+54     	; 0x7bc <debounceKey+0x48>
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	d8 f4       	brcc	.+54     	; 0x7c0 <debounceKey+0x4c>
			codeOld =codeNew;
			keyCount++;
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	80 93 f3 04 	sts	0x04F3, r24
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	c1 f0       	breq	.+48     	; 0x7c4 <debounceKey+0x50>
		
	}

	
	// INITIAL CONDITION
	if (keyCount == 0){
     794:	81 11       	cpse	r24, r1
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <debounceKey+0x32>
		codeOld = codeNew;
     798:	90 93 f2 04 	sts	0x04F2, r25
		keyCount++;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 f3 04 	sts	0x04F3, r24
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <debounceKey+0x34>
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     7a6:	80 e0       	ldi	r24, 0x00	; 0
		codeOld = codeNew;
		keyCount++;
	}
	
	// if pressed key different reset (user must release the key for new run)
	if(codeNew != codeOld){
     7a8:	20 91 f2 04 	lds	r18, 0x04F2
     7ac:	92 17       	cp	r25, r18
     7ae:	61 f0       	breq	.+24     	; 0x7c8 <debounceKey+0x54>
		codeOld =codeNew;
     7b0:	90 93 f2 04 	sts	0x04F2, r25
		keyCount =1;
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	90 93 f3 04 	sts	0x04F3, r25
     7ba:	08 95       	ret
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	f4 cf       	rjmp	.-24     	; 0x7a8 <debounceKey+0x34>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	f2 cf       	rjmp	.-28     	; 0x7a8 <debounceKey+0x34>
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
			codeOld =codeNew;
			keyCount++;
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
				key = codeNew; // ONLY HERE key is changed;
     7c4:	89 2f       	mov	r24, r25
     7c6:	f0 cf       	rjmp	.-32     	; 0x7a8 <debounceKey+0x34>
	if(codeNew != codeOld){
		codeOld =codeNew;
		keyCount =1;
	}
	return key;
}
     7c8:	08 95       	ret

000007ca <readSensors>:
/************************************************************************/
/* @ read sensors and activate sensor flags vars                                                                     */
/************************************************************************/
int readSensors(void){

	photoCellsState = bit_read(SENSORS_PORT,PIN_SENSOR_CELL);
     7ca:	81 b1       	in	r24, 0x01	; 1
     7cc:	81 70       	andi	r24, 0x01	; 1
     7ce:	80 93 02 05 	sts	0x0502, r24
	fca1State = bit_read(SENSORS_PORT,PIN_SENSOR_FCA1);
     7d2:	81 b1       	in	r24, 0x01	; 1
     7d4:	82 70       	andi	r24, 0x02	; 2
     7d6:	80 93 01 05 	sts	0x0501, r24
	fcc1State = bit_read(SENSORS_PORT,PIN_SENSOR_FCC1);
     7da:	81 b1       	in	r24, 0x01	; 1
     7dc:	84 70       	andi	r24, 0x04	; 4
     7de:	80 93 00 05 	sts	0x0500, r24
	
	fca2State = bit_read(SENSORS_PORT,PIN_SENSOR_FCA2);
     7e2:	81 b1       	in	r24, 0x01	; 1
     7e4:	88 70       	andi	r24, 0x08	; 8
     7e6:	80 93 ff 04 	sts	0x04FF, r24
	fcc2State = bit_read(SENSORS_PORT,PIN_SENSOR_FCC2);
     7ea:	81 b1       	in	r24, 0x01	; 1
     7ec:	80 71       	andi	r24, 0x10	; 16
     7ee:	80 93 fe 04 	sts	0x04FE, r24
	
	stopState = bit_read(SENSORS_PORT,PIN_SENSOR_STOP);
     7f2:	81 b1       	in	r24, 0x01	; 1
     7f4:	80 72       	andi	r24, 0x20	; 32
     7f6:	80 93 fd 04 	sts	0x04FD, r24
	aux1State = bit_read(SENSORS_PORT,PIN_SENSOR_AUX1);
     7fa:	81 b1       	in	r24, 0x01	; 1
     7fc:	80 74       	andi	r24, 0x40	; 64
     7fe:	80 93 fc 04 	sts	0x04FC, r24
	aux2State = bit_read(SENSORS_PORT,PIN_SENSOR_AUX2);
     802:	81 b1       	in	r24, 0x01	; 1
     804:	80 78       	andi	r24, 0x80	; 128
     806:	80 93 fb 04 	sts	0x04FB, r24
	
	
	return (1);	
}
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	08 95       	ret

00000810 <main>:


////////////////////////////////////////MAIN////////////////////////////////////
int main(void){
	
	USART1_config(USART1_MY_UBBRN,USART_DATA_FORMAT_8BITS|USART_STOP_BITS_1,USART_TRANSMIT_ENABLE|USART_RECEIVE_ENABLE| USART_INTERRUPT_ENABLE);
     810:	48 e9       	ldi	r20, 0x98	; 152
     812:	66 e0       	ldi	r22, 0x06	; 6
     814:	80 e1       	ldi	r24, 0x10	; 16
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	bd d7       	rcall	.+3962   	; 0x1794 <USART1_config>
	//Config IO Ports
	configGPIO();
     81a:	81 df       	rcall	.-254    	; 0x71e <configGPIO>
	//Init Scheduler
	schedulerInit();
     81c:	74 df       	rcall	.-280    	; 0x706 <schedulerInit>
	configPWM();
     81e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <configPWM>
	//Init ADC
	//ADC_init(ADC_ENABLE,ADC_REF_VCC,ADC_MAX_FREQ); //CHECK PARAMS TO FILL IN
	//Init LCD
	LCD_init();
     822:	63 d7       	rcall	.+3782   	; 0x16ea <LCD_init>
	LCD_clr();
     824:	12 d7       	rcall	.+3620   	; 0x164a <LCD_clr>
	//LCD_sendString(&temp);
	
	paramLoadFromEeprom();
     826:	0e 94 9f 0c 	call	0x193e	; 0x193e <paramLoadFromEeprom>
	
	showLcdSplash(); // show splash
     82a:	67 d4       	rcall	.+2254   	; 0x10fa <showLcdSplash>
	
	
	//enable interrupts
	sei();
     82c:	78 94       	sei
	
	USART1_sendStr("HELLO\n\r");
     82e:	87 e2       	ldi	r24, 0x27	; 39
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	c1 d7       	rcall	.+3970   	; 0x17b6 <USART1_sendStr>
	
	uint8_t code=0;
	uint8_t portVal=0;
	uint8_t codeSaved=0;
     834:	00 e0       	ldi	r16, 0x00	; 0
				// toogle output
				bit_toggle(RELAY_PORT,PIN_LAMP);
				
			}else{
				// clear output
				bit_clear(RELAY_PORT,PIN_LAMP);
     836:	c2 e6       	ldi	r28, 0x62	; 98
     838:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(flagTaskBlinkLights){
			
			if(flashingActive){
				// toogle output
				bit_toggle(RELAY_PORT,PIN_LAMP);
     83a:	68 94       	set
     83c:	ff 24       	eor	r15, r15
     83e:	f4 f8       	bld	r15, 4
	uint8_t codeSaved=0;
    while(1){
        //TODO:: Please write your application code 
		
		// read inputs
		if(flagTaskReadButtons){
     840:	90 91 f9 04 	lds	r25, 0x04F9
     844:	99 23       	and	r25, r25
     846:	51 f0       	breq	.+20     	; 0x85c <main+0x4c>
			
			
			
			// Read Buttons
			portVal = readButtons();
     848:	76 df       	rcall	.-276    	; 0x736 <readButtons>
			code = decodeButton(portVal);
     84a:	79 df       	rcall	.-270    	; 0x73e <decodeButton>
			code = debounceKey(code);
     84c:	93 df       	rcall	.-218    	; 0x774 <debounceKey>
     84e:	18 2f       	mov	r17, r24
			#ifdef DEBUG_MAIN
			sprintf(debugBuffer,"Key %d\n\r",code);
			USART1_sendStr(debugBuffer);
			#endif
			*/
			stateMachineProgram(code);
     850:	0e 94 0d 1b 	call	0x361a	; 0x361a <stateMachineProgram>
			if(code !=0x00){
     854:	11 11       	cpse	r17, r1
				codeSaved = code;
     856:	01 2f       	mov	r16, r17
			}
			
			
			
			
			flagTaskReadButtons=0;
     858:	10 92 f9 04 	sts	0x04F9, r1
		}
		
		// read sensors
		if(flagTaskReadSensors){
     85c:	90 91 f8 04 	lds	r25, 0x04F8
     860:	99 23       	and	r25, r25
     862:	19 f0       	breq	.+6      	; 0x86a <main+0x5a>
			//USART1_sendStr("HI\n\r");
			// read sensors
			readSensors();
     864:	b2 df       	rcall	.-156    	; 0x7ca <readSensors>
			flagTaskReadSensors=0;
     866:	10 92 f8 04 	sts	0x04F8, r1
		}
		
		
		// machine state // chan this to the read
		if(flagTaskStateUpdate){
     86a:	90 91 f7 04 	lds	r25, 0x04F7
     86e:	99 23       	and	r25, r25
     870:	31 f0       	breq	.+12     	; 0x87e <main+0x6e>
			
			stateMachineSwing(codeSaved);
     872:	80 2f       	mov	r24, r16
     874:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <stateMachineSwing>
			codeSaved =0x00;
			
			flagTaskStateUpdate=0;
     878:	10 92 f7 04 	sts	0x04F7, r1
		
		// machine state // chan this to the read
		if(flagTaskStateUpdate){
			
			stateMachineSwing(codeSaved);
			codeSaved =0x00;
     87c:	00 e0       	ldi	r16, 0x00	; 0
			flagTaskStateUpdate=0;
		}
		
		
		// Update outpputs
		if(flagTaskUpdateOutputs){
     87e:	90 91 f5 04 	lds	r25, 0x04F5
     882:	99 23       	and	r25, r25
     884:	31 f0       	breq	.+12     	; 0x892 <main+0x82>
			decodeStateMachine(stateSwing);
     886:	80 91 0f 01 	lds	r24, 0x010F
     88a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <decodeStateMachine>
			flagTaskUpdateOutputs=0;
     88e:	10 92 f5 04 	sts	0x04F5, r1
		}
		
		
		if(flagTaskBlinkLights){
     892:	90 91 f4 04 	lds	r25, 0x04F4
     896:	99 23       	and	r25, r25
     898:	69 f0       	breq	.+26     	; 0x8b4 <main+0xa4>
			
			if(flashingActive){
     89a:	90 91 fa 04 	lds	r25, 0x04FA
     89e:	99 23       	and	r25, r25
     8a0:	21 f0       	breq	.+8      	; 0x8aa <main+0x9a>
				// toogle output
				bit_toggle(RELAY_PORT,PIN_LAMP);
     8a2:	88 81       	ld	r24, Y
     8a4:	8f 25       	eor	r24, r15
     8a6:	88 83       	st	Y, r24
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <main+0xa0>
				
			}else{
				// clear output
				bit_clear(RELAY_PORT,PIN_LAMP);
     8aa:	88 81       	ld	r24, Y
     8ac:	8f 7e       	andi	r24, 0xEF	; 239
     8ae:	88 83       	st	Y, r24
			}
			
			flagTaskBlinkLights=0;
     8b0:	10 92 f4 04 	sts	0x04F4, r1
		}
		
		
		// lcd stuff
		if(flagTaskLcd){
     8b4:	90 91 f6 04 	lds	r25, 0x04F6
     8b8:	99 23       	and	r25, r25
     8ba:	41 f0       	breq	.+16     	; 0x8cc <main+0xbc>
			
			showLcdMessages(stateSwing);
     8bc:	80 91 0f 01 	lds	r24, 0x010F
     8c0:	6f d2       	rcall	.+1246   	; 0xda0 <showLcdMessages>
			
			lcdShowProgram(stateProgram);
     8c2:	80 91 0e 01 	lds	r24, 0x010E
     8c6:	0c d0       	rcall	.+24     	; 0x8e0 <lcdShowProgram>
				
			
			flagTaskLcd=0;
     8c8:	10 92 f6 04 	sts	0x04F6, r1
		}
		
		if(flagSaveMemory){
     8cc:	90 91 0f 05 	lds	r25, 0x050F
     8d0:	99 23       	and	r25, r25
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <main+0xc6>
     8d4:	b5 cf       	rjmp	.-150    	; 0x840 <main+0x30>
			paramSavetoEeprom();
     8d6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <paramSavetoEeprom>
			flagSaveMemory=0;
     8da:	10 92 0f 05 	sts	0x050F, r1
     8de:	b0 cf       	rjmp	.-160    	; 0x840 <main+0x30>

000008e0 <lcdShowProgram>:


/************************************************************************/
/* @ show lcd prog messages                                                                     */
/************************************************************************/
void lcdShowProgram(uint8_t state){
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	64 97       	sbiw	r28, 0x14	; 20
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
	char tempBuffer[20];
	
	switch(state){
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	fc 01       	movw	r30, r24
     8fc:	31 97       	sbiw	r30, 0x01	; 1
     8fe:	ec 32       	cpi	r30, 0x2C	; 44
     900:	f1 05       	cpc	r31, r1
     902:	08 f0       	brcs	.+2      	; 0x906 <lcdShowProgram+0x26>
     904:	42 c2       	rjmp	.+1156   	; 0xd8a <lcdShowProgram+0x4aa>
     906:	ea 59       	subi	r30, 0x9A	; 154
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__tablejump2__>
		case PRG_STATE_RUN:
		LCD_gotoXY(0,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	bb d6       	rcall	.+3446   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: RUN        ");
     914:	8f e2       	ldi	r24, 0x2F	; 47
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	9b d6       	rcall	.+3382   	; 0x1650 <LCD_sendString>
		
		LCD_gotoXY(0,1);
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	b5 d6       	rcall	.+3434   	; 0x168a <LCD_gotoXY>
		LCD_sendString("                   ");
     920:	81 e4       	ldi	r24, 0x41	; 65
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	95 d6       	rcall	.+3370   	; 0x1650 <LCD_sendString>
		break;
     926:	31 c2       	rjmp	.+1122   	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_POWER_INI:
		LCD_gotoXY(0,0);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	ae d6       	rcall	.+3420   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: POWER INI  ");
     92e:	85 e5       	ldi	r24, 0x55	; 85
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	8e d6       	rcall	.+3356   	; 0x1650 <LCD_sendString>
		//////////////////////////////////
		sprintf(tempBuffer,"POWER     %4d",powerInitial);
     934:	80 91 12 01 	lds	r24, 0x0112
     938:	90 91 13 01 	lds	r25, 0x0113
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	87 e6       	ldi	r24, 0x67	; 103
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	8e 01       	movw	r16, r28
     94a:	0f 5f       	subi	r16, 0xFF	; 255
     94c:	1f 4f       	sbci	r17, 0xFF	; 255
     94e:	1f 93       	push	r17
     950:	0f 93       	push	r16
     952:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		
		LCD_gotoXY(0,1);
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	97 d6       	rcall	.+3374   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     95c:	c8 01       	movw	r24, r16
     95e:	78 d6       	rcall	.+3312   	; 0x1650 <LCD_sendString>
		
		break;
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0e c2       	rjmp	.+1052   	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_POWER_COU:
		LCD_gotoXY(0,0);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	8b d6       	rcall	.+3350   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: POWER COU  ");
     974:	85 e7       	ldi	r24, 0x75	; 117
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	6b d6       	rcall	.+3286   	; 0x1650 <LCD_sendString>
		//////////////////////////////////
		sprintf(tempBuffer,"POWER     %4d",powerCourse);
     97a:	80 91 10 01 	lds	r24, 0x0110
     97e:	90 91 11 01 	lds	r25, 0x0111
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	87 e6       	ldi	r24, 0x67	; 103
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	8e 01       	movw	r16, r28
     990:	0f 5f       	subi	r16, 0xFF	; 255
     992:	1f 4f       	sbci	r17, 0xFF	; 255
     994:	1f 93       	push	r17
     996:	0f 93       	push	r16
     998:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		
		LCD_gotoXY(0,1);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	74 d6       	rcall	.+3304   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     9a2:	c8 01       	movw	r24, r16
     9a4:	55 d6       	rcall	.+3242   	; 0x1650 <LCD_sendString>
		
		break;
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	eb c1       	rjmp	.+982    	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		
		case PRG_STATE_SETUP_PREFLASHING_MODE:
		LCD_gotoXY(0,0);
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	68 d6       	rcall	.+3280   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: FLASH MODE ");
     9ba:	87 e8       	ldi	r24, 0x87	; 135
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	48 d6       	rcall	.+3216   	; 0x1650 <LCD_sendString>
		
		if(preFlashingActive == ACTIVE){
     9c0:	80 91 26 01 	lds	r24, 0x0126
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	51 f4       	brne	.+20     	; 0x9dc <lcdShowProgram+0xfc>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE             ");
     9c8:	84 e1       	ldi	r24, 0x14	; 20
     9ca:	e5 ec       	ldi	r30, 0xC5	; 197
     9cc:	f2 e0       	ldi	r31, 0x02	; 2
     9ce:	de 01       	movw	r26, r28
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	01 90       	ld	r0, Z+
     9d4:	0d 92       	st	X+, r0
     9d6:	8a 95       	dec	r24
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <lcdShowProgram+0xf2>
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <lcdShowProgram+0x10e>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE           ");
     9dc:	84 e1       	ldi	r24, 0x14	; 20
     9de:	e9 ed       	ldi	r30, 0xD9	; 217
     9e0:	f2 e0       	ldi	r31, 0x02	; 2
     9e2:	de 01       	movw	r26, r28
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	01 90       	ld	r0, Z+
     9e8:	0d 92       	st	X+, r0
     9ea:	8a 95       	dec	r24
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <lcdShowProgram+0x106>
		}
		LCD_gotoXY(0,1);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	4b d6       	rcall	.+3222   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	2b d6       	rcall	.+3158   	; 0x1650 <LCD_sendString>
		
		break;
     9fa:	c7 c1       	rjmp	.+910    	; 0xd8a <lcdShowProgram+0x4aa>
		
		case PRG_STATE_SETUP_PREFLASHING_TIME:
		LCD_gotoXY(0,0);
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	44 d6       	rcall	.+3208   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: FLASH TIME ");
     a02:	89 e9       	ldi	r24, 0x99	; 153
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	24 d6       	rcall	.+3144   	; 0x1650 <LCD_sendString>
		
		if(preFlashingActive == ACTIVE){
     a08:	80 91 26 01 	lds	r24, 0x0126
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	b9 f4       	brne	.+46     	; 0xa3e <lcdShowProgram+0x15e>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE    %4d",preFlashingTime);
     a10:	80 91 20 01 	lds	r24, 0x0120
     a14:	90 91 21 01 	lds	r25, 0x0121
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	8b ea       	ldi	r24, 0xAB	; 171
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	16 c0       	rjmp	.+44     	; 0xa6a <lcdShowProgram+0x18a>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE  %4d",preFlashingTime);
     a3e:	80 91 20 01 	lds	r24, 0x0120
     a42:	90 91 21 01 	lds	r25, 0x0121
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	89 eb       	ldi	r24, 0xB9	; 185
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	ce 01       	movw	r24, r28
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	9f 93       	push	r25
     a58:	8f 93       	push	r24
     a5a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
		}
		LCD_gotoXY(0,1);
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0d d6       	rcall	.+3098   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	ed d5       	rcall	.+3034   	; 0x1650 <LCD_sendString>
		
		break;
     a76:	89 c1       	rjmp	.+786    	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_UNLOCK_TIME:
		LCD_gotoXY(0,0);
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	06 d6       	rcall	.+3084   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: UNLOCK TIME");
     a7e:	87 ec       	ldi	r24, 0xC7	; 199
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	e6 d5       	rcall	.+3020   	; 0x1650 <LCD_sendString>
		//////////////////////////////////
		sprintf(tempBuffer,"UNLOCK    %4d",unlockHoldTime);
     a84:	80 91 16 01 	lds	r24, 0x0116
     a88:	90 91 17 01 	lds	r25, 0x0117
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	89 ed       	ldi	r24, 0xD9	; 217
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	8e 01       	movw	r16, r28
     a9a:	0f 5f       	subi	r16, 0xFF	; 255
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	1f 93       	push	r17
     aa0:	0f 93       	push	r16
     aa2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		LCD_gotoXY(0,1);
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	ef d5       	rcall	.+3038   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     aac:	c8 01       	movw	r24, r16
     aae:	d0 d5       	rcall	.+2976   	; 0x1650 <LCD_sendString>
		
		break;
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	66 c1       	rjmp	.+716    	; 0xd8a <lcdShowProgram+0x4aa>
		
		case PRG_STATE_SETUP_RAMBLOW_MODE:
		LCD_gotoXY(0,0);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	e3 d5       	rcall	.+3014   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: RAM MODE   ");
     ac4:	87 ee       	ldi	r24, 0xE7	; 231
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	c3 d5       	rcall	.+2950   	; 0x1650 <LCD_sendString>
		
		if(ramBlowActive == ACTIVE){
     aca:	80 91 25 01 	lds	r24, 0x0125
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	51 f4       	brne	.+20     	; 0xae6 <lcdShowProgram+0x206>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE             ");
     ad2:	84 e1       	ldi	r24, 0x14	; 20
     ad4:	e5 ec       	ldi	r30, 0xC5	; 197
     ad6:	f2 e0       	ldi	r31, 0x02	; 2
     ad8:	de 01       	movw	r26, r28
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	01 90       	ld	r0, Z+
     ade:	0d 92       	st	X+, r0
     ae0:	8a 95       	dec	r24
     ae2:	e1 f7       	brne	.-8      	; 0xadc <lcdShowProgram+0x1fc>
     ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <lcdShowProgram+0x218>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE           ");
     ae6:	84 e1       	ldi	r24, 0x14	; 20
     ae8:	e9 ed       	ldi	r30, 0xD9	; 217
     aea:	f2 e0       	ldi	r31, 0x02	; 2
     aec:	de 01       	movw	r26, r28
     aee:	11 96       	adiw	r26, 0x01	; 1
     af0:	01 90       	ld	r0, Z+
     af2:	0d 92       	st	X+, r0
     af4:	8a 95       	dec	r24
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <lcdShowProgram+0x210>
		}
		LCD_gotoXY(0,1);
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	c6 d5       	rcall	.+2956   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	a6 d5       	rcall	.+2892   	; 0x1650 <LCD_sendString>
		
		break;
     b04:	42 c1       	rjmp	.+644    	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_RAMBLOW_TIME:
		LCD_gotoXY(0,0);
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	bf d5       	rcall	.+2942   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: RAM TIME   ");
     b0c:	89 ef       	ldi	r24, 0xF9	; 249
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	9f d5       	rcall	.+2878   	; 0x1650 <LCD_sendString>
		
		if(ramBlowActive == ACTIVE){
     b12:	80 91 25 01 	lds	r24, 0x0125
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	b9 f4       	brne	.+46     	; 0xb48 <lcdShowProgram+0x268>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE    %4d",ramBlowTime);
     b1a:	80 91 1e 01 	lds	r24, 0x011E
     b1e:	90 91 1f 01 	lds	r25, 0x011F
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	8b ea       	ldi	r24, 0xAB	; 171
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	16 c0       	rjmp	.+44     	; 0xb74 <lcdShowProgram+0x294>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE  %4d",ramBlowTime);
     b48:	80 91 1e 01 	lds	r24, 0x011E
     b4c:	90 91 1f 01 	lds	r25, 0x011F
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	89 eb       	ldi	r24, 0xB9	; 185
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	9f 93       	push	r25
     b5a:	8f 93       	push	r24
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
		}
		LCD_gotoXY(0,1);
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	88 d5       	rcall	.+2832   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	68 d5       	rcall	.+2768   	; 0x1650 <LCD_sendString>
		
		break;
     b80:	04 c1       	rjmp	.+520    	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_DELAY_GATES_TIME:
		LCD_gotoXY(0,0);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	81 d5       	rcall	.+2818   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: GATE DELAY ");
     b88:	8b e0       	ldi	r24, 0x0B	; 11
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	61 d5       	rcall	.+2754   	; 0x1650 <LCD_sendString>
		//////////////////////////////////
		sprintf(tempBuffer,"DELAY     %4d",delayGatesTime);
     b8e:	80 91 1c 01 	lds	r24, 0x011C
     b92:	90 91 1d 01 	lds	r25, 0x011D
     b96:	9f 93       	push	r25
     b98:	8f 93       	push	r24
     b9a:	8d e1       	ldi	r24, 0x1D	; 29
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	9f 93       	push	r25
     ba0:	8f 93       	push	r24
     ba2:	8e 01       	movw	r16, r28
     ba4:	0f 5f       	subi	r16, 0xFF	; 255
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
     ba8:	1f 93       	push	r17
     baa:	0f 93       	push	r16
     bac:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		LCD_gotoXY(0,1);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	6a d5       	rcall	.+2772   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     bb6:	c8 01       	movw	r24, r16
     bb8:	4b d5       	rcall	.+2710   	; 0x1650 <LCD_sendString>
		
		break;
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	e1 c0       	rjmp	.+450    	; 0xd8a <lcdShowProgram+0x4aa>
		
		case PRG_STATE_SETUP_WORKING_TIME:
		LCD_gotoXY(0,0);
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	5e d5       	rcall	.+2748   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: WORK TIME  ");
     bce:	8b e2       	ldi	r24, 0x2B	; 43
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	3e d5       	rcall	.+2684   	; 0x1650 <LCD_sendString>
		
		//////////////////////////////////
		sprintf(tempBuffer,"TIME      %4d",workingTime);
     bd4:	80 91 1a 01 	lds	r24, 0x011A
     bd8:	90 91 1b 01 	lds	r25, 0x011B
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	8d e3       	ldi	r24, 0x3D	; 61
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	8e 01       	movw	r16, r28
     bea:	0f 5f       	subi	r16, 0xFF	; 255
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	1f 93       	push	r17
     bf0:	0f 93       	push	r16
     bf2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		LCD_gotoXY(0,1);
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	47 d5       	rcall	.+2702   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     bfc:	c8 01       	movw	r24, r16
     bfe:	28 d5       	rcall	.+2640   	; 0x1650 <LCD_sendString>
		
		break;
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	be c0       	rjmp	.+380    	; 0xd8a <lcdShowProgram+0x4aa>
		
		case PRG_STATE_SETUP_WAITNG_TIME:
		LCD_gotoXY(0,0);
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	3b d5       	rcall	.+2678   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: WAIT TIME  ");
     c14:	8b e4       	ldi	r24, 0x4B	; 75
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	1b d5       	rcall	.+2614   	; 0x1650 <LCD_sendString>
		//////////////////////////////////
		sprintf(tempBuffer,"TIME      %4d",waitingTime);
     c1a:	80 91 18 01 	lds	r24, 0x0118
     c1e:	90 91 19 01 	lds	r25, 0x0119
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	8d e3       	ldi	r24, 0x3D	; 61
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	8e 01       	movw	r16, r28
     c30:	0f 5f       	subi	r16, 0xFF	; 255
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	1f 93       	push	r17
     c36:	0f 93       	push	r16
     c38:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		LCD_gotoXY(0,1);
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	24 d5       	rcall	.+2632   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     c42:	c8 01       	movw	r24, r16
     c44:	05 d5       	rcall	.+2570   	; 0x1650 <LCD_sendString>
		
		break;
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	9b c0       	rjmp	.+310    	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		
		case PRG_STATE_SETUP_AUTOMATIC_MODE:
		LCD_gotoXY(0,0);
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	18 d5       	rcall	.+2608   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: AUTO MODE  ");
     c5a:	8d e5       	ldi	r24, 0x5D	; 93
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	f8 d4       	rcall	.+2544   	; 0x1650 <LCD_sendString>
		
		if(autoCloseActive == ACTIVE){
     c60:	80 91 22 01 	lds	r24, 0x0122
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	51 f4       	brne	.+20     	; 0xc7c <lcdShowProgram+0x39c>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE             ");
     c68:	84 e1       	ldi	r24, 0x14	; 20
     c6a:	e5 ec       	ldi	r30, 0xC5	; 197
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	de 01       	movw	r26, r28
     c70:	11 96       	adiw	r26, 0x01	; 1
     c72:	01 90       	ld	r0, Z+
     c74:	0d 92       	st	X+, r0
     c76:	8a 95       	dec	r24
     c78:	e1 f7       	brne	.-8      	; 0xc72 <lcdShowProgram+0x392>
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <lcdShowProgram+0x3ae>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE           ");
     c7c:	84 e1       	ldi	r24, 0x14	; 20
     c7e:	e9 ed       	ldi	r30, 0xD9	; 217
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	de 01       	movw	r26, r28
     c84:	11 96       	adiw	r26, 0x01	; 1
     c86:	01 90       	ld	r0, Z+
     c88:	0d 92       	st	X+, r0
     c8a:	8a 95       	dec	r24
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <lcdShowProgram+0x3a6>
		}
		LCD_gotoXY(0,1);
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	fb d4       	rcall	.+2550   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	db d4       	rcall	.+2486   	; 0x1650 <LCD_sendString>
		
		break;
     c9a:	77 c0       	rjmp	.+238    	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_HOLD_TIME:
		LCD_gotoXY(0,0);
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	f4 d4       	rcall	.+2536   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: HOLD MODE  ");
     ca2:	8f e6       	ldi	r24, 0x6F	; 111
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	d4 d4       	rcall	.+2472   	; 0x1650 <LCD_sendString>
		//////////////////////////////////
		sprintf(tempBuffer,"HOLD TIME %4d",holdingTime);
     ca8:	80 91 14 01 	lds	r24, 0x0114
     cac:	90 91 15 01 	lds	r25, 0x0115
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	81 e8       	ldi	r24, 0x81	; 129
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	8e 01       	movw	r16, r28
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	1f 93       	push	r17
     cc4:	0f 93       	push	r16
     cc6:	0e 94 de 1c 	call	0x39bc	; 0x39bc <sprintf>
		LCD_gotoXY(0,1);
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	dd d4       	rcall	.+2490   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     cd0:	c8 01       	movw	r24, r16
     cd2:	be d4       	rcall	.+2428   	; 0x1650 <LCD_sendString>
		
		break;
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	54 c0       	rjmp	.+168    	; 0xd8a <lcdShowProgram+0x4aa>
		
		case PRG_STATE_SETUP_STEP_MODE:
		LCD_gotoXY(0,0);
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	d1 d4       	rcall	.+2466   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: STEP MODE  ");
     ce8:	8f e8       	ldi	r24, 0x8F	; 143
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	b1 d4       	rcall	.+2402   	; 0x1650 <LCD_sendString>
		
		
		if(stepActive == ACTIVE){
     cee:	80 91 24 01 	lds	r24, 0x0124
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	51 f4       	brne	.+20     	; 0xd0a <lcdShowProgram+0x42a>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE             ");
     cf6:	84 e1       	ldi	r24, 0x14	; 20
     cf8:	e5 ec       	ldi	r30, 0xC5	; 197
     cfa:	f2 e0       	ldi	r31, 0x02	; 2
     cfc:	de 01       	movw	r26, r28
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	01 90       	ld	r0, Z+
     d02:	0d 92       	st	X+, r0
     d04:	8a 95       	dec	r24
     d06:	e1 f7       	brne	.-8      	; 0xd00 <lcdShowProgram+0x420>
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <lcdShowProgram+0x43c>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE           ");
     d0a:	84 e1       	ldi	r24, 0x14	; 20
     d0c:	e9 ed       	ldi	r30, 0xD9	; 217
     d0e:	f2 e0       	ldi	r31, 0x02	; 2
     d10:	de 01       	movw	r26, r28
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	01 90       	ld	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	8a 95       	dec	r24
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <lcdShowProgram+0x434>
		}
		LCD_gotoXY(0,1);
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	b4 d4       	rcall	.+2408   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     d22:	ce 01       	movw	r24, r28
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	94 d4       	rcall	.+2344   	; 0x1650 <LCD_sendString>
		
		break;
     d28:	30 c0       	rjmp	.+96     	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_PHOTOCELL_MODE:
		LCD_gotoXY(0,0);
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	ad d4       	rcall	.+2394   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: CELL MODE  ");
     d30:	81 ea       	ldi	r24, 0xA1	; 161
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	8d d4       	rcall	.+2330   	; 0x1650 <LCD_sendString>
		
		if(cellActive == ACTIVE){
     d36:	80 91 23 01 	lds	r24, 0x0123
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	51 f4       	brne	.+20     	; 0xd52 <lcdShowProgram+0x472>
			//////////////////////////////////
			sprintf(tempBuffer,"ACTIVE             ");
     d3e:	84 e1       	ldi	r24, 0x14	; 20
     d40:	e5 ec       	ldi	r30, 0xC5	; 197
     d42:	f2 e0       	ldi	r31, 0x02	; 2
     d44:	de 01       	movw	r26, r28
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	01 90       	ld	r0, Z+
     d4a:	0d 92       	st	X+, r0
     d4c:	8a 95       	dec	r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <lcdShowProgram+0x468>
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <lcdShowProgram+0x484>
			}else{
			//////////////////////////////////
			sprintf(tempBuffer,"INACTIVE           ");
     d52:	84 e1       	ldi	r24, 0x14	; 20
     d54:	e9 ed       	ldi	r30, 0xD9	; 217
     d56:	f2 e0       	ldi	r31, 0x02	; 2
     d58:	de 01       	movw	r26, r28
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	01 90       	ld	r0, Z+
     d5e:	0d 92       	st	X+, r0
     d60:	8a 95       	dec	r24
     d62:	e1 f7       	brne	.-8      	; 0xd5c <lcdShowProgram+0x47c>
		}
		LCD_gotoXY(0,1);
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 d4       	rcall	.+2336   	; 0x168a <LCD_gotoXY>
		LCD_sendString(tempBuffer);
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	70 d4       	rcall	.+2272   	; 0x1650 <LCD_sendString>
		
		break;
     d70:	0c c0       	rjmp	.+24     	; 0xd8a <lcdShowProgram+0x4aa>
		
		
		case PRG_STATE_SETUP_SAVE_PARAMETERS:
		LCD_gotoXY(0,0);
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	89 d4       	rcall	.+2322   	; 0x168a <LCD_gotoXY>
		//////////////////////////////////
		LCD_sendString("MODE: SAVING     ");
     d78:	83 eb       	ldi	r24, 0xB3	; 179
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	69 d4       	rcall	.+2258   	; 0x1650 <LCD_sendString>
		
		LCD_gotoXY(0,1);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	83 d4       	rcall	.+2310   	; 0x168a <LCD_gotoXY>
		LCD_sendString("                   ");
     d84:	81 e4       	ldi	r24, 0x41	; 65
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	63 d4       	rcall	.+2246   	; 0x1650 <LCD_sendString>
		break;
	}
	
	
}
     d8a:	64 96       	adiw	r28, 0x14	; 20
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <showLcdMessages>:
/* @ show lcd messages according state                                                                     */
/************************************************************************/
int showLcdMessages(uint8_t state){

	static uint8_t lastState;
	if(lastState == state) return (0);
     da0:	90 91 03 05 	lds	r25, 0x0503
     da4:	98 17       	cp	r25, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <showLcdMessages+0xa>
     da8:	a2 c1       	rjmp	.+836    	; 0x10ee <showLcdMessages+0x34e>
	
	lastState = state;
     daa:	80 93 03 05 	sts	0x0503, r24

	switch(state){
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	e8 3d       	cpi	r30, 0xD8	; 216
     db6:	f1 05       	cpc	r31, r1
     db8:	08 f0       	brcs	.+2      	; 0xdbc <showLcdMessages+0x1c>
     dba:	9c c1       	rjmp	.+824    	; 0x10f4 <showLcdMessages+0x354>
     dbc:	ee 56       	subi	r30, 0x6E	; 110
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__tablejump2__>
		case STATE_CLOSED_IDLE:
		LCD_gotoXY(0,2);
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	60 d4       	rcall	.+2240   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     dca:	8d ee       	ldi	r24, 0xED	; 237
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	40 d4       	rcall	.+2176   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	5a d4       	rcall	.+2228   	; 0x168a <LCD_gotoXY>
		LCD_sendString("IDLE CLOSED         ");
     dd6:	84 ef       	ldi	r24, 0xF4	; 244
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	3a d4       	rcall	.+2164   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("IDLE CLOSED         ");
		
		break;
     de0:	08 95       	ret
		
		case STATE_PRE_FLASHING:
		LCD_gotoXY(0,2);
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	51 d4       	rcall	.+2210   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     de8:	8d ee       	ldi	r24, 0xED	; 237
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	31 d4       	rcall	.+2146   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     dee:	63 e0       	ldi	r22, 0x03	; 3
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	4b d4       	rcall	.+2198   	; 0x168a <LCD_gotoXY>
		LCD_sendString("PRE FLASHING  ");
     df4:	89 e0       	ldi	r24, 0x09	; 9
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	2b d4       	rcall	.+2134   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("PRE FLASHING  ");
		
		break;
     dfe:	08 95       	ret
		
		case STATE_UNLOCK:
		LCD_gotoXY(0,2);
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	42 d4       	rcall	.+2180   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     e06:	8d ee       	ldi	r24, 0xED	; 237
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	22 d4       	rcall	.+2116   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     e0c:	63 e0       	ldi	r22, 0x03	; 3
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	3c d4       	rcall	.+2168   	; 0x168a <LCD_gotoXY>
		LCD_sendString("UNLOCK        ");
     e12:	88 e1       	ldi	r24, 0x18	; 24
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	1c d4       	rcall	.+2104   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("UNLOCK        ");
		
		break;
     e1c:	08 95       	ret
		
		case STATE_OPENING_M1_RAM_PED:
		LCD_gotoXY(0,2);
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	33 d4       	rcall	.+2150   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     e24:	8d ee       	ldi	r24, 0xED	; 237
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	13 d4       	rcall	.+2086   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     e2a:	63 e0       	ldi	r22, 0x03	; 3
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	2d d4       	rcall	.+2138   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN RAM   ");
     e30:	87 e2       	ldi	r24, 0x27	; 39
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	0d d4       	rcall	.+2074   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN RAM   ");
		
		break;
     e3a:	08 95       	ret
		
		
		case STATE_OPENING_M1_INITIAL_PED:
		LCD_gotoXY(0,2);
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	24 d4       	rcall	.+2120   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     e42:	8d ee       	ldi	r24, 0xED	; 237
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	04 d4       	rcall	.+2056   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     e48:	63 e0       	ldi	r22, 0x03	; 3
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	1e d4       	rcall	.+2108   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN INI   ");
     e4e:	86 e3       	ldi	r24, 0x36	; 54
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	fe d3       	rcall	.+2044   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN INI   ");
		
		break;
     e58:	08 95       	ret
		
		case STATE_OPENING_M1_COURSE_PED:
		LCD_gotoXY(0,2);
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	15 d4       	rcall	.+2090   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     e60:	8d ee       	ldi	r24, 0xED	; 237
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	f5 d3       	rcall	.+2026   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     e66:	63 e0       	ldi	r22, 0x03	; 3
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0f d4       	rcall	.+2078   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN COUR  ");
     e6c:	85 e4       	ldi	r24, 0x45	; 69
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	ef d3       	rcall	.+2014   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN COUR  ");
		
		break;
     e76:	08 95       	ret
		
		
		case STATE_HOLD_OPENING_M1_PED:
		LCD_gotoXY(0,2);
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	06 d4       	rcall	.+2060   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     e7e:	8d ee       	ldi	r24, 0xED	; 237
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	e6 d3       	rcall	.+1996   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     e84:	63 e0       	ldi	r22, 0x03	; 3
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	00 d4       	rcall	.+2048   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN HOLD  ");
     e8a:	84 e5       	ldi	r24, 0x54	; 84
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	e0 d3       	rcall	.+1984   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN HOLD  ");
		
		break;
     e94:	08 95       	ret
		
		
		case STATE_WAITING_M1_TIME_OR_SIGNAL_PED:
		LCD_gotoXY(0,2);
     e96:	62 e0       	ldi	r22, 0x02	; 2
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	f7 d3       	rcall	.+2030   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     e9c:	8d ee       	ldi	r24, 0xED	; 237
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	d7 d3       	rcall	.+1966   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     ea2:	63 e0       	ldi	r22, 0x03	; 3
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	f1 d3       	rcall	.+2018   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 WAITING    ");
     ea8:	83 e6       	ldi	r24, 0x63	; 99
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	d1 d3       	rcall	.+1954   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 WAITING    ");
		
		break;
     eb2:	08 95       	ret
		
		
		
		case STATE_CLOSING_M1_RAM_PED:
		LCD_gotoXY(0,2);
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	e8 d3       	rcall	.+2000   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     eba:	8d ee       	ldi	r24, 0xED	; 237
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	c8 d3       	rcall	.+1936   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     ec0:	63 e0       	ldi	r22, 0x03	; 3
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	e2 d3       	rcall	.+1988   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOSE RAM  ");
     ec6:	82 e7       	ldi	r24, 0x72	; 114
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	c2 d3       	rcall	.+1924   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOSE RAM  ");
		
		break;
     ed0:	08 95       	ret
		
		
		case STATE_CLOSING_M1_INITIAL_PED:
		LCD_gotoXY(0,2);
     ed2:	62 e0       	ldi	r22, 0x02	; 2
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	d9 d3       	rcall	.+1970   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     ed8:	8d ee       	ldi	r24, 0xED	; 237
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	b9 d3       	rcall	.+1906   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     ede:	63 e0       	ldi	r22, 0x03	; 3
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	d3 d3       	rcall	.+1958   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOSE INI  ");
     ee4:	81 e8       	ldi	r24, 0x81	; 129
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	b3 d3       	rcall	.+1894   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOSE INI  ");
		
		break;
     eee:	08 95       	ret
		
		
		case STATE_CLOSING_M1_COURSE_PED:
		LCD_gotoXY(0,2);
     ef0:	62 e0       	ldi	r22, 0x02	; 2
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	ca d3       	rcall	.+1940   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     ef6:	8d ee       	ldi	r24, 0xED	; 237
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	aa d3       	rcall	.+1876   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     efc:	63 e0       	ldi	r22, 0x03	; 3
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	c4 d3       	rcall	.+1928   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOSE COUR ");
     f02:	80 e9       	ldi	r24, 0x90	; 144
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	a4 d3       	rcall	.+1864   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOSE COUR ");
		
		break;
     f0c:	08 95       	ret
		

		case STATE_HOLD_CLOSING_M1_PED:
		LCD_gotoXY(0,2);
     f0e:	62 e0       	ldi	r22, 0x02	; 2
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	bb d3       	rcall	.+1910   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     f14:	8d ee       	ldi	r24, 0xED	; 237
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	9b d3       	rcall	.+1846   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     f1a:	63 e0       	ldi	r22, 0x03	; 3
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	b5 d3       	rcall	.+1898   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOSE HOLD ");
     f20:	8f e9       	ldi	r24, 0x9F	; 159
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	95 d3       	rcall	.+1834   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOSE HOLD ");
		
		break;
     f2a:	08 95       	ret
		
		case STATE_CELL_CLOSING_M1_PED:
		LCD_gotoXY(0,2);
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	ac d3       	rcall	.+1880   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     f32:	8d ee       	ldi	r24, 0xED	; 237
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	8c d3       	rcall	.+1816   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     f38:	63 e0       	ldi	r22, 0x03	; 3
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	a6 d3       	rcall	.+1868   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOSE CELL ");
     f3e:	8e ea       	ldi	r24, 0xAE	; 174
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	86 d3       	rcall	.+1804   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOSE CELL ");
		
		break;
     f48:	08 95       	ret
		
		case STATE_OPENING_M1_RAM_M2_HOLD_SWING:
		LCD_gotoXY(0,2);
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	9d d3       	rcall	.+1850   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     f50:	8d ee       	ldi	r24, 0xED	; 237
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	7d d3       	rcall	.+1786   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	97 d3       	rcall	.+1838   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN RAM M2 HOLD");
     f5c:	8d eb       	ldi	r24, 0xBD	; 189
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	77 d3       	rcall	.+1774   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN RAM M2 HOLD");
		
		break;
     f66:	08 95       	ret
		
		case STATE_OPENING_M1_INITIAL_M2_HOLD_SWING:
		LCD_gotoXY(0,2);
     f68:	62 e0       	ldi	r22, 0x02	; 2
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	8e d3       	rcall	.+1820   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     f6e:	8d ee       	ldi	r24, 0xED	; 237
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	6e d3       	rcall	.+1756   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     f74:	63 e0       	ldi	r22, 0x03	; 3
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	88 d3       	rcall	.+1808   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN INI M2 HOLD");
     f7a:	81 ed       	ldi	r24, 0xD1	; 209
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	68 d3       	rcall	.+1744   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN INI M2 HOLD");
		
		break;
     f84:	08 95       	ret
		
		case STATE_OPENING_M1_COURSE_M2_RAM_SWING:
		LCD_gotoXY(0,2);
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	7f d3       	rcall	.+1790   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     f8c:	8d ee       	ldi	r24, 0xED	; 237
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	5f d3       	rcall	.+1726   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     f92:	63 e0       	ldi	r22, 0x03	; 3
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	79 d3       	rcall	.+1778   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN COU M2 RAM ");
     f98:	85 ee       	ldi	r24, 0xE5	; 229
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	59 d3       	rcall	.+1714   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN COU M2 RAM ");
		
		break;
     fa2:	08 95       	ret
		
		
		
		case STATE_OPENING_M1_COURSE_M2_INITIAL_SWING:
		LCD_gotoXY(0,2);
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	70 d3       	rcall	.+1760   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     faa:	8d ee       	ldi	r24, 0xED	; 237
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	50 d3       	rcall	.+1696   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     fb0:	63 e0       	ldi	r22, 0x03	; 3
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	6a d3       	rcall	.+1748   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN COU M2 INI ");
     fb6:	89 ef       	ldi	r24, 0xF9	; 249
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	4a d3       	rcall	.+1684   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN COU M2 INI ");
		
		break;
     fc0:	08 95       	ret
		
		
		
		case STATE_OPENING_M1_COURSE_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
     fc2:	62 e0       	ldi	r22, 0x02	; 2
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	61 d3       	rcall	.+1730   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     fc8:	8d ee       	ldi	r24, 0xED	; 237
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	41 d3       	rcall	.+1666   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     fce:	63 e0       	ldi	r22, 0x03	; 3
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	5b d3       	rcall	.+1718   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 OPEN COU M2 COU");
     fd4:	8d e0       	ldi	r24, 0x0D	; 13
     fd6:	94 e0       	ldi	r25, 0x04	; 4
     fd8:	3b d3       	rcall	.+1654   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 OPEN COU M2 COU");
		
		break;
     fde:	08 95       	ret
		
		
		case STATE_HOLD_OPENING_M1M2_SWING:
		LCD_gotoXY(0,2);
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	52 d3       	rcall	.+1700   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
     fe6:	8d ee       	ldi	r24, 0xED	; 237
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	32 d3       	rcall	.+1636   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
     fec:	63 e0       	ldi	r22, 0x03	; 3
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	4c d3       	rcall	.+1688   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1M2 OPEN HOLD    ");
     ff2:	80 e2       	ldi	r24, 0x20	; 32
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	2c d3       	rcall	.+1624   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1M2 OPEN HOLD    ");
		
		break;
     ffc:	08 95       	ret
		
		case STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING:
		LCD_gotoXY(0,2);
     ffe:	62 e0       	ldi	r22, 0x02	; 2
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	43 d3       	rcall	.+1670   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    1004:	8d ee       	ldi	r24, 0xED	; 237
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	23 d3       	rcall	.+1606   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    100a:	63 e0       	ldi	r22, 0x03	; 3
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	3d d3       	rcall	.+1658   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1M2 WAITING       ");
    1010:	83 e3       	ldi	r24, 0x33	; 51
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	1d d3       	rcall	.+1594   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1M2 WAITING       ");
		
		break;
    101a:	08 95       	ret
		
		case STATE_CLOSING_M1_HOLD_M2_RAM_SWING:
		LCD_gotoXY(0,2);
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	34 d3       	rcall	.+1640   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    1022:	8d ee       	ldi	r24, 0xED	; 237
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	14 d3       	rcall	.+1576   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    1028:	63 e0       	ldi	r22, 0x03	; 3
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	2e d3       	rcall	.+1628   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOS HOLD M2 RAM");
    102e:	87 e4       	ldi	r24, 0x47	; 71
    1030:	94 e0       	ldi	r25, 0x04	; 4
    1032:	0e d3       	rcall	.+1564   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOS HOLD M2 RAM");
		
		break;
    1038:	08 95       	ret
		
		case STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING:
		LCD_gotoXY(0,2);
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	25 d3       	rcall	.+1610   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    1040:	8d ee       	ldi	r24, 0xED	; 237
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	05 d3       	rcall	.+1546   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    1046:	63 e0       	ldi	r22, 0x03	; 3
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	1f d3       	rcall	.+1598   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOS HOLD M2 INI");
    104c:	8b e5       	ldi	r24, 0x5B	; 91
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	ff d2       	rcall	.+1534   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOS HOLD M2 INI");
		
		break;
    1056:	08 95       	ret
		
		case STATE_CLOSING_M1_RAM_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	16 d3       	rcall	.+1580   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    105e:	8d ee       	ldi	r24, 0xED	; 237
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	f6 d2       	rcall	.+1516   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    1064:	63 e0       	ldi	r22, 0x03	; 3
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	10 d3       	rcall	.+1568   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOS RAM M2 COU ");
    106a:	8f e6       	ldi	r24, 0x6F	; 111
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	f0 d2       	rcall	.+1504   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CLOSING_M1_RAM_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOS RAM M2 COU ");
		break;
    1074:	08 95       	ret
		
		
		case STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
    1076:	62 e0       	ldi	r22, 0x02	; 2
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	07 d3       	rcall	.+1550   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    107c:	8d ee       	ldi	r24, 0xED	; 237
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	e7 d2       	rcall	.+1486   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    1082:	63 e0       	ldi	r22, 0x03	; 3
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	01 d3       	rcall	.+1538   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOS INI M2 COU ");
    1088:	83 e8       	ldi	r24, 0x83	; 131
    108a:	94 e0       	ldi	r25, 0x04	; 4
    108c:	e1 d2       	rcall	.+1474   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOS INI M2 COU ");
		break;
    1092:	08 95       	ret
		
		
		case STATE_CLOSING_M1_COURSE_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	f8 d2       	rcall	.+1520   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    109a:	8d ee       	ldi	r24, 0xED	; 237
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	d8 d2       	rcall	.+1456   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    10a0:	63 e0       	ldi	r22, 0x03	; 3
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	f2 d2       	rcall	.+1508   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1 CLOS COU M2 COU ");
    10a6:	87 e9       	ldi	r24, 0x97	; 151
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	d2 d2       	rcall	.+1444   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CLOSING_M1_COURSE_M2_COURSE_SWING:
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1 CLOS COU M2 COU ");
		break;
    10b0:	08 95       	ret
		
		case STATE_CELL_CLOSING_M1M2_SWING:
		LCD_gotoXY(0,2);
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	e9 d2       	rcall	.+1490   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    10b8:	8d ee       	ldi	r24, 0xED	; 237
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	c9 d2       	rcall	.+1426   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    10be:	63 e0       	ldi	r22, 0x03	; 3
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	e3 d2       	rcall	.+1478   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1M2 CLOSE CELL    ");
    10c4:	8b ea       	ldi	r24, 0xAB	; 171
    10c6:	94 e0       	ldi	r25, 0x04	; 4
    10c8:	c3 d2       	rcall	.+1414   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CELL_CLOSING_M1M2_SWING:
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1M2 CLOSE CELL    ");
		break;
    10ce:	08 95       	ret
		
		
		case STATE_HOLD_CLOSING_M1M2_SWING:
		LCD_gotoXY(0,2);
    10d0:	62 e0       	ldi	r22, 0x02	; 2
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	da d2       	rcall	.+1460   	; 0x168a <LCD_gotoXY>
		LCD_sendString("STATUS");
    10d6:	8d ee       	ldi	r24, 0xED	; 237
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	ba d2       	rcall	.+1396   	; 0x1650 <LCD_sendString>
		LCD_gotoXY(0,3);
    10dc:	63 e0       	ldi	r22, 0x03	; 3
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	d4 d2       	rcall	.+1448   	; 0x168a <LCD_gotoXY>
		LCD_sendString("M1M2 CLOSE HOLD    ");
    10e2:	8f eb       	ldi	r24, 0xBF	; 191
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	b4 d2       	rcall	.+1384   	; 0x1650 <LCD_sendString>
		
		default:
		
		break;
	}
	return (1);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_HOLD_CLOSING_M1M2_SWING:
		LCD_gotoXY(0,2);
		LCD_sendString("STATUS");
		LCD_gotoXY(0,3);
		LCD_sendString("M1M2 CLOSE HOLD    ");
		break;
    10ec:	08 95       	ret
/* @ show lcd messages according state                                                                     */
/************************************************************************/
int showLcdMessages(uint8_t state){

	static uint8_t lastState;
	if(lastState == state) return (0);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	08 95       	ret
		
		default:
		
		break;
	}
	return (1);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
}
    10f8:	08 95       	ret

000010fa <showLcdSplash>:
/************************************************************************/
/* LCD STUFF                                                                     */
/************************************************************************/
void showLcdSplash(void){
	
	LCD_clr();
    10fa:	a7 d2       	rcall	.+1358   	; 0x164a <LCD_clr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10fc:	2f ef       	ldi	r18, 0xFF	; 255
    10fe:	83 ec       	ldi	r24, 0xC3	; 195
    1100:	99 e0       	ldi	r25, 0x09	; 9
    1102:	21 50       	subi	r18, 0x01	; 1
    1104:	80 40       	sbci	r24, 0x00	; 0
    1106:	90 40       	sbci	r25, 0x00	; 0
    1108:	e1 f7       	brne	.-8      	; 0x1102 <__stack+0x3>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <__stack+0xd>
    110c:	00 00       	nop
	_delay_ms(200);
	LCD_gotoXY(4,0);
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	bb d2       	rcall	.+1398   	; 0x168a <LCD_gotoXY>
	LCD_sendString("Gate Control");
    1114:	83 ed       	ldi	r24, 0xD3	; 211
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	9b d2       	rcall	.+1334   	; 0x1650 <LCD_sendString>
	
	LCD_gotoXY(8,1);
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	b5 d2       	rcall	.+1386   	; 0x168a <LCD_gotoXY>
	LCD_sendString("HSO");
    1120:	80 ee       	ldi	r24, 0xE0	; 224
    1122:	94 e0       	ldi	r25, 0x04	; 4
    1124:	95 d2       	rcall	.+1322   	; 0x1650 <LCD_sendString>
	
	
	LCD_gotoXY(4,3);
    1126:	63 e0       	ldi	r22, 0x03	; 3
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	af d2       	rcall	.+1374   	; 0x168a <LCD_gotoXY>
	LCD_sendString("Version: 1.0");
    112c:	84 ee       	ldi	r24, 0xE4	; 228
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	8f d2       	rcall	.+1310   	; 0x1650 <LCD_sendString>
    1132:	2f ef       	ldi	r18, 0xFF	; 255
    1134:	87 ea       	ldi	r24, 0xA7	; 167
    1136:	91 e6       	ldi	r25, 0x61	; 97
    1138:	21 50       	subi	r18, 0x01	; 1
    113a:	80 40       	sbci	r24, 0x00	; 0
    113c:	90 40       	sbci	r25, 0x00	; 0
    113e:	e1 f7       	brne	.-8      	; 0x1138 <__stack+0x39>
    1140:	00 c0       	rjmp	.+0      	; 0x1142 <__stack+0x43>
    1142:	00 00       	nop
	
	_delay_ms(2000); // to show the message
	
	LCD_clr();
    1144:	82 c2       	rjmp	.+1284   	; 0x164a <LCD_clr>
    1146:	08 95       	ret

00001148 <clearBuffer>:


/************************************************************************/
/* @Clear Buffer                                                        */
/************************************************************************/
void clearBuffer(void){
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0; i< USART_BUFFER_LENGHT; i++) usartBuffer[i]=0;
    114c:	fc 01       	movw	r30, r24
    114e:	ef 5e       	subi	r30, 0xEF	; 239
    1150:	fa 4f       	sbci	r31, 0xFA	; 250
    1152:	10 82       	st	Z, r1
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	82 33       	cpi	r24, 0x32	; 50
    1158:	91 05       	cpc	r25, r1
    115a:	c1 f7       	brne	.-16     	; 0x114c <clearBuffer+0x4>

}
    115c:	08 95       	ret

0000115e <__vector_1>:
/************************************************************************/

/************************************************************************/
/* handler External Interrupt Request 0                                                                     */
/************************************************************************/
ISR(INT0_vect){
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
	
}
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <__vector_2>:


/************************************************************************/
/* handler External Interrupt Request 1                                                                   */
/************************************************************************/
ISR(INT1_vect){
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
	
}
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_3>:


/************************************************************************/
/* handler External Interrupt Request 2                                                                    */
/************************************************************************/
ISR(INT2_vect){
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
	
}
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_4>:


/************************************************************************/
/* handler External Interrupt Request 3                                                                    */
/************************************************************************/
ISR(INT3_vect){
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
	
}
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	0f 90       	pop	r0
    11aa:	1f 90       	pop	r1
    11ac:	18 95       	reti

000011ae <__vector_5>:


/************************************************************************/
/* handler External Interrupt Request 4                                                                   */
/************************************************************************/
ISR(INT4_vect){
    11ae:	1f 92       	push	r1
    11b0:	0f 92       	push	r0
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
	
}
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <__vector_6>:

/************************************************************************/
/* handler External Interrupt Request 5                                                                    */
/************************************************************************/
ISR(INT5_vect){
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
	
}
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	0f 90       	pop	r0
    11d2:	1f 90       	pop	r1
    11d4:	18 95       	reti

000011d6 <__vector_7>:


/************************************************************************/
/* handler External Interrupt Request 6                                                                  */
/************************************************************************/
ISR(INT6_vect){
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
	
}
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_8>:


/************************************************************************/
/* handler External Interrupt Request 7                                                                   */
/************************************************************************/
ISR(INT7_vect){
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
	
}
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_9>:
/************************************************************************/

/************************************************************************/
/* handler Timer/Counter2 Compare Match                                                                  */
/************************************************************************/
ISR(TIMER2_COMP_vect){
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
	
}
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <__vector_10>:


/************************************************************************/
/* handler Timer/Counter2 Overflow                                                                 */
/************************************************************************/
ISR(TIMER2_OVF_vect){
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
	
	
	
}
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	0f 90       	pop	r0
    1222:	1f 90       	pop	r1
    1224:	18 95       	reti

00001226 <__vector_11>:


/************************************************************************/
/* handler Timer/Counter1 Capture Event                                                               */
/************************************************************************/
ISR(TIMER1_CAPT_vect){
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	0f 92       	push	r0
    122e:	11 24       	eor	r1, r1
	
}
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_12>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match A                                                              */
/************************************************************************/
ISR(TIMER1_COMPA_vect){
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
	
}
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_13>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match B                                                             */
/************************************************************************/
ISR(TIMER1_COMPB_vect){
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
	
}
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_14>:


/************************************************************************/
/* handler Timer/Counter1 Overflow                                                            */
/************************************************************************/
ISR(TIMER1_OVF_vect){
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
	
}
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_15>:
extern uint8_t flagTaskUsartMessage;

/************************************************************************/
/* handler Timer/Counter0 Compare Match                                                           */
/************************************************************************/
ISR(TIMER0_COMP_vect){
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
	
		static uint16_t tickCounter;
		// scheduling period
		// control enabled
		tickCounter++;
    1292:	20 91 04 05 	lds	r18, 0x0504
    1296:	30 91 05 05 	lds	r19, 0x0505
    129a:	2f 5f       	subi	r18, 0xFF	; 255
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	30 93 05 05 	sts	0x0505, r19
    12a2:	20 93 04 05 	sts	0x0504, r18
		
		if(tickCounter % taskReadButtonsPeriod == 0) flagTaskReadButtons++;
    12a6:	60 91 0a 01 	lds	r22, 0x010A
    12aa:	70 91 0b 01 	lds	r23, 0x010B
    12ae:	c9 01       	movw	r24, r18
    12b0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    12b4:	89 2b       	or	r24, r25
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <__vector_15+0x4c>
    12b8:	80 91 f9 04 	lds	r24, 0x04F9
    12bc:	8f 5f       	subi	r24, 0xFF	; 255
    12be:	80 93 f9 04 	sts	0x04F9, r24
		if(tickCounter % taskReadSensorsPeriod == 0) flagTaskReadSensors++;
    12c2:	60 91 08 01 	lds	r22, 0x0108
    12c6:	70 91 09 01 	lds	r23, 0x0109
    12ca:	c9 01       	movw	r24, r18
    12cc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    12d0:	89 2b       	or	r24, r25
    12d2:	29 f4       	brne	.+10     	; 0x12de <__vector_15+0x68>
    12d4:	80 91 f8 04 	lds	r24, 0x04F8
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 f8 04 	sts	0x04F8, r24
		if(tickCounter % taskStateUpdatePeriod == 0) flagTaskStateUpdate++;
    12de:	60 91 06 01 	lds	r22, 0x0106
    12e2:	70 91 07 01 	lds	r23, 0x0107
    12e6:	c9 01       	movw	r24, r18
    12e8:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    12ec:	89 2b       	or	r24, r25
    12ee:	29 f4       	brne	.+10     	; 0x12fa <__vector_15+0x84>
    12f0:	80 91 f7 04 	lds	r24, 0x04F7
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	80 93 f7 04 	sts	0x04F7, r24
		if(tickCounter % taskLcdPeriod ==0 )flagTaskLcd++;
    12fa:	60 91 04 01 	lds	r22, 0x0104
    12fe:	70 91 05 01 	lds	r23, 0x0105
    1302:	c9 01       	movw	r24, r18
    1304:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    1308:	89 2b       	or	r24, r25
    130a:	29 f4       	brne	.+10     	; 0x1316 <__vector_15+0xa0>
    130c:	80 91 f6 04 	lds	r24, 0x04F6
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	80 93 f6 04 	sts	0x04F6, r24
		if(tickCounter % taskBlinkLightsPeriod == 0) flagTaskBlinkLights++;
    1316:	60 91 00 01 	lds	r22, 0x0100
    131a:	70 91 01 01 	lds	r23, 0x0101
    131e:	c9 01       	movw	r24, r18
    1320:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    1324:	89 2b       	or	r24, r25
    1326:	29 f4       	brne	.+10     	; 0x1332 <__vector_15+0xbc>
    1328:	80 91 f4 04 	lds	r24, 0x04F4
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	80 93 f4 04 	sts	0x04F4, r24
		if(tickCounter % taskUpdateOutputPeriod == 0) flagTaskUpdateOutputs++;
    1332:	60 91 02 01 	lds	r22, 0x0102
    1336:	70 91 03 01 	lds	r23, 0x0103
    133a:	c9 01       	movw	r24, r18
    133c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    1340:	89 2b       	or	r24, r25
    1342:	29 f4       	brne	.+10     	; 0x134e <__vector_15+0xd8>
    1344:	80 91 f5 04 	lds	r24, 0x04F5
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	80 93 f5 04 	sts	0x04F5, r24
		
		
		// reload values // deve dar uns 5segundos
		if(tickCounter > schedulerMaxCount) tickCounter=0;
    134e:	80 91 0c 01 	lds	r24, 0x010C
    1352:	90 91 0d 01 	lds	r25, 0x010D
    1356:	82 17       	cp	r24, r18
    1358:	93 07       	cpc	r25, r19
    135a:	20 f4       	brcc	.+8      	; 0x1364 <__vector_15+0xee>
    135c:	10 92 05 05 	sts	0x0505, r1
    1360:	10 92 04 05 	sts	0x0504, r1
	
}
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_16>:


/************************************************************************/
/* handler Timer/Counter0 Overflow     CHECK                            */
/************************************************************************/
ISR(TIMER0_OVF_vect){
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
		
}
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_17>:
/************************************************************************/

/************************************************************************/
/* handler SPI Serial Transfer Complete                                                         */
/************************************************************************/
ISR(SPI_STC_vect){
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
	
}
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	0f 90       	pop	r0
    13a4:	1f 90       	pop	r1
    13a6:	18 95       	reti

000013a8 <__vector_18>:


/************************************************************************/
/* handler USART0, Rx Complete                                                        */
/************************************************************************/
ISR(USART0_RX_vect){
    13a8:	1f 92       	push	r1
    13aa:	0f 92       	push	r0
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	0b b6       	in	r0, 0x3b	; 59
    13b4:	0f 92       	push	r0
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
	char c;
	c =USART0_receiveChar();
    13ce:	2b d2       	rcall	.+1110   	; 0x1826 <USART0_receiveChar>
	// manda caracter para usart 0
	USART1_sendChar(c);
    13d0:	ea d1       	rcall	.+980    	; 0x17a6 <USART1_sendChar>
}
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0b be       	out	0x3b, r0	; 59
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_19>:


/************************************************************************/
/* handler USART0 Data Register Empty                                                       */
/************************************************************************/
ISR(USART0_UDRE_vect){
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1

}
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__vector_20>:


/************************************************************************/
/* handler USART0, Tx Complete                                                       */
/************************************************************************/
ISR(USART0_TX_vect){
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1

}
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_21>:
/************************************************************************/

/************************************************************************/
/* handler ADC Conversion Complete                                                    */
/************************************************************************/
ISR(ADC_vect){
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1

}
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <__vector_22>:
/************************************************************************/

/************************************************************************/
/* handler EEPROM Ready                                                   */
/************************************************************************/
ISR(EE_READY_vect){
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1

}
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_23>:
/************************************************************************/

/************************************************************************/
/* handler Analog Comparator                                                  */
/************************************************************************/
ISR(ANALOG_COMP_vect){
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1

}
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_24>:
/************************************************************************/

/************************************************************************/
/* handler  Timer/Counter1 Compare Match C                                               */
/************************************************************************/
ISR(TIMER1_COMPC_vect){
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1

}
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <__vector_25>:


/************************************************************************/
/* handler Timer/Counter3 Capture Event                                             */
/************************************************************************/
ISR(TIMER3_CAPT_vect){
    1470:	1f 92       	push	r1
    1472:	0f 92       	push	r0
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	0f 92       	push	r0
    1478:	11 24       	eor	r1, r1

}
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__vector_26>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match A                                             */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	0f 92       	push	r0
    148c:	11 24       	eor	r1, r1

}
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_27>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match B                                             */
/************************************************************************/
ISR(TIMER3_COMPB_vect){
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1

}
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_28>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match C                                           */
/************************************************************************/
ISR(TIMER3_COMPC_vect){
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1

}
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <__vector_29>:


/************************************************************************/
/* handler Timer/Counter3 Overflow                                           */
/************************************************************************/
ISR(TIMER3_OVF_vect){
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1

}
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <__vector_30>:
/************************************************************************/

/************************************************************************/
/* handler USART1, Rx Complete                                                                    */
/************************************************************************/
ISR(USART1_RX_vect){
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	0b b6       	in	r0, 0x3b	; 59
    14e0:	0f 92       	push	r0
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	cf 93       	push	r28
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
	char c;

	
	c =USART1_receiveChar();
    14fc:	88 d1       	rcall	.+784    	; 0x180e <USART1_receiveChar>
    14fe:	c8 2f       	mov	r28, r24
	USART0_sendChar(c); // reply with received char
    1500:	8e d1       	rcall	.+796    	; 0x181e <USART0_sendChar>
	if(c== MSG_END_CARACTER){
    1502:	cc 37       	cpi	r28, 0x7C	; 124
    1504:	31 f4       	brne	.+12     	; 0x1512 <__vector_30+0x3e>
		nReceivedBytes=0;
    1506:	10 92 43 05 	sts	0x0543, r1
		flagNewMessage=1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 10 05 	sts	0x0510, r24
		return;
    1510:	12 c0       	rjmp	.+36     	; 0x1536 <__vector_30+0x62>
	}
	// save caracter to buffer
	usartBuffer[nReceivedBytes]=c;
    1512:	e0 91 43 05 	lds	r30, 0x0543
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	ef 5e       	subi	r30, 0xEF	; 239
    151a:	fa 4f       	sbci	r31, 0xFA	; 250
    151c:	c0 83       	st	Z, r28
	nReceivedBytes++;
    151e:	80 91 43 05 	lds	r24, 0x0543
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 43 05 	sts	0x0543, r24

	// test if buffer underrun	
	if(nReceivedBytes> USART_BUFFER_LENGHT+1){
    1528:	80 91 43 05 	lds	r24, 0x0543
    152c:	84 33       	cpi	r24, 0x34	; 52
    152e:	18 f0       	brcs	.+6      	; 0x1536 <__vector_30+0x62>
		nReceivedBytes=0;
    1530:	10 92 43 05 	sts	0x0543, r1
		clearBuffer();
    1534:	09 de       	rcall	.-1006   	; 0x1148 <clearBuffer>
	}
}
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	cf 91       	pop	r28
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	7f 91       	pop	r23
    1546:	6f 91       	pop	r22
    1548:	5f 91       	pop	r21
    154a:	4f 91       	pop	r20
    154c:	3f 91       	pop	r19
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	0b be       	out	0x3b, r0	; 59
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti

0000155e <__vector_31>:


/************************************************************************/
/* handler USART1 Data Register Empty                                          */
/************************************************************************/
ISR(USART1_UDRE_vect){
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1

}
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	0f 90       	pop	r0
    156e:	1f 90       	pop	r1
    1570:	18 95       	reti

00001572 <__vector_32>:


/************************************************************************/
/* handler USART1, Tx Complete                                         */
/************************************************************************/
ISR(USART1_TX_vect){
    1572:	1f 92       	push	r1
    1574:	0f 92       	push	r0
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	0f 92       	push	r0
    157a:	11 24       	eor	r1, r1

}
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_33>:


/************************************************************************/
/* handler Two-wire Serial Interface                                       */
/************************************************************************/
ISR(TWI_vect){
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1

}
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <__vector_34>:


/************************************************************************/
/* handler Store Program Memory Ready                                       */
/************************************************************************/
ISR(SPM_READY_vect){
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1

}
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <LCD_sendChar>:
	LCD_gotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCD_sendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    15ae:	98 2f       	mov	r25, r24
    15b0:	90 7f       	andi	r25, 0xF0	; 240
    15b2:	95 bb       	out	0x15, r25	; 21
    15b4:	a8 9a       	sbi	0x15, 0	; 21
    15b6:	aa 9a       	sbi	0x15, 2	; 21
    15b8:	ef e8       	ldi	r30, 0x8F	; 143
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	31 97       	sbiw	r30, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <LCD_sendChar+0xe>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <LCD_sendChar+0x14>
    15c2:	00 00       	nop
    15c4:	aa 98       	cbi	0x15, 2	; 21
    15c6:	a8 98       	cbi	0x15, 0	; 21
    15c8:	ef e8       	ldi	r30, 0x8F	; 143
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_sendChar+0x1e>
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <LCD_sendChar+0x24>
    15d2:	00 00       	nop
    15d4:	f0 e1       	ldi	r31, 0x10	; 16
    15d6:	8f 9f       	mul	r24, r31
    15d8:	c0 01       	movw	r24, r0
    15da:	11 24       	eor	r1, r1
    15dc:	85 bb       	out	0x15, r24	; 21
    15de:	a8 9a       	sbi	0x15, 0	; 21
    15e0:	aa 9a       	sbi	0x15, 2	; 21
    15e2:	8f e8       	ldi	r24, 0x8F	; 143
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <LCD_sendChar+0x38>
    15ea:	00 c0       	rjmp	.+0      	; 0x15ec <LCD_sendChar+0x3e>
    15ec:	00 00       	nop
    15ee:	aa 98       	cbi	0x15, 2	; 21
    15f0:	a8 98       	cbi	0x15, 0	; 21
    15f2:	ef e8       	ldi	r30, 0x8F	; 143
    15f4:	f1 e0       	ldi	r31, 0x01	; 1
    15f6:	31 97       	sbiw	r30, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <LCD_sendChar+0x48>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <LCD_sendChar+0x4e>
    15fc:	00 00       	nop
    15fe:	08 95       	ret

00001600 <LCD_sendCommand>:
    1600:	98 2f       	mov	r25, r24
    1602:	90 7f       	andi	r25, 0xF0	; 240
    1604:	95 bb       	out	0x15, r25	; 21
    1606:	aa 9a       	sbi	0x15, 2	; 21
    1608:	ef e8       	ldi	r30, 0x8F	; 143
    160a:	f1 e0       	ldi	r31, 0x01	; 1
    160c:	31 97       	sbiw	r30, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_sendCommand+0xc>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <LCD_sendCommand+0x12>
    1612:	00 00       	nop
    1614:	aa 98       	cbi	0x15, 2	; 21
    1616:	ef e8       	ldi	r30, 0x8F	; 143
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <LCD_sendCommand+0x1a>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <LCD_sendCommand+0x20>
    1620:	00 00       	nop
    1622:	f0 e1       	ldi	r31, 0x10	; 16
    1624:	8f 9f       	mul	r24, r31
    1626:	c0 01       	movw	r24, r0
    1628:	11 24       	eor	r1, r1
    162a:	85 bb       	out	0x15, r24	; 21
    162c:	aa 9a       	sbi	0x15, 2	; 21
    162e:	8f e8       	ldi	r24, 0x8F	; 143
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <LCD_sendCommand+0x32>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <LCD_sendCommand+0x38>
    1638:	00 00       	nop
    163a:	aa 98       	cbi	0x15, 2	; 21
    163c:	ef e8       	ldi	r30, 0x8F	; 143
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	31 97       	sbiw	r30, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_sendCommand+0x40>
    1644:	00 c0       	rjmp	.+0      	; 0x1646 <LCD_sendCommand+0x46>
    1646:	00 00       	nop
    1648:	08 95       	ret

0000164a <LCD_clr>:
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	d9 cf       	rjmp	.-78     	; 0x1600 <LCD_sendCommand>
    164e:	08 95       	ret

00001650 <LCD_sendString>:
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	fc 01       	movw	r30, r24
    165a:	01 90       	ld	r0, Z+
    165c:	00 20       	and	r0, r0
    165e:	e9 f7       	brne	.-6      	; 0x165a <LCD_sendString+0xa>
    1660:	31 97       	sbiw	r30, 0x01	; 1
    1662:	1e 2f       	mov	r17, r30
    1664:	18 1b       	sub	r17, r24
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	59 f0       	breq	.+22     	; 0x1680 <LCD_sendString+0x30>
    166a:	11 23       	and	r17, r17
    166c:	49 f0       	breq	.+18     	; 0x1680 <LCD_sendString+0x30>
    166e:	08 2f       	mov	r16, r24
    1670:	c0 2f       	mov	r28, r16
    1672:	d9 2f       	mov	r29, r25
    1674:	89 91       	ld	r24, Y+
    1676:	9b df       	rcall	.-202    	; 0x15ae <LCD_sendChar>
    1678:	8c 2f       	mov	r24, r28
    167a:	80 1b       	sub	r24, r16
    167c:	81 17       	cp	r24, r17
    167e:	d0 f3       	brcs	.-12     	; 0x1674 <LCD_sendString+0x24>
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	08 95       	ret

0000168a <LCD_gotoXY>:
    168a:	62 30       	cpi	r22, 0x02	; 2
    168c:	31 f0       	breq	.+12     	; 0x169a <LCD_gotoXY+0x10>
    168e:	63 30       	cpi	r22, 0x03	; 3
    1690:	31 f0       	breq	.+12     	; 0x169e <LCD_gotoXY+0x14>
    1692:	61 30       	cpi	r22, 0x01	; 1
    1694:	29 f4       	brne	.+10     	; 0x16a0 <LCD_gotoXY+0x16>
    1696:	80 5c       	subi	r24, 0xC0	; 192
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <LCD_gotoXY+0x16>
    169a:	8c 5e       	subi	r24, 0xEC	; 236
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <LCD_gotoXY+0x16>
    169e:	8c 5a       	subi	r24, 0xAC	; 172
    16a0:	80 68       	ori	r24, 0x80	; 128
    16a2:	ae cf       	rjmp	.-164    	; 0x1600 <LCD_sendCommand>
    16a4:	08 95       	ret

000016a6 <LCD_defineChar>:


/************************************************************************/
/* @define char                                                                     */
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    16b4:	66 0f       	add	r22, r22
    16b6:	66 0f       	add	r22, r22
    16b8:	66 0f       	add	r22, r22
    16ba:	60 64       	ori	r22, 0x40	; 64
    16bc:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
    16be:	c0 e0       	ldi	r28, 0x00	; 0
    16c0:	d0 e0       	ldi	r29, 0x00	; 0
    16c2:	f8 01       	movw	r30, r16
    16c4:	ec 0f       	add	r30, r28
    16c6:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
    16c8:	f4 90       	lpm	r15, Z
		LCD_sendCommand(a++);
    16ca:	8c 2f       	mov	r24, r28
    16cc:	8e 0d       	add	r24, r14
    16ce:	98 df       	rcall	.-208    	; 0x1600 <LCD_sendCommand>
		LCD_sendChar(pcc);
    16d0:	8f 2d       	mov	r24, r15
    16d2:	6d df       	rcall	.-294    	; 0x15ae <LCD_sendChar>
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    16d4:	21 96       	adiw	r28, 0x01	; 1
    16d6:	c8 30       	cpi	r28, 0x08	; 8
    16d8:	d1 05       	cpc	r29, r1
    16da:	99 f7       	brne	.-26     	; 0x16c2 <LCD_defineChar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCD_sendCommand(a++);
		LCD_sendChar(pcc);
		}
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	08 95       	ret

000016ea <LCD_init>:


/************************************************************************/
/* @init lcd                                                                     */
/************************************************************************/
void LCD_init(void){
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	8f e6       	ldi	r24, 0x6F	; 111
    16f2:	97 e1       	ldi	r25, 0x17	; 23
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_init+0xa>
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <LCD_init+0x10>
    16fa:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    16fc:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
    16fe:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1700:	84 b3       	in	r24, 0x14	; 20
    1702:	80 6f       	ori	r24, 0xF0	; 240
    1704:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1706:	84 b3       	in	r24, 0x14	; 20
    1708:	87 60       	ori	r24, 0x07	; 7
    170a:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    170c:	80 e3       	ldi	r24, 0x30	; 48
    170e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1710:	aa 9a       	sbi	0x15, 2	; 21
    1712:	8f e8       	ldi	r24, 0x8F	; 143
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_init+0x2c>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <LCD_init+0x32>
    171c:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    171e:	aa 98       	cbi	0x15, 2	; 21
    1720:	8f e8       	ldi	r24, 0x8F	; 143
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_init+0x3a>
    1728:	00 c0       	rjmp	.+0      	; 0x172a <LCD_init+0x40>
    172a:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1730:	aa 9a       	sbi	0x15, 2	; 21
    1732:	8f e8       	ldi	r24, 0x8F	; 143
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_init+0x4c>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <LCD_init+0x52>
    173c:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    173e:	aa 98       	cbi	0x15, 2	; 21
    1740:	8f e8       	ldi	r24, 0x8F	; 143
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_init+0x5a>
    1748:	00 c0       	rjmp	.+0      	; 0x174a <LCD_init+0x60>
    174a:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1750:	aa 9a       	sbi	0x15, 2	; 21
    1752:	8f e8       	ldi	r24, 0x8F	; 143
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_init+0x6c>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <LCD_init+0x72>
    175c:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    175e:	aa 98       	cbi	0x15, 2	; 21
    1760:	8f e8       	ldi	r24, 0x8F	; 143
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_init+0x7a>
    1768:	00 c0       	rjmp	.+0      	; 0x176a <LCD_init+0x80>
    176a:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCD_sendCommand(0b00101000);
    176c:	88 e2       	ldi	r24, 0x28	; 40
    176e:	48 df       	rcall	.-368    	; 0x1600 <LCD_sendCommand>
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	46 df       	rcall	.-372    	; 0x1600 <LCD_sendCommand>
    1774:	ca e8       	ldi	r28, 0x8A	; 138
    1776:	d6 e0       	ldi	r29, 0x06	; 6
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1778:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
    177a:	11 e0       	ldi	r17, 0x01	; 1
    177c:	16 0f       	add	r17, r22
    177e:	ce 01       	movw	r24, r28
    1780:	92 df       	rcall	.-220    	; 0x16a6 <LCD_defineChar>
    1782:	28 96       	adiw	r28, 0x08	; 8
	LCD_sendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1784:	18 30       	cpi	r17, 0x08	; 8
    1786:	11 f0       	breq	.+4      	; 0x178c <LCD_init+0xa2>
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
    1788:	61 2f       	mov	r22, r17
    178a:	f7 cf       	rjmp	.-18     	; 0x177a <LCD_init+0x90>
		LCD_defineChar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	08 95       	ret

00001794 <USART1_config>:
		{
			USART0_sendChar(*(data+i));	//CALL FUNCTION AND SEND CHAR IN THAT POSITION
		}
	}

}
    1794:	90 93 98 00 	sts	0x0098, r25
    1798:	80 93 99 00 	sts	0x0099, r24
    179c:	40 93 9a 00 	sts	0x009A, r20
    17a0:	60 93 9d 00 	sts	0x009D, r22
    17a4:	08 95       	ret

000017a6 <USART1_sendChar>:
    17a6:	eb e9       	ldi	r30, 0x9B	; 155
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	90 81       	ld	r25, Z
    17ac:	95 ff       	sbrs	r25, 5
    17ae:	fd cf       	rjmp	.-6      	; 0x17aa <USART1_sendChar+0x4>
    17b0:	80 93 9c 00 	sts	0x009C, r24
    17b4:	08 95       	ret

000017b6 <USART1_sendStr>:
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	fc 01       	movw	r30, r24
    17c4:	dc 01       	movw	r26, r24
    17c6:	0d 90       	ld	r0, X+
    17c8:	00 20       	and	r0, r0
    17ca:	e9 f7       	brne	.-6      	; 0x17c6 <USART1_sendStr+0x10>
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	7d 01       	movw	r14, r26
    17d0:	e8 1a       	sub	r14, r24
    17d2:	f9 0a       	sbc	r15, r25
    17d4:	1e 14       	cp	r1, r14
    17d6:	1f 04       	cpc	r1, r15
    17d8:	9c f4       	brge	.+38     	; 0x1800 <USART1_sendStr+0x4a>
    17da:	80 81       	ld	r24, Z
    17dc:	88 23       	and	r24, r24
    17de:	81 f0       	breq	.+32     	; 0x1800 <USART1_sendStr+0x4a>
    17e0:	8f 01       	movw	r16, r30
    17e2:	0f 5f       	subi	r16, 0xFF	; 255
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	c0 e0       	ldi	r28, 0x00	; 0
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <USART1_sendStr+0x40>
    17ec:	f8 01       	movw	r30, r16
    17ee:	81 91       	ld	r24, Z+
    17f0:	8f 01       	movw	r16, r30
    17f2:	88 23       	and	r24, r24
    17f4:	29 f0       	breq	.+10     	; 0x1800 <USART1_sendStr+0x4a>
    17f6:	d7 df       	rcall	.-82     	; 0x17a6 <USART1_sendChar>
    17f8:	21 96       	adiw	r28, 0x01	; 1
    17fa:	ec 16       	cp	r14, r28
    17fc:	fd 06       	cpc	r15, r29
    17fe:	b1 f7       	brne	.-20     	; 0x17ec <USART1_sendStr+0x36>
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	08 95       	ret

0000180e <USART1_receiveChar>:
    180e:	eb e9       	ldi	r30, 0x9B	; 155
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	ec f7       	brge	.-6      	; 0x1812 <USART1_receiveChar+0x4>
    1818:	80 91 9c 00 	lds	r24, 0x009C
    181c:	08 95       	ret

0000181e <USART0_sendChar>:
    181e:	5d 9b       	sbis	0x0b, 5	; 11
    1820:	fe cf       	rjmp	.-4      	; 0x181e <USART0_sendChar>
    1822:	8c b9       	out	0x0c, r24	; 12
    1824:	08 95       	ret

00001826 <USART0_receiveChar>:
/************************************************************************/
/* USART RECEIVE CHAR                                                   */
/************************************************************************/
char USART0_receiveChar(void){
	//wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );	// do nothing
    1826:	5f 9b       	sbis	0x0b, 7	; 11
    1828:	fe cf       	rjmp	.-4      	; 0x1826 <USART0_receiveChar>
	
	return UDR0;
    182a:	8c b1       	in	r24, 0x0c	; 12
}
    182c:	08 95       	ret

0000182e <paramLoadDefaultParameters>:
/* load default parameters                                                                     */
/************************************************************************/
void paramLoadDefaultParameters(void){
	
	// STATES DEFAULT
	preFlashingActive = PRE_FLASH_STATE_DEFAULT;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 26 01 	sts	0x0126, r24
	ramBlowActive = RAM_STATUS_DEFAULT;
    1834:	10 92 25 01 	sts	0x0125, r1
	autoCloseActive = AUTO_CLOSE_STATUS_DEFAULT;
    1838:	10 92 22 01 	sts	0x0122, r1
	stepActive = STEP_MODE_STATUS_DEFAULT;
    183c:	80 93 24 01 	sts	0x0124, r24
	cellActive = CELL_STATUS_DEFAULT;
    1840:	10 92 23 01 	sts	0x0123, r1
	
	// TIMES
	preFlashingTime = PRE_FLASH_TIME_DEFAULT;
    1844:	84 e0       	ldi	r24, 0x04	; 4
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	90 93 21 01 	sts	0x0121, r25
    184c:	80 93 20 01 	sts	0x0120, r24
	ramBlowTime = RAM_TIME_DEFAULT;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	90 93 1f 01 	sts	0x011F, r25
    1858:	80 93 1e 01 	sts	0x011E, r24
	unlockHoldTime = UNLOCK_TIME_DEFAULT;
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	90 93 17 01 	sts	0x0117, r25
    1864:	80 93 16 01 	sts	0x0116, r24
	workingTime = WORKING_TIME_DEFAULT;
    1868:	2e e1       	ldi	r18, 0x1E	; 30
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	30 93 1b 01 	sts	0x011B, r19
    1870:	20 93 1a 01 	sts	0x011A, r18
	waitingTime = WAITING_TIME_DEFAULT;
    1874:	22 e3       	ldi	r18, 0x32	; 50
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	30 93 19 01 	sts	0x0119, r19
    187c:	20 93 18 01 	sts	0x0118, r18
	holdingTime = HOLD_TIME_DEFAULT;
    1880:	90 93 15 01 	sts	0x0115, r25
    1884:	80 93 14 01 	sts	0x0114, r24
	delayGatesTime = DELAY_GATES_TIME_DEFAULT;
    1888:	8a e0       	ldi	r24, 0x0A	; 10
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	90 93 1d 01 	sts	0x011D, r25
    1890:	80 93 1c 01 	sts	0x011C, r24
	
	powerInitial = POWER_INITIAL_DEFAULT;
    1894:	88 ee       	ldi	r24, 0xE8	; 232
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	90 93 13 01 	sts	0x0113, r25
    189c:	80 93 12 01 	sts	0x0112, r24
	powerCourse = POWER_COURSE_DEFAULT;
    18a0:	84 ef       	ldi	r24, 0xF4	; 244
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	90 93 11 01 	sts	0x0111, r25
    18a8:	80 93 10 01 	sts	0x0110, r24
    18ac:	08 95       	ret

000018ae <eepromSetDefaultParameters>:

/************************************************************************/
/* @ set initial values to eeprom  if nothin there yet                                                                   */
/************************************************************************/
void eepromSetDefaultParameters(){
	eestruct_var.initEeprom=1; // emprom init
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 44 05 	sts	0x0544, r24
	
	// STATUS
	eestruct_var.preFlashingActive = PRE_FLASH_STATE_DEFAULT;
    18b4:	80 93 45 05 	sts	0x0545, r24
	eestruct_var.ramBlowActive = RAM_STATUS_DEFAULT;
    18b8:	10 92 46 05 	sts	0x0546, r1
	eestruct_var.autoCloseActive = AUTO_CLOSE_STATUS_DEFAULT;
    18bc:	10 92 47 05 	sts	0x0547, r1
	eestruct_var.stepActive = STEP_MODE_STATUS_DEFAULT;
    18c0:	80 93 48 05 	sts	0x0548, r24
	eestruct_var.autoCloseActive = AUTO_CLOSE_STATUS_DEFAULT;
	
	// TIME
	eestruct_var.preFlashingTime = PRE_FLASH_TIME_DEFAULT;
    18c4:	84 e0       	ldi	r24, 0x04	; 4
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	90 93 4b 05 	sts	0x054B, r25
    18cc:	80 93 4a 05 	sts	0x054A, r24
	eestruct_var.unlockHoldTime = UNLOCK_TIME_DEFAULT;
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	90 93 4f 05 	sts	0x054F, r25
    18d8:	80 93 4e 05 	sts	0x054E, r24
	eestruct_var.ramBlowTime = RAM_TIME_DEFAULT;
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	30 93 4d 05 	sts	0x054D, r19
    18e4:	20 93 4c 05 	sts	0x054C, r18
	eestruct_var.workingTime = WORKING_TIME_DEFAULT;
    18e8:	2e e1       	ldi	r18, 0x1E	; 30
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	30 93 51 05 	sts	0x0551, r19
    18f0:	20 93 50 05 	sts	0x0550, r18
	eestruct_var.waitingTime = WAITING_TIME_DEFAULT;
    18f4:	22 e3       	ldi	r18, 0x32	; 50
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	30 93 53 05 	sts	0x0553, r19
    18fc:	20 93 52 05 	sts	0x0552, r18
	eestruct_var.holdingTime = HOLD_TIME_DEFAULT;
    1900:	90 93 55 05 	sts	0x0555, r25
    1904:	80 93 54 05 	sts	0x0554, r24
	eestruct_var.delayGatesTime = DELAY_GATES_TIME_DEFAULT;
    1908:	8a e0       	ldi	r24, 0x0A	; 10
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	90 93 57 05 	sts	0x0557, r25
    1910:	80 93 56 05 	sts	0x0556, r24
	
	eestruct_var.powerInitial = POWER_INITIAL_DEFAULT;
    1914:	88 ee       	ldi	r24, 0xE8	; 232
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	90 93 5b 05 	sts	0x055B, r25
    191c:	80 93 5a 05 	sts	0x055A, r24
	eestruct_var.powerCourse = POWER_COURSE_DEFAULT;
    1920:	84 ef       	ldi	r24, 0xF4	; 244
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	90 93 59 05 	sts	0x0559, r25
    1928:	80 93 58 05 	sts	0x0558, r24
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
    192c:	48 e1       	ldi	r20, 0x18	; 24
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	84 e4       	ldi	r24, 0x44	; 68
    1936:	95 e0       	ldi	r25, 0x05	; 5
    1938:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__eewr_block_m128>
    193c:	08 95       	ret

0000193e <paramLoadFromEeprom>:
/* @restore to EEPROM                                                                     */
/************************************************************************/
void paramLoadFromEeprom(){
	//uint8_t temp=0;
	// read from emprom
	eeprom_read_block((void*)&eestruct_var, (const void*)&eestruct_eemem,sizeof(eestruct_t));
    193e:	48 e1       	ldi	r20, 0x18	; 24
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	84 e4       	ldi	r24, 0x44	; 68
    1948:	95 e0       	ldi	r25, 0x05	; 5
    194a:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__eerd_block_m128>
	
	// test the fits field to check if it was written else use default and load
	if((eestruct_var.initEeprom &0xFF) ==0xFF){
    194e:	80 91 44 05 	lds	r24, 0x0544
    1952:	8f 3f       	cpi	r24, 0xFF	; 255
    1954:	19 f4       	brne	.+6      	; 0x195c <paramLoadFromEeprom+0x1e>
		eepromSetDefaultParameters();
    1956:	ab df       	rcall	.-170    	; 0x18ae <eepromSetDefaultParameters>
		paramLoadDefaultParameters();
    1958:	6a cf       	rjmp	.-300    	; 0x182e <paramLoadDefaultParameters>
    195a:	08 95       	ret
		
	}
	else{
		// write to the global variables
		preFlashingActive = eestruct_var.preFlashingActive;
    195c:	80 91 45 05 	lds	r24, 0x0545
    1960:	80 93 26 01 	sts	0x0126, r24
		ramBlowActive = eestruct_var.ramBlowActive;
    1964:	80 91 46 05 	lds	r24, 0x0546
    1968:	80 93 25 01 	sts	0x0125, r24
		autoCloseActive = eestruct_var.autoCloseActive;
    196c:	80 91 47 05 	lds	r24, 0x0547
    1970:	80 93 22 01 	sts	0x0122, r24
		stepActive = eestruct_var.stepActive;
    1974:	80 91 48 05 	lds	r24, 0x0548
    1978:	80 93 24 01 	sts	0x0124, r24
		cellActive = eestruct_var.cellActive;
    197c:	80 91 49 05 	lds	r24, 0x0549
    1980:	80 93 23 01 	sts	0x0123, r24
		
		// TIME
		preFlashingTime = eestruct_var.preFlashingTime;
    1984:	80 91 4a 05 	lds	r24, 0x054A
    1988:	90 91 4b 05 	lds	r25, 0x054B
    198c:	90 93 21 01 	sts	0x0121, r25
    1990:	80 93 20 01 	sts	0x0120, r24
		unlockHoldTime = eestruct_var.unlockHoldTime;
    1994:	80 91 4e 05 	lds	r24, 0x054E
    1998:	90 91 4f 05 	lds	r25, 0x054F
    199c:	90 93 17 01 	sts	0x0117, r25
    19a0:	80 93 16 01 	sts	0x0116, r24
		ramBlowTime = eestruct_var.ramBlowTime;
    19a4:	80 91 4c 05 	lds	r24, 0x054C
    19a8:	90 91 4d 05 	lds	r25, 0x054D
    19ac:	90 93 1f 01 	sts	0x011F, r25
    19b0:	80 93 1e 01 	sts	0x011E, r24
		workingTime = eestruct_var.workingTime;
    19b4:	80 91 50 05 	lds	r24, 0x0550
    19b8:	90 91 51 05 	lds	r25, 0x0551
    19bc:	90 93 1b 01 	sts	0x011B, r25
    19c0:	80 93 1a 01 	sts	0x011A, r24
		waitingTime = eestruct_var.waitingTime;
    19c4:	80 91 52 05 	lds	r24, 0x0552
    19c8:	90 91 53 05 	lds	r25, 0x0553
    19cc:	90 93 19 01 	sts	0x0119, r25
    19d0:	80 93 18 01 	sts	0x0118, r24
		holdingTime = eestruct_var.holdingTime;
    19d4:	80 91 54 05 	lds	r24, 0x0554
    19d8:	90 91 55 05 	lds	r25, 0x0555
    19dc:	90 93 15 01 	sts	0x0115, r25
    19e0:	80 93 14 01 	sts	0x0114, r24
		delayGatesTime = eestruct_var.delayGatesTime;
    19e4:	80 91 56 05 	lds	r24, 0x0556
    19e8:	90 91 57 05 	lds	r25, 0x0557
    19ec:	90 93 1d 01 	sts	0x011D, r25
    19f0:	80 93 1c 01 	sts	0x011C, r24
		
		powerInitial = eestruct_var.powerInitial;
    19f4:	80 91 5a 05 	lds	r24, 0x055A
    19f8:	90 91 5b 05 	lds	r25, 0x055B
    19fc:	90 93 13 01 	sts	0x0113, r25
    1a00:	80 93 12 01 	sts	0x0112, r24
		powerCourse = eestruct_var.powerCourse;
    1a04:	80 91 58 05 	lds	r24, 0x0558
    1a08:	90 91 59 05 	lds	r25, 0x0559
    1a0c:	90 93 11 01 	sts	0x0111, r25
    1a10:	80 93 10 01 	sts	0x0110, r24
    1a14:	08 95       	ret

00001a16 <paramSavetoEeprom>:
/************************************************************************/
void paramSavetoEeprom(){
	
	
	// save paramenetrs on the run
	eestruct_var.initEeprom=1; // emprom init
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	80 93 44 05 	sts	0x0544, r24
	eestruct_var.preFlashingActive = preFlashingActive;
    1a1c:	80 91 26 01 	lds	r24, 0x0126
    1a20:	80 93 45 05 	sts	0x0545, r24
	eestruct_var.ramBlowActive = ramBlowActive;
    1a24:	80 91 25 01 	lds	r24, 0x0125
    1a28:	80 93 46 05 	sts	0x0546, r24
	eestruct_var.autoCloseActive = autoCloseActive;
    1a2c:	80 91 22 01 	lds	r24, 0x0122
    1a30:	80 93 47 05 	sts	0x0547, r24
	eestruct_var.stepActive = stepActive;
    1a34:	80 91 24 01 	lds	r24, 0x0124
    1a38:	80 93 48 05 	sts	0x0548, r24
	eestruct_var.cellActive = cellActive;
    1a3c:	80 91 23 01 	lds	r24, 0x0123
    1a40:	80 93 49 05 	sts	0x0549, r24
	
	// time
	eestruct_var.preFlashingTime = preFlashingTime;
    1a44:	80 91 20 01 	lds	r24, 0x0120
    1a48:	90 91 21 01 	lds	r25, 0x0121
    1a4c:	90 93 4b 05 	sts	0x054B, r25
    1a50:	80 93 4a 05 	sts	0x054A, r24
	eestruct_var.unlockHoldTime = unlockHoldTime;
    1a54:	80 91 16 01 	lds	r24, 0x0116
    1a58:	90 91 17 01 	lds	r25, 0x0117
    1a5c:	90 93 4f 05 	sts	0x054F, r25
    1a60:	80 93 4e 05 	sts	0x054E, r24
	eestruct_var.ramBlowTime=ramBlowTime;
    1a64:	80 91 1e 01 	lds	r24, 0x011E
    1a68:	90 91 1f 01 	lds	r25, 0x011F
    1a6c:	90 93 4d 05 	sts	0x054D, r25
    1a70:	80 93 4c 05 	sts	0x054C, r24
	eestruct_var.workingTime = workingTime;
    1a74:	80 91 1a 01 	lds	r24, 0x011A
    1a78:	90 91 1b 01 	lds	r25, 0x011B
    1a7c:	90 93 51 05 	sts	0x0551, r25
    1a80:	80 93 50 05 	sts	0x0550, r24
	eestruct_var.waitingTime = waitingTime;
    1a84:	80 91 18 01 	lds	r24, 0x0118
    1a88:	90 91 19 01 	lds	r25, 0x0119
    1a8c:	90 93 53 05 	sts	0x0553, r25
    1a90:	80 93 52 05 	sts	0x0552, r24
	eestruct_var.holdingTime = holdingTime;
    1a94:	80 91 14 01 	lds	r24, 0x0114
    1a98:	90 91 15 01 	lds	r25, 0x0115
    1a9c:	90 93 55 05 	sts	0x0555, r25
    1aa0:	80 93 54 05 	sts	0x0554, r24
	eestruct_var.delayGatesTime = delayGatesTime;
    1aa4:	80 91 1c 01 	lds	r24, 0x011C
    1aa8:	90 91 1d 01 	lds	r25, 0x011D
    1aac:	90 93 57 05 	sts	0x0557, r25
    1ab0:	80 93 56 05 	sts	0x0556, r24
	
	eestruct_var.powerInitial = powerInitial;
    1ab4:	80 91 12 01 	lds	r24, 0x0112
    1ab8:	90 91 13 01 	lds	r25, 0x0113
    1abc:	90 93 5b 05 	sts	0x055B, r25
    1ac0:	80 93 5a 05 	sts	0x055A, r24
	eestruct_var.powerCourse = powerCourse;
    1ac4:	80 91 10 01 	lds	r24, 0x0110
    1ac8:	90 91 11 01 	lds	r25, 0x0111
    1acc:	90 93 59 05 	sts	0x0559, r25
    1ad0:	80 93 58 05 	sts	0x0558, r24
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
    1ad4:	48 e1       	ldi	r20, 0x18	; 24
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	84 e4       	ldi	r24, 0x44	; 68
    1ade:	95 e0       	ldi	r25, 0x05	; 5
    1ae0:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__eewr_block_m128>
    1ae4:	08 95       	ret

00001ae6 <configPWM>:
	//The formula for Fast PWM
	//F(PWM) = F(Clock)/(N*(1+TOP)
	// max 245 Hz at 16mhz with full top
	
	// fast pwm, mode 14, noninverted output, prescaler 1024 //32
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
    1ae6:	82 ea       	ldi	r24, 0xA2	; 162
    1ae8:	8f bd       	out	0x2f, r24	; 47
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS01) |  (1<<CS00);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS00);
    1aea:	89 e1       	ldi	r24, 0x19	; 25
    1aec:	8e bd       	out	0x2e, r24	; 46
	
	//ICR1 = (F_CPU[MHz] * periode[us] / prescaler) - 1
	ICR1   = 2560;           // periode cca 0.5s / 8 MHz
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	9a e0       	ldi	r25, 0x0A	; 10
    1af2:	97 bd       	out	0x27, r25	; 39
    1af4:	86 bd       	out	0x26, r24	; 38
	
	DDRB   = (1<<5)|(1<<6);  // output pins OC1A, OC1B   Mega16,32
    1af6:	80 e6       	ldi	r24, 0x60	; 96
    1af8:	87 bb       	out	0x17, r24	; 23
	
	OCR1A = 0;          // duty cycle = 20 percent
    1afa:	1b bc       	out	0x2b, r1	; 43
    1afc:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;         // duty cycle = 80 percent
    1afe:	19 bc       	out	0x29, r1	; 41
    1b00:	18 bc       	out	0x28, r1	; 40
    1b02:	08 95       	ret

00001b04 <setMotorPower>:
/************************************************************************/
/* @ set dimmer to motor pwm led                                                                     */
/************************************************************************/
void setMotorPower(uint16_t m1,uint16_t m2){

	OCR1A =m1;
    1b04:	9b bd       	out	0x2b, r25	; 43
    1b06:	8a bd       	out	0x2a, r24	; 42
	OCR1B= m2;
    1b08:	79 bd       	out	0x29, r23	; 41
    1b0a:	68 bd       	out	0x28, r22	; 40
    1b0c:	08 95       	ret

00001b0e <setPWMInitial>:
/************************************************************************/
/* @ set initial power                                                                    */
/************************************************************************/
void setPWMInitial(uint8_t keyUp){
	
	if(keyUp){
    1b0e:	88 23       	and	r24, r24
    1b10:	b9 f0       	breq	.+46     	; 0x1b40 <setPWMInitial+0x32>
		powerInitial += POWER_INCREASE_STEP;
    1b12:	80 91 12 01 	lds	r24, 0x0112
    1b16:	90 91 13 01 	lds	r25, 0x0113
    1b1a:	0a 96       	adiw	r24, 0x0a	; 10
    1b1c:	90 93 13 01 	sts	0x0113, r25
    1b20:	80 93 12 01 	sts	0x0112, r24
		if(powerInitial >POWER_MAX_VAL) powerInitial = POWER_MAX_VAL;
    1b24:	80 91 12 01 	lds	r24, 0x0112
    1b28:	90 91 13 01 	lds	r25, 0x0113
    1b2c:	81 34       	cpi	r24, 0x41	; 65
    1b2e:	96 40       	sbci	r25, 0x06	; 6
    1b30:	e8 f0       	brcs	.+58     	; 0x1b6c <setPWMInitial+0x5e>
    1b32:	80 e4       	ldi	r24, 0x40	; 64
    1b34:	96 e0       	ldi	r25, 0x06	; 6
    1b36:	90 93 13 01 	sts	0x0113, r25
    1b3a:	80 93 12 01 	sts	0x0112, r24
    1b3e:	08 95       	ret
		}else{
		powerInitial -=POWER_INCREASE_STEP;
    1b40:	80 91 12 01 	lds	r24, 0x0112
    1b44:	90 91 13 01 	lds	r25, 0x0113
    1b48:	0a 97       	sbiw	r24, 0x0a	; 10
    1b4a:	90 93 13 01 	sts	0x0113, r25
    1b4e:	80 93 12 01 	sts	0x0112, r24
		if(powerInitial <POWER_MIN_VAL) powerInitial = POWER_MIN_VAL;
    1b52:	80 91 12 01 	lds	r24, 0x0112
    1b56:	90 91 13 01 	lds	r25, 0x0113
    1b5a:	84 36       	cpi	r24, 0x64	; 100
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	30 f4       	brcc	.+12     	; 0x1b6c <setPWMInitial+0x5e>
    1b60:	84 e6       	ldi	r24, 0x64	; 100
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	90 93 13 01 	sts	0x0113, r25
    1b68:	80 93 12 01 	sts	0x0112, r24
    1b6c:	08 95       	ret

00001b6e <setPWMCourse>:
/************************************************************************/
/* @ set course power                                                                     */
/************************************************************************/
void setPWMCourse(uint8_t keyUp){
	
	if(keyUp){
    1b6e:	88 23       	and	r24, r24
    1b70:	b9 f0       	breq	.+46     	; 0x1ba0 <setPWMCourse+0x32>
		powerCourse += POWER_INCREASE_STEP;
    1b72:	80 91 10 01 	lds	r24, 0x0110
    1b76:	90 91 11 01 	lds	r25, 0x0111
    1b7a:	0a 96       	adiw	r24, 0x0a	; 10
    1b7c:	90 93 11 01 	sts	0x0111, r25
    1b80:	80 93 10 01 	sts	0x0110, r24
		if(powerCourse >POWER_MAX_VAL) powerCourse = POWER_MAX_VAL;
    1b84:	80 91 10 01 	lds	r24, 0x0110
    1b88:	90 91 11 01 	lds	r25, 0x0111
    1b8c:	81 34       	cpi	r24, 0x41	; 65
    1b8e:	96 40       	sbci	r25, 0x06	; 6
    1b90:	e8 f0       	brcs	.+58     	; 0x1bcc <setPWMCourse+0x5e>
    1b92:	80 e4       	ldi	r24, 0x40	; 64
    1b94:	96 e0       	ldi	r25, 0x06	; 6
    1b96:	90 93 11 01 	sts	0x0111, r25
    1b9a:	80 93 10 01 	sts	0x0110, r24
    1b9e:	08 95       	ret
		}else{
		powerCourse -=POWER_INCREASE_STEP;
    1ba0:	80 91 10 01 	lds	r24, 0x0110
    1ba4:	90 91 11 01 	lds	r25, 0x0111
    1ba8:	0a 97       	sbiw	r24, 0x0a	; 10
    1baa:	90 93 11 01 	sts	0x0111, r25
    1bae:	80 93 10 01 	sts	0x0110, r24
		if(powerCourse <POWER_MIN_VAL) powerCourse = POWER_MIN_VAL;
    1bb2:	80 91 10 01 	lds	r24, 0x0110
    1bb6:	90 91 11 01 	lds	r25, 0x0111
    1bba:	84 36       	cpi	r24, 0x64	; 100
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	30 f4       	brcc	.+12     	; 0x1bcc <setPWMCourse+0x5e>
    1bc0:	84 e6       	ldi	r24, 0x64	; 100
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	90 93 11 01 	sts	0x0111, r25
    1bc8:	80 93 10 01 	sts	0x0110, r24
    1bcc:	08 95       	ret

00001bce <setTimePreFlashing>:

/************************************************************************/
/* @ set time initial                                                                     */
/************************************************************************/
void setTimePreFlashing(uint8_t keyUp){
	if(keyUp){
    1bce:	88 23       	and	r24, r24
    1bd0:	b1 f0       	breq	.+44     	; 0x1bfe <setTimePreFlashing+0x30>
		preFlashingTime +=PREFLASHING_STEP;
    1bd2:	80 91 20 01 	lds	r24, 0x0120
    1bd6:	90 91 21 01 	lds	r25, 0x0121
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	90 93 21 01 	sts	0x0121, r25
    1be0:	80 93 20 01 	sts	0x0120, r24
		if(preFlashingTime > PREFLASHING_MAX_TIME) preFlashingTime = PREFLASHING_MAX_TIME;
    1be4:	80 91 20 01 	lds	r24, 0x0120
    1be8:	90 91 21 01 	lds	r25, 0x0121
    1bec:	0b 97       	sbiw	r24, 0x0b	; 11
    1bee:	e0 f0       	brcs	.+56     	; 0x1c28 <setTimePreFlashing+0x5a>
    1bf0:	8a e0       	ldi	r24, 0x0A	; 10
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	90 93 21 01 	sts	0x0121, r25
    1bf8:	80 93 20 01 	sts	0x0120, r24
    1bfc:	08 95       	ret
		}else{
		preFlashingTime -=PREFLASHING_STEP;
    1bfe:	80 91 20 01 	lds	r24, 0x0120
    1c02:	90 91 21 01 	lds	r25, 0x0121
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	90 93 21 01 	sts	0x0121, r25
    1c0c:	80 93 20 01 	sts	0x0120, r24
		if(preFlashingTime < PREFLASHING_MIN_TIME) preFlashingTime = PREFLASHING_MIN_TIME;
    1c10:	80 91 20 01 	lds	r24, 0x0120
    1c14:	90 91 21 01 	lds	r25, 0x0121
    1c18:	02 97       	sbiw	r24, 0x02	; 2
    1c1a:	30 f4       	brcc	.+12     	; 0x1c28 <setTimePreFlashing+0x5a>
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	90 93 21 01 	sts	0x0121, r25
    1c24:	80 93 20 01 	sts	0x0120, r24
    1c28:	08 95       	ret

00001c2a <setTimeUnlock>:

/************************************************************************/
/* @ unlock time                                                                     */
/************************************************************************/
void setTimeUnlock(uint8_t keyUp){
	if(keyUp){
    1c2a:	88 23       	and	r24, r24
    1c2c:	b1 f0       	breq	.+44     	; 0x1c5a <setTimeUnlock+0x30>
		unlockHoldTime +=UNLOCK_STEP_TIME;
    1c2e:	80 91 16 01 	lds	r24, 0x0116
    1c32:	90 91 17 01 	lds	r25, 0x0117
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	90 93 17 01 	sts	0x0117, r25
    1c3c:	80 93 16 01 	sts	0x0116, r24
		if(unlockHoldTime > UNLOCK_MAX_TIME) unlockHoldTime = UNLOCK_MAX_TIME;
    1c40:	80 91 16 01 	lds	r24, 0x0116
    1c44:	90 91 17 01 	lds	r25, 0x0117
    1c48:	0b 97       	sbiw	r24, 0x0b	; 11
    1c4a:	e0 f0       	brcs	.+56     	; 0x1c84 <setTimeUnlock+0x5a>
    1c4c:	8a e0       	ldi	r24, 0x0A	; 10
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	90 93 17 01 	sts	0x0117, r25
    1c54:	80 93 16 01 	sts	0x0116, r24
    1c58:	08 95       	ret
		}else{
		unlockHoldTime -=UNLOCK_STEP_TIME;
    1c5a:	80 91 16 01 	lds	r24, 0x0116
    1c5e:	90 91 17 01 	lds	r25, 0x0117
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	90 93 17 01 	sts	0x0117, r25
    1c68:	80 93 16 01 	sts	0x0116, r24
		if(unlockHoldTime < UNLOCK_MIN_TIME) unlockHoldTime = UNLOCK_MIN_TIME;
    1c6c:	80 91 16 01 	lds	r24, 0x0116
    1c70:	90 91 17 01 	lds	r25, 0x0117
    1c74:	89 2b       	or	r24, r25
    1c76:	31 f4       	brne	.+12     	; 0x1c84 <setTimeUnlock+0x5a>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	90 93 17 01 	sts	0x0117, r25
    1c80:	80 93 16 01 	sts	0x0116, r24
    1c84:	08 95       	ret

00001c86 <setTimeWorking>:

/************************************************************************/
/* @ set working time Initial + time                                                                     */
/************************************************************************/
void setTimeWorking(uint8_t keyUp){
	if(keyUp){
    1c86:	88 23       	and	r24, r24
    1c88:	b9 f0       	breq	.+46     	; 0x1cb8 <setTimeWorking+0x32>
		workingTime +=WORKING_STEP_TIME;
    1c8a:	80 91 1a 01 	lds	r24, 0x011A
    1c8e:	90 91 1b 01 	lds	r25, 0x011B
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	90 93 1b 01 	sts	0x011B, r25
    1c98:	80 93 1a 01 	sts	0x011A, r24
		if(workingTime > WORKING_MAX_TIME) workingTime = WORKING_MAX_TIME;
    1c9c:	80 91 1a 01 	lds	r24, 0x011A
    1ca0:	90 91 1b 01 	lds	r25, 0x011B
    1ca4:	89 3c       	cpi	r24, 0xC9	; 201
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	30 f1       	brcs	.+76     	; 0x1cf6 <setTimeWorking+0x70>
    1caa:	88 ec       	ldi	r24, 0xC8	; 200
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	90 93 1b 01 	sts	0x011B, r25
    1cb2:	80 93 1a 01 	sts	0x011A, r24
    1cb6:	08 95       	ret
		}else{
		workingTime -=UNLOCK_STEP_TIME;
    1cb8:	80 91 1a 01 	lds	r24, 0x011A
    1cbc:	90 91 1b 01 	lds	r25, 0x011B
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	90 93 1b 01 	sts	0x011B, r25
    1cc6:	80 93 1a 01 	sts	0x011A, r24
		if(workingTime < delayGatesTime+ WORKING_OFFSET_TIME) workingTime = delayGatesTime + WORKING_OFFSET_TIME;
    1cca:	20 91 1c 01 	lds	r18, 0x011C
    1cce:	30 91 1d 01 	lds	r19, 0x011D
    1cd2:	80 91 1a 01 	lds	r24, 0x011A
    1cd6:	90 91 1b 01 	lds	r25, 0x011B
    1cda:	2b 5f       	subi	r18, 0xFB	; 251
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	82 17       	cp	r24, r18
    1ce0:	93 07       	cpc	r25, r19
    1ce2:	48 f4       	brcc	.+18     	; 0x1cf6 <setTimeWorking+0x70>
    1ce4:	80 91 1c 01 	lds	r24, 0x011C
    1ce8:	90 91 1d 01 	lds	r25, 0x011D
    1cec:	05 96       	adiw	r24, 0x05	; 5
    1cee:	90 93 1b 01 	sts	0x011B, r25
    1cf2:	80 93 1a 01 	sts	0x011A, r24
    1cf6:	08 95       	ret

00001cf8 <setTimeWating>:

/************************************************************************/
/* @ set wating time                                                                     */
/************************************************************************/
void setTimeWating(uint8_t keyUp){
	if(keyUp){
    1cf8:	88 23       	and	r24, r24
    1cfa:	b9 f0       	breq	.+46     	; 0x1d2a <setTimeWating+0x32>
		waitingTime +=WAITING_STEP_TIME;
    1cfc:	80 91 18 01 	lds	r24, 0x0118
    1d00:	90 91 19 01 	lds	r25, 0x0119
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	90 93 19 01 	sts	0x0119, r25
    1d0a:	80 93 18 01 	sts	0x0118, r24
		if(waitingTime > WAITING_MAX_TIME) waitingTime = WAITING_MAX_TIME;
    1d0e:	80 91 18 01 	lds	r24, 0x0118
    1d12:	90 91 19 01 	lds	r25, 0x0119
    1d16:	89 3c       	cpi	r24, 0xC9	; 201
    1d18:	91 05       	cpc	r25, r1
    1d1a:	e0 f0       	brcs	.+56     	; 0x1d54 <setTimeWating+0x5c>
    1d1c:	88 ec       	ldi	r24, 0xC8	; 200
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	90 93 19 01 	sts	0x0119, r25
    1d24:	80 93 18 01 	sts	0x0118, r24
    1d28:	08 95       	ret
		}else{
		waitingTime -=UNLOCK_STEP_TIME;
    1d2a:	80 91 18 01 	lds	r24, 0x0118
    1d2e:	90 91 19 01 	lds	r25, 0x0119
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	90 93 19 01 	sts	0x0119, r25
    1d38:	80 93 18 01 	sts	0x0118, r24
		if(waitingTime < WAITING_MIN_TIME) waitingTime = WAITING_MIN_TIME;
    1d3c:	80 91 18 01 	lds	r24, 0x0118
    1d40:	90 91 19 01 	lds	r25, 0x0119
    1d44:	05 97       	sbiw	r24, 0x05	; 5
    1d46:	30 f4       	brcc	.+12     	; 0x1d54 <setTimeWating+0x5c>
    1d48:	85 e0       	ldi	r24, 0x05	; 5
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	90 93 19 01 	sts	0x0119, r25
    1d50:	80 93 18 01 	sts	0x0118, r24
    1d54:	08 95       	ret

00001d56 <setTimeHold>:

/************************************************************************/
/* @ set hold time                                                                     */
/************************************************************************/
void setTimeHold(uint8_t keyUp){
	if(keyUp){
    1d56:	88 23       	and	r24, r24
    1d58:	b1 f0       	breq	.+44     	; 0x1d86 <setTimeHold+0x30>
		holdingTime +=HOLD_STEP_TIME;
    1d5a:	80 91 14 01 	lds	r24, 0x0114
    1d5e:	90 91 15 01 	lds	r25, 0x0115
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	90 93 15 01 	sts	0x0115, r25
    1d68:	80 93 14 01 	sts	0x0114, r24
		if(holdingTime > HOLD_MAX_TIME) holdingTime = HOLD_MAX_TIME;
    1d6c:	80 91 14 01 	lds	r24, 0x0114
    1d70:	90 91 15 01 	lds	r25, 0x0115
    1d74:	0b 97       	sbiw	r24, 0x0b	; 11
    1d76:	e0 f0       	brcs	.+56     	; 0x1db0 <setTimeHold+0x5a>
    1d78:	8a e0       	ldi	r24, 0x0A	; 10
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	90 93 15 01 	sts	0x0115, r25
    1d80:	80 93 14 01 	sts	0x0114, r24
    1d84:	08 95       	ret
		}else{
		holdingTime -=HOLD_STEP_TIME;
    1d86:	80 91 14 01 	lds	r24, 0x0114
    1d8a:	90 91 15 01 	lds	r25, 0x0115
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	90 93 15 01 	sts	0x0115, r25
    1d94:	80 93 14 01 	sts	0x0114, r24
		if(holdingTime < HOLD_MIN_TIME) holdingTime = HOLD_MIN_TIME;
    1d98:	80 91 14 01 	lds	r24, 0x0114
    1d9c:	90 91 15 01 	lds	r25, 0x0115
    1da0:	89 2b       	or	r24, r25
    1da2:	31 f4       	brne	.+12     	; 0x1db0 <setTimeHold+0x5a>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	90 93 15 01 	sts	0x0115, r25
    1dac:	80 93 14 01 	sts	0x0114, r24
    1db0:	08 95       	ret

00001db2 <setTimeDelayGates>:

/************************************************************************/
/* @ set delay gates                                                                     */
/************************************************************************/
void setTimeDelayGates(uint8_t keyUp){
	if(keyUp){
    1db2:	88 23       	and	r24, r24
    1db4:	b1 f0       	breq	.+44     	; 0x1de2 <setTimeDelayGates+0x30>
		delayGatesTime +=DELAY_GATE_STEP_TIME;
    1db6:	80 91 1c 01 	lds	r24, 0x011C
    1dba:	90 91 1d 01 	lds	r25, 0x011D
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	90 93 1d 01 	sts	0x011D, r25
    1dc4:	80 93 1c 01 	sts	0x011C, r24
		if(delayGatesTime > DELAY_GATE_MAX_TIME) delayGatesTime = DELAY_GATE_MAX_TIME;
    1dc8:	80 91 1c 01 	lds	r24, 0x011C
    1dcc:	90 91 1d 01 	lds	r25, 0x011D
    1dd0:	0b 97       	sbiw	r24, 0x0b	; 11
    1dd2:	e0 f0       	brcs	.+56     	; 0x1e0c <setTimeDelayGates+0x5a>
    1dd4:	8a e0       	ldi	r24, 0x0A	; 10
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	90 93 1d 01 	sts	0x011D, r25
    1ddc:	80 93 1c 01 	sts	0x011C, r24
    1de0:	08 95       	ret
		}else{
		delayGatesTime -=DELAY_GATE_STEP_TIME;
    1de2:	80 91 1c 01 	lds	r24, 0x011C
    1de6:	90 91 1d 01 	lds	r25, 0x011D
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	90 93 1d 01 	sts	0x011D, r25
    1df0:	80 93 1c 01 	sts	0x011C, r24
		if(delayGatesTime < DELAY_GATE_MIN_TIME) delayGatesTime = DELAY_GATE_MIN_TIME;
    1df4:	80 91 1c 01 	lds	r24, 0x011C
    1df8:	90 91 1d 01 	lds	r25, 0x011D
    1dfc:	05 97       	sbiw	r24, 0x05	; 5
    1dfe:	30 f4       	brcc	.+12     	; 0x1e0c <setTimeDelayGates+0x5a>
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	90 93 1d 01 	sts	0x011D, r25
    1e08:	80 93 1c 01 	sts	0x011C, r24
    1e0c:	08 95       	ret

00001e0e <setTimeRamBlow>:

/************************************************************************/
/* set time RAM                                                                     */
/************************************************************************/
void setTimeRamBlow(uint8_t keyUp){
	if(keyUp){
    1e0e:	88 23       	and	r24, r24
    1e10:	b1 f0       	breq	.+44     	; 0x1e3e <setTimeRamBlow+0x30>
		ramBlowTime +=RAM_STEP_TIME;
    1e12:	80 91 1e 01 	lds	r24, 0x011E
    1e16:	90 91 1f 01 	lds	r25, 0x011F
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	90 93 1f 01 	sts	0x011F, r25
    1e20:	80 93 1e 01 	sts	0x011E, r24
		if(ramBlowTime > RAM_MAX_TIME) ramBlowTime = RAM_MAX_TIME;
    1e24:	80 91 1e 01 	lds	r24, 0x011E
    1e28:	90 91 1f 01 	lds	r25, 0x011F
    1e2c:	06 97       	sbiw	r24, 0x06	; 6
    1e2e:	e0 f0       	brcs	.+56     	; 0x1e68 <setTimeRamBlow+0x5a>
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	90 93 1f 01 	sts	0x011F, r25
    1e38:	80 93 1e 01 	sts	0x011E, r24
    1e3c:	08 95       	ret
		}else{
		ramBlowTime -=RAM_STEP_TIME;
    1e3e:	80 91 1e 01 	lds	r24, 0x011E
    1e42:	90 91 1f 01 	lds	r25, 0x011F
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	90 93 1f 01 	sts	0x011F, r25
    1e4c:	80 93 1e 01 	sts	0x011E, r24
		if(ramBlowTime < RAM_MIN_TIME) ramBlowTime = RAM_MIN_TIME;
    1e50:	80 91 1e 01 	lds	r24, 0x011E
    1e54:	90 91 1f 01 	lds	r25, 0x011F
    1e58:	89 2b       	or	r24, r25
    1e5a:	31 f4       	brne	.+12     	; 0x1e68 <setTimeRamBlow+0x5a>
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	90 93 1f 01 	sts	0x011F, r25
    1e64:	80 93 1e 01 	sts	0x011E, r24
    1e68:	08 95       	ret

00001e6a <stateMachineSwing>:
	
	static uint16_t runningTime;
	static uint16_t savedRunningTime;
	static uint16_t timming;
	static uint8_t swing;
	runningTime++;
    1e6a:	a0 91 0c 05 	lds	r26, 0x050C
    1e6e:	b0 91 0d 05 	lds	r27, 0x050D
    1e72:	9d 01       	movw	r18, r26
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	30 93 0d 05 	sts	0x050D, r19
    1e7c:	20 93 0c 05 	sts	0x050C, r18
	
	switch(stateSwing){
    1e80:	40 91 0f 01 	lds	r20, 0x010F
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	41 50       	subi	r20, 0x01	; 1
    1e88:	51 09       	sbc	r21, r1
    1e8a:	48 3d       	cpi	r20, 0xD8	; 216
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	08 f0       	brcs	.+2      	; 0x1e92 <stateMachineSwing+0x28>
    1e90:	81 c6       	rjmp	.+3330   	; 0x2b94 <stateMachineSwing+0xd2a>
    1e92:	46 59       	subi	r20, 0x96	; 150
    1e94:	5e 4f       	sbci	r21, 0xFE	; 254
    1e96:	fa 01       	movw	r30, r20
    1e98:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__tablejump2__>
		case STATE_CLOSED_IDLE:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSED_IDLE\n\r");
		#endif
		
		runningTime=0;
    1e9c:	10 92 0d 05 	sts	0x050D, r1
    1ea0:	10 92 0c 05 	sts	0x050C, r1
		swing =INACTIVE;
    1ea4:	10 92 0b 05 	sts	0x050B, r1
		
		if(sig == SIGNAL_REMOTE_PED){ // if pedonal signal
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	81 f4       	brne	.+32     	; 0x1ecc <stateMachineSwing+0x62>
			
			swing =INACTIVE;
			if(preFlashingActive==ACTIVE)	stateSwing = STATE_PRE_FLASHING;
    1eac:	80 91 26 01 	lds	r24, 0x0126
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	31 f4       	brne	.+12     	; 0x1ec0 <stateMachineSwing+0x56>
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	80 93 0f 01 	sts	0x010F, r24
			else stateSwing = STATE_UNLOCK;
			return(1);
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	08 95       	ret
		
		if(sig == SIGNAL_REMOTE_PED){ // if pedonal signal
			
			swing =INACTIVE;
			if(preFlashingActive==ACTIVE)	stateSwing = STATE_PRE_FLASHING;
			else stateSwing = STATE_UNLOCK;
    1ec0:	85 e6       	ldi	r24, 0x65	; 101
    1ec2:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	08 95       	ret
			
		}
		if(sig == SIGNAL_REMOTE_SWING){ // if both dorrs
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <stateMachineSwing+0x68>
    1ed0:	67 c6       	rjmp	.+3278   	; 0x2ba0 <stateMachineSwing+0xd36>
			swing=ACTIVE;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	80 93 0b 05 	sts	0x050B, r24
			if(preFlashingActive==ACTIVE)	stateSwing = STATE_PRE_FLASHING;
    1ed8:	80 91 26 01 	lds	r24, 0x0126
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	31 f4       	brne	.+12     	; 0x1eec <stateMachineSwing+0x82>
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	80 93 0f 01 	sts	0x010F, r24
			else stateSwing = STATE_UNLOCK;
			return(1);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	08 95       	ret
			
		}
		if(sig == SIGNAL_REMOTE_SWING){ // if both dorrs
			swing=ACTIVE;
			if(preFlashingActive==ACTIVE)	stateSwing = STATE_PRE_FLASHING;
			else stateSwing = STATE_UNLOCK;
    1eec:	85 e6       	ldi	r24, 0x65	; 101
    1eee:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_PRE_FLASHING\n\r");
		#endif
		
		
		timming++;
    1ef8:	80 91 09 05 	lds	r24, 0x0509
    1efc:	90 91 0a 05 	lds	r25, 0x050A
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	90 93 0a 05 	sts	0x050A, r25
    1f06:	80 93 09 05 	sts	0x0509, r24
		if(timming >preFlashingTime ){
    1f0a:	20 91 20 01 	lds	r18, 0x0120
    1f0e:	30 91 21 01 	lds	r19, 0x0121
    1f12:	28 17       	cp	r18, r24
    1f14:	39 07       	cpc	r19, r25
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <stateMachineSwing+0xb0>
    1f18:	46 c6       	rjmp	.+3212   	; 0x2ba6 <stateMachineSwing+0xd3c>
			timming=0; // reset timer
    1f1a:	10 92 0a 05 	sts	0x050A, r1
    1f1e:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    1f22:	10 92 0d 05 	sts	0x050D, r1
    1f26:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_UNLOCK;
    1f2a:	85 e6       	ldi	r24, 0x65	; 101
    1f2c:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	08 95       	ret
		case STATE_UNLOCK:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_UNLOCK\n\r");
		#endif
		
		timming++;
    1f36:	80 91 09 05 	lds	r24, 0x0509
    1f3a:	90 91 0a 05 	lds	r25, 0x050A
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	90 93 0a 05 	sts	0x050A, r25
    1f44:	80 93 09 05 	sts	0x0509, r24
		if(timming >unlockHoldTime){
    1f48:	20 91 16 01 	lds	r18, 0x0116
    1f4c:	30 91 17 01 	lds	r19, 0x0117
    1f50:	28 17       	cp	r18, r24
    1f52:	39 07       	cpc	r19, r25
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <stateMachineSwing+0xee>
    1f56:	2a c6       	rjmp	.+3156   	; 0x2bac <stateMachineSwing+0xd42>
			timming=0; // reset timer
    1f58:	10 92 0a 05 	sts	0x050A, r1
    1f5c:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    1f60:	10 92 0d 05 	sts	0x050D, r1
    1f64:	10 92 0c 05 	sts	0x050C, r1
			if(swing == INACTIVE){ // PED
    1f68:	80 91 0b 05 	lds	r24, 0x050B
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	10 c0       	rjmp	.+32     	; 0x1f90 <stateMachineSwing+0x126>
				if(ramBlowActive==ACTIVE) stateSwing = STATE_OPENING_M1_RAM_PED;
    1f70:	80 91 25 01 	lds	r24, 0x0125
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	31 f4       	brne	.+12     	; 0x1f84 <stateMachineSwing+0x11a>
    1f78:	86 e6       	ldi	r24, 0x66	; 102
    1f7a:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_OPENING_M1_INITIAL_PED;
				
				return(1);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	08 95       	ret
		if(timming >unlockHoldTime){
			timming=0; // reset timer
			runningTime=0;
			if(swing == INACTIVE){ // PED
				if(ramBlowActive==ACTIVE) stateSwing = STATE_OPENING_M1_RAM_PED;
				else stateSwing = STATE_OPENING_M1_INITIAL_PED;
    1f84:	87 e6       	ldi	r24, 0x67	; 103
    1f86:	80 93 0f 01 	sts	0x010F, r24
				
				return(1);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	08 95       	ret
			}
			// swing MODE
			if(swing == ACTIVE){
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <stateMachineSwing+0x12c>
    1f94:	0e c6       	rjmp	.+3100   	; 0x2bb2 <stateMachineSwing+0xd48>
				if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_RAM_M2_HOLD_SWING;
    1f96:	80 91 25 01 	lds	r24, 0x0125
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	31 f4       	brne	.+12     	; 0x1faa <stateMachineSwing+0x140>
    1f9e:	89 ec       	ldi	r24, 0xC9	; 201
    1fa0:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_OPENING_M1_INITIAL_M2_HOLD_SWING;
				
				return (1);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	08 95       	ret
				return(1);
			}
			// swing MODE
			if(swing == ACTIVE){
				if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_RAM_M2_HOLD_SWING;
				else stateSwing = STATE_OPENING_M1_INITIAL_M2_HOLD_SWING;
    1faa:	8a ec       	ldi	r24, 0xCA	; 202
    1fac:	80 93 0f 01 	sts	0x010F, r24
				
				return (1);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	08 95       	ret
		case STATE_OPENING_M1_RAM_PED:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_OPENING_M1_RAM_PED\n\r");
		#endif
		
		timming++;
    1fb6:	80 91 09 05 	lds	r24, 0x0509
    1fba:	90 91 0a 05 	lds	r25, 0x050A
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	90 93 0a 05 	sts	0x050A, r25
    1fc4:	80 93 09 05 	sts	0x0509, r24
		if(timming > ramBlowTime){
    1fc8:	20 91 1e 01 	lds	r18, 0x011E
    1fcc:	30 91 1f 01 	lds	r19, 0x011F
    1fd0:	28 17       	cp	r18, r24
    1fd2:	39 07       	cpc	r19, r25
    1fd4:	08 f0       	brcs	.+2      	; 0x1fd8 <stateMachineSwing+0x16e>
    1fd6:	f0 c5       	rjmp	.+3040   	; 0x2bb8 <stateMachineSwing+0xd4e>
			timming=0; // reset timer
    1fd8:	10 92 0a 05 	sts	0x050A, r1
    1fdc:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    1fe0:	10 92 0d 05 	sts	0x050D, r1
    1fe4:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_OPENING_M1_INITIAL_PED;
    1fe8:	87 e6       	ldi	r24, 0x67	; 103
    1fea:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_OPENING_M1_INITIAL_PED\n\r");
		#endif
		
		// RADIO SIGNAL RECEIVED
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    1ff4:	81 50       	subi	r24, 0x01	; 1
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	90 f4       	brcc	.+36     	; 0x201e <stateMachineSwing+0x1b4>
			savedRunningTime = runningTime; // SAVE Running time
    1ffa:	30 93 08 05 	sts	0x0508, r19
    1ffe:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    2002:	10 92 0a 05 	sts	0x050A, r1
    2006:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    200a:	10 92 0d 05 	sts	0x050D, r1
    200e:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_HOLD_OPENING_M1_PED;
    2012:	81 e7       	ldi	r24, 0x71	; 113
    2014:	80 93 0f 01 	sts	0x010F, r24
			return (1);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	08 95       	ret
		}
		
		
		// DELAY MODE INITIAL OPENING
		timming++;
    201e:	80 91 09 05 	lds	r24, 0x0509
    2022:	90 91 0a 05 	lds	r25, 0x050A
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	90 93 0a 05 	sts	0x050A, r25
    202c:	80 93 09 05 	sts	0x0509, r24
		if(timming > delayGatesTime){
    2030:	20 91 1c 01 	lds	r18, 0x011C
    2034:	30 91 1d 01 	lds	r19, 0x011D
    2038:	28 17       	cp	r18, r24
    203a:	39 07       	cpc	r19, r25
    203c:	08 f0       	brcs	.+2      	; 0x2040 <stateMachineSwing+0x1d6>
    203e:	bf c5       	rjmp	.+2942   	; 0x2bbe <stateMachineSwing+0xd54>
			
			timming=0; // reset timming
    2040:	10 92 0a 05 	sts	0x050A, r1
    2044:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_OPENING_M1_COURSE_PED;
    2048:	88 e6       	ldi	r24, 0x68	; 104
    204a:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_OPENING_M1_COURSE_PED\n\r");
		#endif
		
		// RECEIVED RADIO SIGNAL
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    2054:	81 50       	subi	r24, 0x01	; 1
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	70 f4       	brcc	.+28     	; 0x2076 <stateMachineSwing+0x20c>
			savedRunningTime = runningTime; // SAVE Running time
    205a:	30 93 08 05 	sts	0x0508, r19
    205e:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    2062:	10 92 0a 05 	sts	0x050A, r1
    2066:	10 92 09 05 	sts	0x0509, r1
			stateSwing=STATE_HOLD_OPENING_M1_PED;
    206a:	81 e7       	ldi	r24, 0x71	; 113
    206c:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	08 95       	ret
		}
		
		
		
		// REACH WORKING TIME OPENING
		if(runningTime > workingTime){
    2076:	80 91 1a 01 	lds	r24, 0x011A
    207a:	90 91 1b 01 	lds	r25, 0x011B
    207e:	82 17       	cp	r24, r18
    2080:	93 07       	cpc	r25, r19
    2082:	08 f0       	brcs	.+2      	; 0x2086 <stateMachineSwing+0x21c>
    2084:	9f c5       	rjmp	.+2878   	; 0x2bc4 <stateMachineSwing+0xd5a>
			runningTime=0; // reset time
    2086:	10 92 0d 05 	sts	0x050D, r1
    208a:	10 92 0c 05 	sts	0x050C, r1
			timming=0;
    208e:	10 92 0a 05 	sts	0x050A, r1
    2092:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_WAITING_M1_TIME_OR_SIGNAL_PED;
    2096:	8b e6       	ldi	r24, 0x6B	; 107
    2098:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_HOLD_OPENING_M1_PED\n\r");
		#endif
		
		// ONE SIGNAL REVERSE
		if(stepActive==INACTIVE){
    20a2:	80 91 24 01 	lds	r24, 0x0124
    20a6:	81 11       	cpse	r24, r1
    20a8:	5a c0       	rjmp	.+180    	; 0x215e <stateMachineSwing+0x2f4>
			if(cellActive == ACTIVE){
    20aa:	80 91 23 01 	lds	r24, 0x0123
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	69 f5       	brne	.+90     	; 0x210c <stateMachineSwing+0x2a2>
				if(photoCellsState == CELL_FREE){// CELL ACTIVE AND BLOCKED REMAIN HERE
    20b2:	80 91 02 05 	lds	r24, 0x0502
    20b6:	81 11       	cpse	r24, r1
    20b8:	88 c5       	rjmp	.+2832   	; 0x2bca <stateMachineSwing+0xd60>
					timming++;
    20ba:	80 91 09 05 	lds	r24, 0x0509
    20be:	90 91 0a 05 	lds	r25, 0x050A
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	90 93 0a 05 	sts	0x050A, r25
    20c8:	80 93 09 05 	sts	0x0509, r24
					if(timming > holdingTime){
    20cc:	20 91 14 01 	lds	r18, 0x0114
    20d0:	30 91 15 01 	lds	r19, 0x0115
    20d4:	28 17       	cp	r18, r24
    20d6:	39 07       	cpc	r19, r25
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <stateMachineSwing+0x272>
    20da:	7a c5       	rjmp	.+2804   	; 0x2bd0 <stateMachineSwing+0xd66>
						timming=0;
    20dc:	10 92 0a 05 	sts	0x050A, r1
    20e0:	10 92 09 05 	sts	0x0509, r1
						runningTime= workingTime - savedRunningTime;
    20e4:	80 91 1a 01 	lds	r24, 0x011A
    20e8:	90 91 1b 01 	lds	r25, 0x011B
    20ec:	20 91 07 05 	lds	r18, 0x0507
    20f0:	30 91 08 05 	lds	r19, 0x0508
    20f4:	82 1b       	sub	r24, r18
    20f6:	93 0b       	sbc	r25, r19
    20f8:	90 93 0d 05 	sts	0x050D, r25
    20fc:	80 93 0c 05 	sts	0x050C, r24
						stateSwing = STATE_CLOSING_M1_COURSE_PED;
    2100:	8e e6       	ldi	r24, 0x6E	; 110
    2102:	80 93 0f 01 	sts	0x010F, r24
				timming=0;
				runningTime=0;
			}
			return (1);
		}
		return (0);
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	08 95       	ret
						runningTime= workingTime - savedRunningTime;
						stateSwing = STATE_CLOSING_M1_COURSE_PED;
					}
				}
				}else{
				timming++;
    210c:	80 91 09 05 	lds	r24, 0x0509
    2110:	90 91 0a 05 	lds	r25, 0x050A
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	90 93 0a 05 	sts	0x050A, r25
    211a:	80 93 09 05 	sts	0x0509, r24
				if(timming > holdingTime){
    211e:	20 91 14 01 	lds	r18, 0x0114
    2122:	30 91 15 01 	lds	r19, 0x0115
    2126:	28 17       	cp	r18, r24
    2128:	39 07       	cpc	r19, r25
    212a:	08 f0       	brcs	.+2      	; 0x212e <stateMachineSwing+0x2c4>
    212c:	54 c5       	rjmp	.+2728   	; 0x2bd6 <stateMachineSwing+0xd6c>
					timming=0;
    212e:	10 92 0a 05 	sts	0x050A, r1
    2132:	10 92 09 05 	sts	0x0509, r1
					runningTime=workingTime - savedRunningTime;;
    2136:	80 91 1a 01 	lds	r24, 0x011A
    213a:	90 91 1b 01 	lds	r25, 0x011B
    213e:	20 91 07 05 	lds	r18, 0x0507
    2142:	30 91 08 05 	lds	r19, 0x0508
    2146:	82 1b       	sub	r24, r18
    2148:	93 0b       	sbc	r25, r19
    214a:	90 93 0d 05 	sts	0x050D, r25
    214e:	80 93 0c 05 	sts	0x050C, r24
					stateSwing = STATE_CLOSING_M1_COURSE_PED;
    2152:	8e e6       	ldi	r24, 0x6E	; 110
    2154:	80 93 0f 01 	sts	0x010F, r24
					return (1);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	08 95       	ret
				}
				
			}
			}else{ // STEP BY STEP JUST HOLD TO SEND TO WAITING
			timming++;
    215e:	80 91 09 05 	lds	r24, 0x0509
    2162:	90 91 0a 05 	lds	r25, 0x050A
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	90 93 0a 05 	sts	0x050A, r25
    216c:	80 93 09 05 	sts	0x0509, r24
			if(timming > holdingTime){
    2170:	20 91 14 01 	lds	r18, 0x0114
    2174:	30 91 15 01 	lds	r19, 0x0115
    2178:	28 17       	cp	r18, r24
    217a:	39 07       	cpc	r19, r25
    217c:	08 f0       	brcs	.+2      	; 0x2180 <stateMachineSwing+0x316>
    217e:	2e c5       	rjmp	.+2652   	; 0x2bdc <stateMachineSwing+0xd72>
				stateSwing = STATE_WAITING_M1_TIME_OR_SIGNAL_PED;
    2180:	8b e6       	ldi	r24, 0x6B	; 107
    2182:	80 93 0f 01 	sts	0x010F, r24
				timming=0;
    2186:	10 92 0a 05 	sts	0x050A, r1
    218a:	10 92 09 05 	sts	0x0509, r1
				runningTime=0;
    218e:	10 92 0d 05 	sts	0x050D, r1
    2192:	10 92 0c 05 	sts	0x050C, r1
			}
			return (1);
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_WAITING_M1_TIME_OR_SIGNAL_PED\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    219c:	90 91 23 01 	lds	r25, 0x0123
    21a0:	91 30       	cpi	r25, 0x01	; 1
    21a2:	91 f4       	brne	.+36     	; 0x21c8 <stateMachineSwing+0x35e>
    21a4:	90 91 02 05 	lds	r25, 0x0502
    21a8:	99 23       	and	r25, r25
    21aa:	71 f0       	breq	.+28     	; 0x21c8 <stateMachineSwing+0x35e>
			timming =0;
    21ac:	10 92 0a 05 	sts	0x050A, r1
    21b0:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    21b4:	10 92 0d 05 	sts	0x050D, r1
    21b8:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_WAITING_M1_TIME_OR_SIGNAL_PED;
    21bc:	8b e6       	ldi	r24, 0x6B	; 107
    21be:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	08 95       	ret
		}
		
		
		// IF ALL CLEAR PROCEED
		if(autoCloseActive == ACTIVE){
    21c8:	90 91 22 01 	lds	r25, 0x0122
    21cc:	91 30       	cpi	r25, 0x01	; 1
    21ce:	49 f5       	brne	.+82     	; 0x2222 <stateMachineSwing+0x3b8>
			runningTime++;
    21d0:	fd 01       	movw	r30, r26
    21d2:	32 96       	adiw	r30, 0x02	; 2
    21d4:	f0 93 0d 05 	sts	0x050D, r31
    21d8:	e0 93 0c 05 	sts	0x050C, r30
			if(runningTime > waitingTime || sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    21dc:	20 91 18 01 	lds	r18, 0x0118
    21e0:	30 91 19 01 	lds	r19, 0x0119
    21e4:	2e 17       	cp	r18, r30
    21e6:	3f 07       	cpc	r19, r31
    21e8:	20 f0       	brcs	.+8      	; 0x21f2 <stateMachineSwing+0x388>
    21ea:	81 50       	subi	r24, 0x01	; 1
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <stateMachineSwing+0x388>
    21f0:	f8 c4       	rjmp	.+2544   	; 0x2be2 <stateMachineSwing+0xd78>
				runningTime=0;
    21f2:	10 92 0d 05 	sts	0x050D, r1
    21f6:	10 92 0c 05 	sts	0x050C, r1
				timming=0;
    21fa:	10 92 0a 05 	sts	0x050A, r1
    21fe:	10 92 09 05 	sts	0x0509, r1
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_RAM_PED;
    2202:	80 91 25 01 	lds	r24, 0x0125
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	31 f4       	brne	.+12     	; 0x2216 <stateMachineSwing+0x3ac>
    220a:	8c e6       	ldi	r24, 0x6C	; 108
    220c:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
			}
			return (1);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	08 95       	ret
			runningTime++;
			if(runningTime > waitingTime || sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_RAM_PED;
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
    2216:	8d e6       	ldi	r24, 0x6D	; 109
    2218:	80 93 0f 01 	sts	0x010F, r24
			}
			return (1);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	08 95       	ret
		}
		if(autoCloseActive == INACTIVE){
    2222:	90 91 22 01 	lds	r25, 0x0122
    2226:	91 11       	cpse	r25, r1
    2228:	df c4       	rjmp	.+2494   	; 0x2be8 <stateMachineSwing+0xd7e>
			if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    222a:	81 50       	subi	r24, 0x01	; 1
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	08 f0       	brcs	.+2      	; 0x2232 <stateMachineSwing+0x3c8>
    2230:	de c4       	rjmp	.+2492   	; 0x2bee <stateMachineSwing+0xd84>
				runningTime=0;
    2232:	10 92 0d 05 	sts	0x050D, r1
    2236:	10 92 0c 05 	sts	0x050C, r1
				timming=0;
    223a:	10 92 0a 05 	sts	0x050A, r1
    223e:	10 92 09 05 	sts	0x0509, r1
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_RAM_PED;
    2242:	80 91 25 01 	lds	r24, 0x0125
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	31 f4       	brne	.+12     	; 0x2256 <stateMachineSwing+0x3ec>
    224a:	8c e6       	ldi	r24, 0x6C	; 108
    224c:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
			}
			return (1);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	08 95       	ret
		if(autoCloseActive == INACTIVE){
			if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_RAM_PED;
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
    2256:	8d e6       	ldi	r24, 0x6D	; 109
    2258:	80 93 0f 01 	sts	0x010F, r24
			}
			return (1);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	08 95       	ret
		case STATE_CLOSING_M1_RAM_PED:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_RAM_PED\n\r");
		#endif
		
		timming++;
    2262:	80 91 09 05 	lds	r24, 0x0509
    2266:	90 91 0a 05 	lds	r25, 0x050A
    226a:	01 96       	adiw	r24, 0x01	; 1
    226c:	90 93 0a 05 	sts	0x050A, r25
    2270:	80 93 09 05 	sts	0x0509, r24
		if(timming > ramBlowTime){
    2274:	20 91 1e 01 	lds	r18, 0x011E
    2278:	30 91 1f 01 	lds	r19, 0x011F
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	08 f0       	brcs	.+2      	; 0x2284 <stateMachineSwing+0x41a>
    2282:	b8 c4       	rjmp	.+2416   	; 0x2bf4 <stateMachineSwing+0xd8a>
			timming=0;
    2284:	10 92 0a 05 	sts	0x050A, r1
    2288:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    228c:	10 92 0d 05 	sts	0x050D, r1
    2290:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_CLOSING_M1_INITIAL_PED;
    2294:	8d e6       	ldi	r24, 0x6D	; 109
    2296:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_INITIAL_PED\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    22a0:	90 91 23 01 	lds	r25, 0x0123
    22a4:	91 30       	cpi	r25, 0x01	; 1
    22a6:	b1 f4       	brne	.+44     	; 0x22d4 <stateMachineSwing+0x46a>
    22a8:	90 91 02 05 	lds	r25, 0x0502
    22ac:	99 23       	and	r25, r25
    22ae:	91 f0       	breq	.+36     	; 0x22d4 <stateMachineSwing+0x46a>
			savedRunningTime = runningTime;
    22b0:	30 93 08 05 	sts	0x0508, r19
    22b4:	20 93 07 05 	sts	0x0507, r18
			timming =0;
    22b8:	10 92 0a 05 	sts	0x050A, r1
    22bc:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    22c0:	10 92 0d 05 	sts	0x050D, r1
    22c4:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_CELL_CLOSING_M1_PED;
    22c8:	80 e7       	ldi	r24, 0x70	; 112
    22ca:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	08 95       	ret
		}
		
		// REMOTE SIGNAL RECEIVED
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    22d4:	81 50       	subi	r24, 0x01	; 1
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	90 f4       	brcc	.+36     	; 0x22fe <stateMachineSwing+0x494>
			savedRunningTime = runningTime;
    22da:	30 93 08 05 	sts	0x0508, r19
    22de:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    22e2:	10 92 0a 05 	sts	0x050A, r1
    22e6:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    22ea:	10 92 0d 05 	sts	0x050D, r1
    22ee:	10 92 0c 05 	sts	0x050C, r1
			stateSwing=STATE_HOLD_CLOSING_M1_PED;
    22f2:	8f e6       	ldi	r24, 0x6F	; 111
    22f4:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	08 95       	ret
		}
		
		
		timming++;
    22fe:	80 91 09 05 	lds	r24, 0x0509
    2302:	90 91 0a 05 	lds	r25, 0x050A
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	90 93 0a 05 	sts	0x050A, r25
    230c:	80 93 09 05 	sts	0x0509, r24
		if(timming>delayGatesTime){
    2310:	20 91 1c 01 	lds	r18, 0x011C
    2314:	30 91 1d 01 	lds	r19, 0x011D
    2318:	28 17       	cp	r18, r24
    231a:	39 07       	cpc	r19, r25
    231c:	08 f0       	brcs	.+2      	; 0x2320 <stateMachineSwing+0x4b6>
    231e:	6d c4       	rjmp	.+2266   	; 0x2bfa <stateMachineSwing+0xd90>
			timming=0;
    2320:	10 92 0a 05 	sts	0x050A, r1
    2324:	10 92 09 05 	sts	0x0509, r1
			stateSwing=STATE_CLOSING_M1_COURSE_PED;
    2328:	8e e6       	ldi	r24, 0x6E	; 110
    232a:	80 93 0f 01 	sts	0x010F, r24
			return(0);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	08 95       	ret
		USART1_sendStr("STATE: STATE_CLOSING_M1_COURSE_PED\n\r");
		#endif
		
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    2334:	90 91 23 01 	lds	r25, 0x0123
    2338:	91 30       	cpi	r25, 0x01	; 1
    233a:	b1 f4       	brne	.+44     	; 0x2368 <stateMachineSwing+0x4fe>
    233c:	90 91 02 05 	lds	r25, 0x0502
    2340:	99 23       	and	r25, r25
    2342:	91 f0       	breq	.+36     	; 0x2368 <stateMachineSwing+0x4fe>
			savedRunningTime = runningTime;
    2344:	30 93 08 05 	sts	0x0508, r19
    2348:	20 93 07 05 	sts	0x0507, r18
			timming =0;
    234c:	10 92 0a 05 	sts	0x050A, r1
    2350:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2354:	10 92 0d 05 	sts	0x050D, r1
    2358:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_CELL_CLOSING_M1_PED;
    235c:	80 e7       	ldi	r24, 0x70	; 112
    235e:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	08 95       	ret
		}
		
		
		// STOP THE DOOR SIGNAL HOLD
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    2368:	81 50       	subi	r24, 0x01	; 1
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	70 f4       	brcc	.+28     	; 0x238a <stateMachineSwing+0x520>
			savedRunningTime = runningTime;
    236e:	30 93 08 05 	sts	0x0508, r19
    2372:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    2376:	10 92 0a 05 	sts	0x050A, r1
    237a:	10 92 09 05 	sts	0x0509, r1
			stateSwing=STATE_HOLD_CLOSING_M1_PED;
    237e:	8f e6       	ldi	r24, 0x6F	; 111
    2380:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	08 95       	ret
		}
		
		
		// RUNNING TIME REACHED CLOSING
		if(runningTime > workingTime){
    238a:	80 91 1a 01 	lds	r24, 0x011A
    238e:	90 91 1b 01 	lds	r25, 0x011B
    2392:	82 17       	cp	r24, r18
    2394:	93 07       	cpc	r25, r19
    2396:	08 f0       	brcs	.+2      	; 0x239a <stateMachineSwing+0x530>
    2398:	33 c4       	rjmp	.+2150   	; 0x2c00 <stateMachineSwing+0xd96>
			runningTime=0;
    239a:	10 92 0d 05 	sts	0x050D, r1
    239e:	10 92 0c 05 	sts	0x050C, r1
			timming=0;
    23a2:	10 92 0a 05 	sts	0x050A, r1
    23a6:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_CLOSED_IDLE;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	08 95       	ret
		
		case STATE_CELL_CLOSING_M1_PED:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CELL_CLOSING_M1_PED\n\r");
		#endif
		timming++;
    23b6:	80 91 09 05 	lds	r24, 0x0509
    23ba:	90 91 0a 05 	lds	r25, 0x050A
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	90 93 0a 05 	sts	0x050A, r25
    23c4:	80 93 09 05 	sts	0x0509, r24
		if(timming>holdingTime){
    23c8:	20 91 14 01 	lds	r18, 0x0114
    23cc:	30 91 15 01 	lds	r19, 0x0115
    23d0:	28 17       	cp	r18, r24
    23d2:	39 07       	cpc	r19, r25
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <stateMachineSwing+0x56e>
    23d6:	17 c4       	rjmp	.+2094   	; 0x2c06 <stateMachineSwing+0xd9c>
			runningTime = workingTime - savedRunningTime;
    23d8:	80 91 1a 01 	lds	r24, 0x011A
    23dc:	90 91 1b 01 	lds	r25, 0x011B
    23e0:	20 91 07 05 	lds	r18, 0x0507
    23e4:	30 91 08 05 	lds	r19, 0x0508
    23e8:	82 1b       	sub	r24, r18
    23ea:	93 0b       	sbc	r25, r19
    23ec:	90 93 0d 05 	sts	0x050D, r25
    23f0:	80 93 0c 05 	sts	0x050C, r24
			stateSwing = STATE_OPENING_M1_COURSE_PED;
    23f4:	88 e6       	ldi	r24, 0x68	; 104
    23f6:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	08 95       	ret
		case STATE_HOLD_CLOSING_M1_PED: // photocell activated
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_HOLD_CLOSING_M1_PED\n\r");
		#endif
		
		timming++;
    2400:	20 91 09 05 	lds	r18, 0x0509
    2404:	30 91 0a 05 	lds	r19, 0x050A
    2408:	2f 5f       	subi	r18, 0xFF	; 255
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	30 93 0a 05 	sts	0x050A, r19
    2410:	20 93 09 05 	sts	0x0509, r18
		if(stepActive == INACTIVE && timming >holdingTime){
    2414:	90 91 24 01 	lds	r25, 0x0124
    2418:	91 11       	cpse	r25, r1
    241a:	1f c0       	rjmp	.+62     	; 0x245a <stateMachineSwing+0x5f0>
    241c:	40 91 14 01 	lds	r20, 0x0114
    2420:	50 91 15 01 	lds	r21, 0x0115
    2424:	42 17       	cp	r20, r18
    2426:	53 07       	cpc	r21, r19
    2428:	c0 f4       	brcc	.+48     	; 0x245a <stateMachineSwing+0x5f0>
			runningTime = workingTime - savedRunningTime;
    242a:	80 91 1a 01 	lds	r24, 0x011A
    242e:	90 91 1b 01 	lds	r25, 0x011B
    2432:	20 91 07 05 	lds	r18, 0x0507
    2436:	30 91 08 05 	lds	r19, 0x0508
    243a:	82 1b       	sub	r24, r18
    243c:	93 0b       	sbc	r25, r19
    243e:	90 93 0d 05 	sts	0x050D, r25
    2442:	80 93 0c 05 	sts	0x050C, r24
			timming=0;
    2446:	10 92 0a 05 	sts	0x050A, r1
    244a:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_OPENING_M1_COURSE_PED;
    244e:	88 e6       	ldi	r24, 0x68	; 104
    2450:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	08 95       	ret
		}
		if(stepActive == ACTIVE){
    245a:	90 91 24 01 	lds	r25, 0x0124
    245e:	91 30       	cpi	r25, 0x01	; 1
    2460:	09 f0       	breq	.+2      	; 0x2464 <stateMachineSwing+0x5fa>
    2462:	d4 c3       	rjmp	.+1960   	; 0x2c0c <stateMachineSwing+0xda2>
			timming = 0;
    2464:	10 92 0a 05 	sts	0x050A, r1
    2468:	10 92 09 05 	sts	0x0509, r1
			if(sig == SIGNAL_REMOTE_PED){
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	a1 f4       	brne	.+40     	; 0x2498 <stateMachineSwing+0x62e>
				runningTime = workingTime - savedRunningTime;
    2470:	80 91 1a 01 	lds	r24, 0x011A
    2474:	90 91 1b 01 	lds	r25, 0x011B
    2478:	20 91 07 05 	lds	r18, 0x0507
    247c:	30 91 08 05 	lds	r19, 0x0508
    2480:	82 1b       	sub	r24, r18
    2482:	93 0b       	sbc	r25, r19
    2484:	90 93 0d 05 	sts	0x050D, r25
    2488:	80 93 0c 05 	sts	0x050C, r24
				stateSwing = STATE_OPENING_M1_COURSE_PED;
    248c:	88 e6       	ldi	r24, 0x68	; 104
    248e:	80 93 0f 01 	sts	0x010F, r24
				return(1);
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	08 95       	ret
			}
			if(sig == SIGNAL_REMOTE_SWING){
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	09 f0       	breq	.+2      	; 0x249e <stateMachineSwing+0x634>
    249c:	ba c3       	rjmp	.+1908   	; 0x2c12 <stateMachineSwing+0xda8>
				if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_COURSE_M2_RAM_SWING;
    249e:	80 91 25 01 	lds	r24, 0x0125
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	31 f4       	brne	.+12     	; 0x24b2 <stateMachineSwing+0x648>
    24a6:	8b ec       	ldi	r24, 0xCB	; 203
    24a8:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
			}
			
		}
		return(0);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 95       	ret
				stateSwing = STATE_OPENING_M1_COURSE_PED;
				return(1);
			}
			if(sig == SIGNAL_REMOTE_SWING){
				if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_COURSE_M2_RAM_SWING;
				else stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
    24b2:	8d ec       	ldi	r24, 0xCD	; 205
    24b4:	80 93 0f 01 	sts	0x010F, r24
			}
			
		}
		return(0);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	08 95       	ret
		case STATE_OPENING_M1_RAM_M2_HOLD_SWING:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE_OPENING_M1_RAM_M2_HOLD_SWING\n\r");
		#endif
		
		timming++;
    24be:	80 91 09 05 	lds	r24, 0x0509
    24c2:	90 91 0a 05 	lds	r25, 0x050A
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	90 93 0a 05 	sts	0x050A, r25
    24cc:	80 93 09 05 	sts	0x0509, r24
		if(timming > ramBlowTime){
    24d0:	20 91 1e 01 	lds	r18, 0x011E
    24d4:	30 91 1f 01 	lds	r19, 0x011F
    24d8:	28 17       	cp	r18, r24
    24da:	39 07       	cpc	r19, r25
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <stateMachineSwing+0x676>
    24de:	9c c3       	rjmp	.+1848   	; 0x2c18 <stateMachineSwing+0xdae>
			timming=0; // reset timer
    24e0:	10 92 0a 05 	sts	0x050A, r1
    24e4:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    24e8:	10 92 0d 05 	sts	0x050D, r1
    24ec:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_OPENING_M1_INITIAL_M2_HOLD_SWING;
    24f0:	8a ec       	ldi	r24, 0xCA	; 202
    24f2:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	08 95       	ret
		#endif
		
		
		
		// RADIO SIGNAL RECEIVED
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	82 30       	cpi	r24, 0x02	; 2
    2500:	90 f4       	brcc	.+36     	; 0x2526 <stateMachineSwing+0x6bc>
			savedRunningTime = runningTime; // SAVE Running time
    2502:	30 93 08 05 	sts	0x0508, r19
    2506:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    250a:	10 92 0a 05 	sts	0x050A, r1
    250e:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2512:	10 92 0d 05 	sts	0x050D, r1
    2516:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_HOLD_OPENING_M1M2_SWING;
    251a:	88 ed       	ldi	r24, 0xD8	; 216
    251c:	80 93 0f 01 	sts	0x010F, r24
			return (1);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	08 95       	ret
		}
		
		
		// DELAY MODE INITIAL OPENING
		timming++;
    2526:	80 91 09 05 	lds	r24, 0x0509
    252a:	90 91 0a 05 	lds	r25, 0x050A
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	90 93 0a 05 	sts	0x050A, r25
    2534:	80 93 09 05 	sts	0x0509, r24
		if(timming > delayGatesTime){
    2538:	20 91 1c 01 	lds	r18, 0x011C
    253c:	30 91 1d 01 	lds	r19, 0x011D
    2540:	28 17       	cp	r18, r24
    2542:	39 07       	cpc	r19, r25
    2544:	08 f0       	brcs	.+2      	; 0x2548 <stateMachineSwing+0x6de>
    2546:	6b c3       	rjmp	.+1750   	; 0x2c1e <stateMachineSwing+0xdb4>
			timming=0; // reset timming
    2548:	10 92 0a 05 	sts	0x050A, r1
    254c:	10 92 09 05 	sts	0x0509, r1
			if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_COURSE_M2_RAM_SWING;
    2550:	80 91 25 01 	lds	r24, 0x0125
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	31 f4       	brne	.+12     	; 0x2564 <stateMachineSwing+0x6fa>
    2558:	8b ec       	ldi	r24, 0xCB	; 203
    255a:	80 93 0f 01 	sts	0x010F, r24
			else stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
			return(1);
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	08 95       	ret
		// DELAY MODE INITIAL OPENING
		timming++;
		if(timming > delayGatesTime){
			timming=0; // reset timming
			if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_COURSE_M2_RAM_SWING;
			else stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
    2564:	8d ec       	ldi	r24, 0xCD	; 205
    2566:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	08 95       	ret
		case STATE_OPENING_M1_COURSE_M2_RAM_SWING:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_OPENING_M1_COURSE_M2_RAM_SWING\n\r");
		#endif
		
		timming++;
    2570:	40 91 09 05 	lds	r20, 0x0509
    2574:	50 91 0a 05 	lds	r21, 0x050A
    2578:	4f 5f       	subi	r20, 0xFF	; 255
    257a:	5f 4f       	sbci	r21, 0xFF	; 255
    257c:	50 93 0a 05 	sts	0x050A, r21
    2580:	40 93 09 05 	sts	0x0509, r20
		if(timming > ramBlowTime){
    2584:	60 91 1e 01 	lds	r22, 0x011E
    2588:	70 91 1f 01 	lds	r23, 0x011F
    258c:	64 17       	cp	r22, r20
    258e:	75 07       	cpc	r23, r21
    2590:	70 f4       	brcc	.+28     	; 0x25ae <stateMachineSwing+0x744>
			timming=0; // reset timer
    2592:	10 92 0a 05 	sts	0x050A, r1
    2596:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    259a:	10 92 0d 05 	sts	0x050D, r1
    259e:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
    25a2:	8d ec       	ldi	r24, 0xCD	; 205
    25a4:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	08 95       	ret
		}
		
		// RECEIVED RADIO SIGNAL
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    25ae:	81 50       	subi	r24, 0x01	; 1
    25b0:	82 30       	cpi	r24, 0x02	; 2
    25b2:	08 f0       	brcs	.+2      	; 0x25b6 <stateMachineSwing+0x74c>
    25b4:	37 c3       	rjmp	.+1646   	; 0x2c24 <stateMachineSwing+0xdba>
			savedRunningTime = runningTime; // SAVE Running time
    25b6:	30 93 08 05 	sts	0x0508, r19
    25ba:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    25be:	10 92 0a 05 	sts	0x050A, r1
    25c2:	10 92 09 05 	sts	0x0509, r1
			stateSwing=STATE_HOLD_OPENING_M1M2_SWING;
    25c6:	88 ed       	ldi	r24, 0xD8	; 216
    25c8:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_OPENING_M1_COURSE_M2_INITIAL_SWING\n\r");
		#endif
		
		// RECEIVED RADIO SIGNAL
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	82 30       	cpi	r24, 0x02	; 2
    25d6:	70 f4       	brcc	.+28     	; 0x25f4 <stateMachineSwing+0x78a>
			savedRunningTime = runningTime; // SAVE Running time
    25d8:	30 93 08 05 	sts	0x0508, r19
    25dc:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    25e0:	10 92 0a 05 	sts	0x050A, r1
    25e4:	10 92 09 05 	sts	0x0509, r1
			stateSwing=STATE_HOLD_OPENING_M1M2_SWING;
    25e8:	88 ed       	ldi	r24, 0xD8	; 216
    25ea:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	08 95       	ret
		}
		
		// DELAY MODE INITIAL OPENING
		timming++;
    25f4:	80 91 09 05 	lds	r24, 0x0509
    25f8:	90 91 0a 05 	lds	r25, 0x050A
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	90 93 0a 05 	sts	0x050A, r25
    2602:	80 93 09 05 	sts	0x0509, r24
		if(timming > delayGatesTime){
    2606:	20 91 1c 01 	lds	r18, 0x011C
    260a:	30 91 1d 01 	lds	r19, 0x011D
    260e:	28 17       	cp	r18, r24
    2610:	39 07       	cpc	r19, r25
    2612:	08 f0       	brcs	.+2      	; 0x2616 <stateMachineSwing+0x7ac>
    2614:	0a c3       	rjmp	.+1556   	; 0x2c2a <stateMachineSwing+0xdc0>
			timming=0; // reset timming
    2616:	10 92 0a 05 	sts	0x050A, r1
    261a:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
    261e:	8e ec       	ldi	r24, 0xCE	; 206
    2620:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_OPENING_M1_COURSE_M2_COURSE_SWING\n\r");
		#endif
		
		// RECEIVED RADIO SIGNAL
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    262a:	81 50       	subi	r24, 0x01	; 1
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	70 f4       	brcc	.+28     	; 0x264c <stateMachineSwing+0x7e2>
			savedRunningTime = runningTime; // SAVE Running time
    2630:	30 93 08 05 	sts	0x0508, r19
    2634:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    2638:	10 92 0a 05 	sts	0x050A, r1
    263c:	10 92 09 05 	sts	0x0509, r1
			stateSwing=STATE_HOLD_OPENING_M1M2_SWING;
    2640:	88 ed       	ldi	r24, 0xD8	; 216
    2642:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	08 95       	ret
		}
		
		// REACH WORKING TIME OPENING
		if(runningTime > workingTime){
    264c:	80 91 1a 01 	lds	r24, 0x011A
    2650:	90 91 1b 01 	lds	r25, 0x011B
    2654:	82 17       	cp	r24, r18
    2656:	93 07       	cpc	r25, r19
    2658:	08 f0       	brcs	.+2      	; 0x265c <stateMachineSwing+0x7f2>
    265a:	ea c2       	rjmp	.+1492   	; 0x2c30 <stateMachineSwing+0xdc6>
			runningTime=0; // reset time
    265c:	10 92 0d 05 	sts	0x050D, r1
    2660:	10 92 0c 05 	sts	0x050C, r1
			timming=0;
    2664:	10 92 0a 05 	sts	0x050A, r1
    2668:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING;
    266c:	8f ec       	ldi	r24, 0xCF	; 207
    266e:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_HOLD_OPENING_M1M2_SWING\n\r");
		#endif
		
		// ONE SIGNAL REVERSE
		if(stepActive==INACTIVE){
    2678:	80 91 24 01 	lds	r24, 0x0124
    267c:	81 11       	cpse	r24, r1
    267e:	5a c0       	rjmp	.+180    	; 0x2734 <stateMachineSwing+0x8ca>
			if(cellActive == ACTIVE){
    2680:	80 91 23 01 	lds	r24, 0x0123
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	69 f5       	brne	.+90     	; 0x26e2 <stateMachineSwing+0x878>
				if(photoCellsState == CELL_FREE){// CELL ACTIVE AND BLOCKED REMAIN HERE
    2688:	80 91 02 05 	lds	r24, 0x0502
    268c:	81 11       	cpse	r24, r1
    268e:	d3 c2       	rjmp	.+1446   	; 0x2c36 <stateMachineSwing+0xdcc>
					timming++;
    2690:	80 91 09 05 	lds	r24, 0x0509
    2694:	90 91 0a 05 	lds	r25, 0x050A
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	90 93 0a 05 	sts	0x050A, r25
    269e:	80 93 09 05 	sts	0x0509, r24
					if(timming > holdingTime){
    26a2:	20 91 14 01 	lds	r18, 0x0114
    26a6:	30 91 15 01 	lds	r19, 0x0115
    26aa:	28 17       	cp	r18, r24
    26ac:	39 07       	cpc	r19, r25
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <stateMachineSwing+0x848>
    26b0:	c5 c2       	rjmp	.+1418   	; 0x2c3c <stateMachineSwing+0xdd2>
						timming=0;
    26b2:	10 92 0a 05 	sts	0x050A, r1
    26b6:	10 92 09 05 	sts	0x0509, r1
						runningTime= workingTime - savedRunningTime;
    26ba:	80 91 1a 01 	lds	r24, 0x011A
    26be:	90 91 1b 01 	lds	r25, 0x011B
    26c2:	20 91 07 05 	lds	r18, 0x0507
    26c6:	30 91 08 05 	lds	r19, 0x0508
    26ca:	82 1b       	sub	r24, r18
    26cc:	93 0b       	sbc	r25, r19
    26ce:	90 93 0d 05 	sts	0x050D, r25
    26d2:	80 93 0c 05 	sts	0x050C, r24
						stateSwing = STATE_CLOSING_M1_COURSE_M2_COURSE_SWING;
    26d6:	85 ed       	ldi	r24, 0xD5	; 213
    26d8:	80 93 0f 01 	sts	0x010F, r24
				timming=0;
				runningTime=0;
			}
			return (1);
		}
		return (0);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	08 95       	ret
						runningTime= workingTime - savedRunningTime;
						stateSwing = STATE_CLOSING_M1_COURSE_M2_COURSE_SWING;
					}
				}
				}else{
				timming++;
    26e2:	80 91 09 05 	lds	r24, 0x0509
    26e6:	90 91 0a 05 	lds	r25, 0x050A
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	90 93 0a 05 	sts	0x050A, r25
    26f0:	80 93 09 05 	sts	0x0509, r24
				if(timming > holdingTime){
    26f4:	20 91 14 01 	lds	r18, 0x0114
    26f8:	30 91 15 01 	lds	r19, 0x0115
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	08 f0       	brcs	.+2      	; 0x2704 <stateMachineSwing+0x89a>
    2702:	9f c2       	rjmp	.+1342   	; 0x2c42 <stateMachineSwing+0xdd8>
					timming=0;
    2704:	10 92 0a 05 	sts	0x050A, r1
    2708:	10 92 09 05 	sts	0x0509, r1
					runningTime=workingTime - savedRunningTime;;
    270c:	80 91 1a 01 	lds	r24, 0x011A
    2710:	90 91 1b 01 	lds	r25, 0x011B
    2714:	20 91 07 05 	lds	r18, 0x0507
    2718:	30 91 08 05 	lds	r19, 0x0508
    271c:	82 1b       	sub	r24, r18
    271e:	93 0b       	sbc	r25, r19
    2720:	90 93 0d 05 	sts	0x050D, r25
    2724:	80 93 0c 05 	sts	0x050C, r24
					stateSwing = STATE_CLOSING_M1_COURSE_M2_COURSE_SWING;
    2728:	85 ed       	ldi	r24, 0xD5	; 213
    272a:	80 93 0f 01 	sts	0x010F, r24
					return (1);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	08 95       	ret
				}
				
			}
			}else{ // STEP BY STEP JUST HOLD TO SEND TO WAITING
			timming++;
    2734:	80 91 09 05 	lds	r24, 0x0509
    2738:	90 91 0a 05 	lds	r25, 0x050A
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	90 93 0a 05 	sts	0x050A, r25
    2742:	80 93 09 05 	sts	0x0509, r24
			if(timming > holdingTime){
    2746:	20 91 14 01 	lds	r18, 0x0114
    274a:	30 91 15 01 	lds	r19, 0x0115
    274e:	28 17       	cp	r18, r24
    2750:	39 07       	cpc	r19, r25
    2752:	08 f0       	brcs	.+2      	; 0x2756 <stateMachineSwing+0x8ec>
    2754:	79 c2       	rjmp	.+1266   	; 0x2c48 <stateMachineSwing+0xdde>
				stateSwing = STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING;
    2756:	8f ec       	ldi	r24, 0xCF	; 207
    2758:	80 93 0f 01 	sts	0x010F, r24
				timming=0;
    275c:	10 92 0a 05 	sts	0x050A, r1
    2760:	10 92 09 05 	sts	0x0509, r1
				runningTime=0;
    2764:	10 92 0d 05 	sts	0x050D, r1
    2768:	10 92 0c 05 	sts	0x050C, r1
			}
			return (1);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    2772:	90 91 23 01 	lds	r25, 0x0123
    2776:	91 30       	cpi	r25, 0x01	; 1
    2778:	91 f4       	brne	.+36     	; 0x279e <stateMachineSwing+0x934>
    277a:	90 91 02 05 	lds	r25, 0x0502
    277e:	99 23       	and	r25, r25
    2780:	71 f0       	breq	.+28     	; 0x279e <stateMachineSwing+0x934>
			timming =0;
    2782:	10 92 0a 05 	sts	0x050A, r1
    2786:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    278a:	10 92 0d 05 	sts	0x050D, r1
    278e:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING;
    2792:	8f ec       	ldi	r24, 0xCF	; 207
    2794:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	08 95       	ret
		}
		
		
		// IF ALL CLEAR PROCEED
		if(autoCloseActive == ACTIVE){
    279e:	90 91 22 01 	lds	r25, 0x0122
    27a2:	91 30       	cpi	r25, 0x01	; 1
    27a4:	49 f5       	brne	.+82     	; 0x27f8 <stateMachineSwing+0x98e>
			runningTime++;
    27a6:	fd 01       	movw	r30, r26
    27a8:	32 96       	adiw	r30, 0x02	; 2
    27aa:	f0 93 0d 05 	sts	0x050D, r31
    27ae:	e0 93 0c 05 	sts	0x050C, r30
			if(runningTime > waitingTime || sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    27b2:	20 91 18 01 	lds	r18, 0x0118
    27b6:	30 91 19 01 	lds	r19, 0x0119
    27ba:	2e 17       	cp	r18, r30
    27bc:	3f 07       	cpc	r19, r31
    27be:	20 f0       	brcs	.+8      	; 0x27c8 <stateMachineSwing+0x95e>
    27c0:	81 50       	subi	r24, 0x01	; 1
    27c2:	82 30       	cpi	r24, 0x02	; 2
    27c4:	08 f0       	brcs	.+2      	; 0x27c8 <stateMachineSwing+0x95e>
    27c6:	43 c2       	rjmp	.+1158   	; 0x2c4e <stateMachineSwing+0xde4>
				runningTime=0;
    27c8:	10 92 0d 05 	sts	0x050D, r1
    27cc:	10 92 0c 05 	sts	0x050C, r1
				timming=0;
    27d0:	10 92 0a 05 	sts	0x050A, r1
    27d4:	10 92 09 05 	sts	0x0509, r1
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_HOLD_M2_RAM_SWING;
    27d8:	80 91 25 01 	lds	r24, 0x0125
    27dc:	81 30       	cpi	r24, 0x01	; 1
    27de:	31 f4       	brne	.+12     	; 0x27ec <stateMachineSwing+0x982>
    27e0:	80 ed       	ldi	r24, 0xD0	; 208
    27e2:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
			}
			return (1);
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	08 95       	ret
			runningTime++;
			if(runningTime > waitingTime || sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_HOLD_M2_RAM_SWING;
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
    27ec:	81 ed       	ldi	r24, 0xD1	; 209
    27ee:	80 93 0f 01 	sts	0x010F, r24
			}
			return (1);
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	08 95       	ret
		}
		if(autoCloseActive == INACTIVE){
    27f8:	90 91 22 01 	lds	r25, 0x0122
    27fc:	91 11       	cpse	r25, r1
    27fe:	2a c2       	rjmp	.+1108   	; 0x2c54 <stateMachineSwing+0xdea>
			if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    2800:	81 50       	subi	r24, 0x01	; 1
    2802:	82 30       	cpi	r24, 0x02	; 2
    2804:	08 f0       	brcs	.+2      	; 0x2808 <stateMachineSwing+0x99e>
    2806:	29 c2       	rjmp	.+1106   	; 0x2c5a <stateMachineSwing+0xdf0>
				runningTime=0;
    2808:	10 92 0d 05 	sts	0x050D, r1
    280c:	10 92 0c 05 	sts	0x050C, r1
				timming=0;
    2810:	10 92 0a 05 	sts	0x050A, r1
    2814:	10 92 09 05 	sts	0x0509, r1
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_HOLD_M2_RAM_SWING;
    2818:	80 91 25 01 	lds	r24, 0x0125
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	31 f4       	brne	.+12     	; 0x282c <stateMachineSwing+0x9c2>
    2820:	80 ed       	ldi	r24, 0xD0	; 208
    2822:	80 93 0f 01 	sts	0x010F, r24
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
			}
			return (1);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	08 95       	ret
		if(autoCloseActive == INACTIVE){
			if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_HOLD_M2_RAM_SWING;
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
    282c:	81 ed       	ldi	r24, 0xD1	; 209
    282e:	80 93 0f 01 	sts	0x010F, r24
			}
			return (1);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	08 95       	ret
		case STATE_CLOSING_M1_HOLD_M2_RAM_SWING:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_HOLD_M2_RAM_SWING\n\r");
		#endif
		
		timming++;
    2838:	80 91 09 05 	lds	r24, 0x0509
    283c:	90 91 0a 05 	lds	r25, 0x050A
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	90 93 0a 05 	sts	0x050A, r25
    2846:	80 93 09 05 	sts	0x0509, r24
		if(timming > ramBlowTime){
    284a:	20 91 1e 01 	lds	r18, 0x011E
    284e:	30 91 1f 01 	lds	r19, 0x011F
    2852:	28 17       	cp	r18, r24
    2854:	39 07       	cpc	r19, r25
    2856:	08 f0       	brcs	.+2      	; 0x285a <stateMachineSwing+0x9f0>
    2858:	03 c2       	rjmp	.+1030   	; 0x2c60 <stateMachineSwing+0xdf6>
			timming=0;
    285a:	10 92 0a 05 	sts	0x050A, r1
    285e:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2862:	10 92 0d 05 	sts	0x050D, r1
    2866:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
    286a:	81 ed       	ldi	r24, 0xD1	; 209
    286c:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    2876:	90 91 23 01 	lds	r25, 0x0123
    287a:	91 30       	cpi	r25, 0x01	; 1
    287c:	b1 f4       	brne	.+44     	; 0x28aa <stateMachineSwing+0xa40>
    287e:	90 91 02 05 	lds	r25, 0x0502
    2882:	99 23       	and	r25, r25
    2884:	91 f0       	breq	.+36     	; 0x28aa <stateMachineSwing+0xa40>
			savedRunningTime = runningTime;
    2886:	30 93 08 05 	sts	0x0508, r19
    288a:	20 93 07 05 	sts	0x0507, r18
			timming =0;
    288e:	10 92 0a 05 	sts	0x050A, r1
    2892:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2896:	10 92 0d 05 	sts	0x050D, r1
    289a:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_CELL_CLOSING_M1M2_SWING;
    289e:	87 ed       	ldi	r24, 0xD7	; 215
    28a0:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	08 95       	ret
		}
		
		// REMOTE SIGNAL RECEIVED
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    28aa:	81 50       	subi	r24, 0x01	; 1
    28ac:	82 30       	cpi	r24, 0x02	; 2
    28ae:	90 f4       	brcc	.+36     	; 0x28d4 <stateMachineSwing+0xa6a>
			savedRunningTime = runningTime;
    28b0:	30 93 08 05 	sts	0x0508, r19
    28b4:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    28b8:	10 92 0a 05 	sts	0x050A, r1
    28bc:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    28c0:	10 92 0d 05 	sts	0x050D, r1
    28c4:	10 92 0c 05 	sts	0x050C, r1
			stateSwing=STATE_HOLD_CLOSING_M1M2_SWING;
    28c8:	86 ed       	ldi	r24, 0xD6	; 214
    28ca:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	08 95       	ret
		}
		
		
		timming++;
    28d4:	80 91 09 05 	lds	r24, 0x0509
    28d8:	90 91 0a 05 	lds	r25, 0x050A
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	90 93 0a 05 	sts	0x050A, r25
    28e2:	80 93 09 05 	sts	0x0509, r24
		if(timming>delayGatesTime){
    28e6:	20 91 1c 01 	lds	r18, 0x011C
    28ea:	30 91 1d 01 	lds	r19, 0x011D
    28ee:	28 17       	cp	r18, r24
    28f0:	39 07       	cpc	r19, r25
    28f2:	08 f0       	brcs	.+2      	; 0x28f6 <stateMachineSwing+0xa8c>
    28f4:	b8 c1       	rjmp	.+880    	; 0x2c66 <stateMachineSwing+0xdfc>
			timming=0;
    28f6:	10 92 0a 05 	sts	0x050A, r1
    28fa:	10 92 09 05 	sts	0x0509, r1
			if(ramBlowActive == ACTIVE)stateSwing = STATE_CLOSING_M1_RAM_M2_COURSE_SWING;
    28fe:	80 91 25 01 	lds	r24, 0x0125
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	31 f4       	brne	.+12     	; 0x2912 <stateMachineSwing+0xaa8>
    2906:	82 ed       	ldi	r24, 0xD2	; 210
    2908:	80 93 0f 01 	sts	0x010F, r24
			else stateSwing=STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING;
			return(1);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	08 95       	ret
		
		timming++;
		if(timming>delayGatesTime){
			timming=0;
			if(ramBlowActive == ACTIVE)stateSwing = STATE_CLOSING_M1_RAM_M2_COURSE_SWING;
			else stateSwing=STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING;
    2912:	84 ed       	ldi	r24, 0xD4	; 212
    2914:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_RAM_M2_COURSE_SWING\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    291e:	80 91 23 01 	lds	r24, 0x0123
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	b1 f4       	brne	.+44     	; 0x2952 <stateMachineSwing+0xae8>
    2926:	80 91 02 05 	lds	r24, 0x0502
    292a:	88 23       	and	r24, r24
    292c:	91 f0       	breq	.+36     	; 0x2952 <stateMachineSwing+0xae8>
			savedRunningTime = runningTime;
    292e:	30 93 08 05 	sts	0x0508, r19
    2932:	20 93 07 05 	sts	0x0507, r18
			timming =0;
    2936:	10 92 0a 05 	sts	0x050A, r1
    293a:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    293e:	10 92 0d 05 	sts	0x050D, r1
    2942:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_CELL_CLOSING_M1M2_SWING;
    2946:	87 ed       	ldi	r24, 0xD7	; 215
    2948:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	08 95       	ret
		}
		
		
		timming++;
    2952:	80 91 09 05 	lds	r24, 0x0509
    2956:	90 91 0a 05 	lds	r25, 0x050A
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	90 93 0a 05 	sts	0x050A, r25
    2960:	80 93 09 05 	sts	0x0509, r24
		if(timming > ramBlowTime){
    2964:	20 91 1e 01 	lds	r18, 0x011E
    2968:	30 91 1f 01 	lds	r19, 0x011F
    296c:	28 17       	cp	r18, r24
    296e:	39 07       	cpc	r19, r25
    2970:	08 f0       	brcs	.+2      	; 0x2974 <stateMachineSwing+0xb0a>
    2972:	7c c1       	rjmp	.+760    	; 0x2c6c <stateMachineSwing+0xe02>
			timming=0;
    2974:	10 92 0a 05 	sts	0x050A, r1
    2978:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    297c:	10 92 0d 05 	sts	0x050D, r1
    2980:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING;
    2984:	84 ed       	ldi	r24, 0xD4	; 212
    2986:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    2990:	90 91 23 01 	lds	r25, 0x0123
    2994:	91 30       	cpi	r25, 0x01	; 1
    2996:	b1 f4       	brne	.+44     	; 0x29c4 <stateMachineSwing+0xb5a>
    2998:	90 91 02 05 	lds	r25, 0x0502
    299c:	99 23       	and	r25, r25
    299e:	91 f0       	breq	.+36     	; 0x29c4 <stateMachineSwing+0xb5a>
			savedRunningTime = runningTime;
    29a0:	30 93 08 05 	sts	0x0508, r19
    29a4:	20 93 07 05 	sts	0x0507, r18
			timming =0;
    29a8:	10 92 0a 05 	sts	0x050A, r1
    29ac:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    29b0:	10 92 0d 05 	sts	0x050D, r1
    29b4:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_CELL_CLOSING_M1M2_SWING;
    29b8:	87 ed       	ldi	r24, 0xD7	; 215
    29ba:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	08 95       	ret
		}
		
		// REMOTE SIGNAL RECEIVED
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    29c4:	81 50       	subi	r24, 0x01	; 1
    29c6:	82 30       	cpi	r24, 0x02	; 2
    29c8:	90 f4       	brcc	.+36     	; 0x29ee <stateMachineSwing+0xb84>
			savedRunningTime = runningTime;
    29ca:	30 93 08 05 	sts	0x0508, r19
    29ce:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    29d2:	10 92 0a 05 	sts	0x050A, r1
    29d6:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    29da:	10 92 0d 05 	sts	0x050D, r1
    29de:	10 92 0c 05 	sts	0x050C, r1
			stateSwing=STATE_HOLD_CLOSING_M1M2_SWING;
    29e2:	86 ed       	ldi	r24, 0xD6	; 214
    29e4:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	08 95       	ret
		}
		
		
		timming++;
    29ee:	80 91 09 05 	lds	r24, 0x0509
    29f2:	90 91 0a 05 	lds	r25, 0x050A
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	90 93 0a 05 	sts	0x050A, r25
    29fc:	80 93 09 05 	sts	0x0509, r24
		if(timming>delayGatesTime){
    2a00:	20 91 1c 01 	lds	r18, 0x011C
    2a04:	30 91 1d 01 	lds	r19, 0x011D
    2a08:	28 17       	cp	r18, r24
    2a0a:	39 07       	cpc	r19, r25
    2a0c:	08 f0       	brcs	.+2      	; 0x2a10 <stateMachineSwing+0xba6>
    2a0e:	31 c1       	rjmp	.+610    	; 0x2c72 <stateMachineSwing+0xe08>
			timming=0;
    2a10:	10 92 0a 05 	sts	0x050A, r1
    2a14:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_CLOSING_M1_COURSE_M2_COURSE_SWING;
    2a18:	85 ed       	ldi	r24, 0xD5	; 213
    2a1a:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	08 95       	ret
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CLOSING_M1_COURSE_M2_COURSE_SWING\n\r");
		#endif
		
		//STOP THE DOOR CELL BLOCKED
		if(cellActive == ACTIVE && !photoCellsState == CELL_FREE){
    2a24:	90 91 23 01 	lds	r25, 0x0123
    2a28:	91 30       	cpi	r25, 0x01	; 1
    2a2a:	b1 f4       	brne	.+44     	; 0x2a58 <stateMachineSwing+0xbee>
    2a2c:	90 91 02 05 	lds	r25, 0x0502
    2a30:	99 23       	and	r25, r25
    2a32:	91 f0       	breq	.+36     	; 0x2a58 <stateMachineSwing+0xbee>
			savedRunningTime = runningTime;
    2a34:	30 93 08 05 	sts	0x0508, r19
    2a38:	20 93 07 05 	sts	0x0507, r18
			timming =0;
    2a3c:	10 92 0a 05 	sts	0x050A, r1
    2a40:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2a44:	10 92 0d 05 	sts	0x050D, r1
    2a48:	10 92 0c 05 	sts	0x050C, r1
			#ifdef DEBUG_STATE
			USART1_sendStr("BLOCK");
			#endif
			stateSwing = STATE_CELL_CLOSING_M1M2_SWING;
    2a4c:	87 ed       	ldi	r24, 0xD7	; 215
    2a4e:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	08 95       	ret
		}
		
		// REMOTE SIGNAL RECEIVED
		if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    2a58:	81 50       	subi	r24, 0x01	; 1
    2a5a:	82 30       	cpi	r24, 0x02	; 2
    2a5c:	90 f4       	brcc	.+36     	; 0x2a82 <stateMachineSwing+0xc18>
			savedRunningTime = runningTime;
    2a5e:	30 93 08 05 	sts	0x0508, r19
    2a62:	20 93 07 05 	sts	0x0507, r18
			timming=0;
    2a66:	10 92 0a 05 	sts	0x050A, r1
    2a6a:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2a6e:	10 92 0d 05 	sts	0x050D, r1
    2a72:	10 92 0c 05 	sts	0x050C, r1
			stateSwing=STATE_HOLD_CLOSING_M1M2_SWING;
    2a76:	86 ed       	ldi	r24, 0xD6	; 214
    2a78:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	08 95       	ret
		}
		
		if(runningTime > workingTime){
    2a82:	80 91 1a 01 	lds	r24, 0x011A
    2a86:	90 91 1b 01 	lds	r25, 0x011B
    2a8a:	82 17       	cp	r24, r18
    2a8c:	93 07       	cpc	r25, r19
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <stateMachineSwing+0xc28>
    2a90:	f3 c0       	rjmp	.+486    	; 0x2c78 <stateMachineSwing+0xe0e>
			timming=0;
    2a92:	10 92 0a 05 	sts	0x050A, r1
    2a96:	10 92 09 05 	sts	0x0509, r1
			runningTime=0;
    2a9a:	10 92 0d 05 	sts	0x050D, r1
    2a9e:	10 92 0c 05 	sts	0x050C, r1
			stateSwing = STATE_CLOSED_IDLE;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	80 93 0f 01 	sts	0x010F, r24
		return(1);
		break;
		
	}
	
	return(0);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	08 95       	ret
		
		case STATE_CELL_CLOSING_M1M2_SWING:
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_CELL_CLOSING_M1M2_SWING\n\r");
		#endif
		timming++;
    2aae:	80 91 09 05 	lds	r24, 0x0509
    2ab2:	90 91 0a 05 	lds	r25, 0x050A
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	90 93 0a 05 	sts	0x050A, r25
    2abc:	80 93 09 05 	sts	0x0509, r24
		if(timming>holdingTime){
    2ac0:	20 91 14 01 	lds	r18, 0x0114
    2ac4:	30 91 15 01 	lds	r19, 0x0115
    2ac8:	28 17       	cp	r18, r24
    2aca:	39 07       	cpc	r19, r25
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <stateMachineSwing+0xc66>
    2ace:	d7 c0       	rjmp	.+430    	; 0x2c7e <stateMachineSwing+0xe14>
			runningTime = workingTime - savedRunningTime;
    2ad0:	80 91 1a 01 	lds	r24, 0x011A
    2ad4:	90 91 1b 01 	lds	r25, 0x011B
    2ad8:	20 91 07 05 	lds	r18, 0x0507
    2adc:	30 91 08 05 	lds	r19, 0x0508
    2ae0:	82 1b       	sub	r24, r18
    2ae2:	93 0b       	sbc	r25, r19
    2ae4:	90 93 0d 05 	sts	0x050D, r25
    2ae8:	80 93 0c 05 	sts	0x050C, r24
			stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
    2aec:	8e ec       	ldi	r24, 0xCE	; 206
    2aee:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	08 95       	ret
		case STATE_HOLD_CLOSING_M1M2_SWING: // photocell activated
		#ifdef DEBUG_STATE
		USART1_sendStr("STATE: STATE_HOLD_CLOSING_M1M2_SWING\n\r");
		#endif
		
		timming++;
    2af8:	20 91 09 05 	lds	r18, 0x0509
    2afc:	30 91 0a 05 	lds	r19, 0x050A
    2b00:	2f 5f       	subi	r18, 0xFF	; 255
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	30 93 0a 05 	sts	0x050A, r19
    2b08:	20 93 09 05 	sts	0x0509, r18
		if(stepActive == INACTIVE && timming >holdingTime){
    2b0c:	90 91 24 01 	lds	r25, 0x0124
    2b10:	91 11       	cpse	r25, r1
    2b12:	1f c0       	rjmp	.+62     	; 0x2b52 <stateMachineSwing+0xce8>
    2b14:	40 91 14 01 	lds	r20, 0x0114
    2b18:	50 91 15 01 	lds	r21, 0x0115
    2b1c:	42 17       	cp	r20, r18
    2b1e:	53 07       	cpc	r21, r19
    2b20:	c0 f4       	brcc	.+48     	; 0x2b52 <stateMachineSwing+0xce8>
			runningTime = workingTime - savedRunningTime;
    2b22:	80 91 1a 01 	lds	r24, 0x011A
    2b26:	90 91 1b 01 	lds	r25, 0x011B
    2b2a:	20 91 07 05 	lds	r18, 0x0507
    2b2e:	30 91 08 05 	lds	r19, 0x0508
    2b32:	82 1b       	sub	r24, r18
    2b34:	93 0b       	sbc	r25, r19
    2b36:	90 93 0d 05 	sts	0x050D, r25
    2b3a:	80 93 0c 05 	sts	0x050C, r24
			timming=0;
    2b3e:	10 92 0a 05 	sts	0x050A, r1
    2b42:	10 92 09 05 	sts	0x0509, r1
			stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
    2b46:	8e ec       	ldi	r24, 0xCE	; 206
    2b48:	80 93 0f 01 	sts	0x010F, r24
			return(1);
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	08 95       	ret
		}
		if(stepActive == ACTIVE){
    2b52:	90 91 24 01 	lds	r25, 0x0124
    2b56:	91 30       	cpi	r25, 0x01	; 1
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <stateMachineSwing+0xcf2>
    2b5a:	94 c0       	rjmp	.+296    	; 0x2c84 <stateMachineSwing+0xe1a>
			timming = 0;
    2b5c:	10 92 0a 05 	sts	0x050A, r1
    2b60:	10 92 09 05 	sts	0x0509, r1
			if(sig == SIGNAL_REMOTE_PED || sig == SIGNAL_REMOTE_SWING){
    2b64:	81 50       	subi	r24, 0x01	; 1
    2b66:	82 30       	cpi	r24, 0x02	; 2
    2b68:	08 f0       	brcs	.+2      	; 0x2b6c <stateMachineSwing+0xd02>
    2b6a:	8f c0       	rjmp	.+286    	; 0x2c8a <stateMachineSwing+0xe20>
				runningTime = workingTime - savedRunningTime;
    2b6c:	80 91 1a 01 	lds	r24, 0x011A
    2b70:	90 91 1b 01 	lds	r25, 0x011B
    2b74:	20 91 07 05 	lds	r18, 0x0507
    2b78:	30 91 08 05 	lds	r19, 0x0508
    2b7c:	82 1b       	sub	r24, r18
    2b7e:	93 0b       	sbc	r25, r19
    2b80:	90 93 0d 05 	sts	0x050D, r25
    2b84:	80 93 0c 05 	sts	0x050C, r24
				stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
    2b88:	8e ec       	ldi	r24, 0xCE	; 206
    2b8a:	80 93 0f 01 	sts	0x010F, r24
				return(1);
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	08 95       	ret
		break;
		
		
		
		default:
		stateSwing=STATE_CLOSED_IDLE;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	80 93 0f 01 	sts	0x010F, r24
		return(1);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	08 95       	ret
			if(preFlashingActive==ACTIVE)	stateSwing = STATE_PRE_FLASHING;
			else stateSwing = STATE_UNLOCK;
			return(1);
		}
		
		return(0);
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	08 95       	ret
			runningTime=0;
			stateSwing = STATE_UNLOCK;
			return(1);
			
		}
		return(0);
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	08 95       	ret
				else stateSwing = STATE_OPENING_M1_INITIAL_M2_HOLD_SWING;
				
				return (1);
			}
		}
		return(0);
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	08 95       	ret
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	08 95       	ret
			timming=0; // reset timer
			runningTime=0;
			stateSwing = STATE_OPENING_M1_INITIAL_PED;
			return(1);
		}
		return (0);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	08 95       	ret
			return(1);
		}
		
		
		
		return(0);
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	08 95       	ret
			return(1);
		}
		
		
		
		return(0);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	08 95       	ret
				timming=0;
				runningTime=0;
			}
			return (1);
		}
		return (0);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	08 95       	ret
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	08 95       	ret
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	08 95       	ret
			if(timming > holdingTime){
				stateSwing = STATE_WAITING_M1_TIME_OR_SIGNAL_PED;
				timming=0;
				runningTime=0;
			}
			return (1);
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	08 95       	ret
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_RAM_PED;
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
			}
			return (1);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	08 95       	ret
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
			}
			return (1);
		}
		
		return(0);
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	08 95       	ret
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_RAM_PED;
				else stateSwing = STATE_CLOSING_M1_INITIAL_PED;
			}
			return (1);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	08 95       	ret
			timming=0;
			runningTime=0;
			stateSwing = STATE_CLOSING_M1_INITIAL_PED;
			return(1);
		}
		return(0);
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	08 95       	ret
		return(1);
		break;
		
	}
	
	return(0);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	08 95       	ret
			stateSwing = STATE_CLOSED_IDLE;
			return(1);
		}
		
		
		return(0);
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	08 95       	ret
		if(timming>holdingTime){
			runningTime = workingTime - savedRunningTime;
			stateSwing = STATE_OPENING_M1_COURSE_PED;
			return(1);
		}
		return(0);
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	08 95       	ret
				if(ramBlowActive == ACTIVE) stateSwing = STATE_OPENING_M1_COURSE_M2_RAM_SWING;
				else stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
			}
			
		}
		return(0);
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	08 95       	ret
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	08 95       	ret
			timming=0; // reset timer
			runningTime=0;
			stateSwing = STATE_OPENING_M1_INITIAL_M2_HOLD_SWING;
			return(1);
		}
		return (0);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	08 95       	ret
			else stateSwing = STATE_OPENING_M1_COURSE_M2_INITIAL_SWING;
			return(1);
		}
		
		
		return(0);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	08 95       	ret
			timming=0;
			stateSwing=STATE_HOLD_OPENING_M1M2_SWING;
			return(1);
		}
		
		return(0);
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	08 95       	ret
			stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
			return(1);
		}
		
		
		return(0);
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	08 95       	ret
			runningTime=0; // reset time
			timming=0;
			stateSwing = STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING;
			return(1);
		}
		return(0);
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	08 95       	ret
				timming=0;
				runningTime=0;
			}
			return (1);
		}
		return (0);
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	08 95       	ret
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	08 95       	ret
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	08 95       	ret
			if(timming > holdingTime){
				stateSwing = STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING;
				timming=0;
				runningTime=0;
			}
			return (1);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	08 95       	ret
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_HOLD_M2_RAM_SWING;
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
			}
			return (1);
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	08 95       	ret
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
			}
			return (1);
		}
		
		return(0);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	08 95       	ret
				runningTime=0;
				timming=0;
				if(ramBlowActive == ACTIVE) stateSwing = STATE_CLOSING_M1_HOLD_M2_RAM_SWING;
				else stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
			}
			return (1);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	08 95       	ret
			timming=0;
			runningTime=0;
			stateSwing = STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING;
			return(1);
		}
		return(0);
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	08 95       	ret
			timming=0;
			if(ramBlowActive == ACTIVE)stateSwing = STATE_CLOSING_M1_RAM_M2_COURSE_SWING;
			else stateSwing=STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING;
			return(1);
		}
		return (0);
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	08 95       	ret
			timming=0;
			runningTime=0;
			stateSwing = STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING;
			return(1);
		}
		return(0);
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	08 95       	ret
		if(timming>delayGatesTime){
			timming=0;
			stateSwing = STATE_CLOSING_M1_COURSE_M2_COURSE_SWING;
			return(1);
		}
		return (0);
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	08 95       	ret
		return(1);
		break;
		
	}
	
	return(0);
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	08 95       	ret
		if(timming>holdingTime){
			runningTime = workingTime - savedRunningTime;
			stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
			return(1);
		}
		return(0);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	08 95       	ret
				stateSwing = STATE_OPENING_M1_COURSE_M2_COURSE_SWING;
				return(1);
			}
			
		}
		return(0);
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	08 95       	ret
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
	}
	
	return(0);
}
    2c8e:	08 95       	ret

00002c90 <decodeStateMachine>:


/************************************************************************/
/* set outputs according machine state                                                                     */
/************************************************************************/
int decodeStateMachine(uint8_t state){
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
	
	static uint8_t lastState;
	if(lastState == state) return (0);
    2c94:	90 91 06 05 	lds	r25, 0x0506
    2c98:	98 17       	cp	r25, r24
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <decodeStateMachine+0xe>
    2c9c:	b6 c4       	rjmp	.+2412   	; 0x360a <decodeStateMachine+0x97a>
	
	lastState = state;
    2c9e:	80 93 06 05 	sts	0x0506, r24
	switch(state){
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	31 97       	sbiw	r30, 0x01	; 1
    2ca8:	e7 3d       	cpi	r30, 0xD7	; 215
    2caa:	f1 05       	cpc	r31, r1
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <decodeStateMachine+0x20>
    2cae:	b0 c4       	rjmp	.+2400   	; 0x3610 <decodeStateMachine+0x980>
    2cb0:	ee 5b       	subi	r30, 0xBE	; 190
    2cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb4:	7d c6       	rjmp	.+3322   	; 0x39b0 <__tablejump2__>
		case STATE_CLOSED_IDLE:
		
		IDLE_M1;
    2cb6:	c2 e6       	ldi	r28, 0x62	; 98
    2cb8:	d0 e0       	ldi	r29, 0x00	; 0
    2cba:	88 81       	ld	r24, Y
    2cbc:	8d 7f       	andi	r24, 0xFD	; 253
    2cbe:	88 83       	st	Y, r24
    2cc0:	88 81       	ld	r24, Y
    2cc2:	8e 7f       	andi	r24, 0xFE	; 254
    2cc4:	88 83       	st	Y, r24
		IDLE_M2;
    2cc6:	88 81       	ld	r24, Y
    2cc8:	87 7f       	andi	r24, 0xF7	; 247
    2cca:	88 83       	st	Y, r24
    2ccc:	88 81       	ld	r24, Y
    2cce:	8b 7f       	andi	r24, 0xFB	; 251
    2cd0:	88 83       	st	Y, r24
		IDLE_UNLOCK;
    2cd2:	88 81       	ld	r24, Y
    2cd4:	8f 7d       	andi	r24, 0xDF	; 223
    2cd6:	88 83       	st	Y, r24
		flashingActive=INACTIVE;
    2cd8:	10 92 fa 04 	sts	0x04FA, r1
		setMotorPower(0,0);
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		IDLE_POWER_CELLS; // swicth down cells
    2ce8:	88 81       	ld	r24, Y
    2cea:	8f 77       	andi	r24, 0x7F	; 127
    2cec:	88 83       	st	Y, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
		IDLE_UNLOCK;
		flashingActive=INACTIVE;
		setMotorPower(0,0);
		IDLE_POWER_CELLS; // swicth down cells
		
		break;
    2cf2:	90 c4       	rjmp	.+2336   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_PRE_FLASHING:
		IDLE_M1;
    2cf4:	e2 e6       	ldi	r30, 0x62	; 98
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8d 7f       	andi	r24, 0xFD	; 253
    2cfc:	80 83       	st	Z, r24
    2cfe:	80 81       	ld	r24, Z
    2d00:	8e 7f       	andi	r24, 0xFE	; 254
    2d02:	80 83       	st	Z, r24
		IDLE_M2;
    2d04:	80 81       	ld	r24, Z
    2d06:	87 7f       	andi	r24, 0xF7	; 247
    2d08:	80 83       	st	Z, r24
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8b 7f       	andi	r24, 0xFB	; 251
    2d0e:	80 83       	st	Z, r24
		IDLE_UNLOCK;
    2d10:	80 81       	ld	r24, Z
    2d12:	8f 7d       	andi	r24, 0xDF	; 223
    2d14:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_PRE_FLASHING:
		IDLE_M1;
		IDLE_M2;
		IDLE_UNLOCK;
		flashingActive=ACTIVE;
		break;
    2d20:	79 c4       	rjmp	.+2290   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_UNLOCK:
		SET_UNLOCK;
    2d22:	e2 e6       	ldi	r30, 0x62	; 98
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	80 62       	ori	r24, 0x20	; 32
    2d2a:	80 83       	st	Z, r24
		IDLE_M1;
    2d2c:	80 81       	ld	r24, Z
    2d2e:	8d 7f       	andi	r24, 0xFD	; 253
    2d30:	80 83       	st	Z, r24
    2d32:	80 81       	ld	r24, Z
    2d34:	8e 7f       	andi	r24, 0xFE	; 254
    2d36:	80 83       	st	Z, r24
		IDLE_M2;
    2d38:	80 81       	ld	r24, Z
    2d3a:	87 7f       	andi	r24, 0xF7	; 247
    2d3c:	80 83       	st	Z, r24
    2d3e:	80 81       	ld	r24, Z
    2d40:	8b 7f       	andi	r24, 0xFB	; 251
    2d42:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_UNLOCK:
		SET_UNLOCK;
		IDLE_M1;
		IDLE_M2;
		flashingActive=ACTIVE;
		break;
    2d4e:	62 c4       	rjmp	.+2244   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_OPENING_M1_RAM_PED:
		setMotorPower(powerInitial,0);
    2d50:	80 91 12 01 	lds	r24, 0x0112
    2d54:	90 91 13 01 	lds	r25, 0x0113
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    2d60:	80 91 01 05 	lds	r24, 0x0501
    2d64:	88 23       	and	r24, r24
    2d66:	49 f0       	breq	.+18     	; 0x2d7a <decodeStateMachine+0xea>
    2d68:	e2 e6       	ldi	r30, 0x62	; 98
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8d 7f       	andi	r24, 0xFD	; 253
    2d70:	80 83       	st	Z, r24
    2d72:	80 81       	ld	r24, Z
    2d74:	8e 7f       	andi	r24, 0xFE	; 254
    2d76:	80 83       	st	Z, r24
    2d78:	11 c0       	rjmp	.+34     	; 0x2d9c <decodeStateMachine+0x10c>
		else CLOSE_M1;
    2d7a:	e2 e6       	ldi	r30, 0x62	; 98
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8e 7f       	andi	r24, 0xFE	; 254
    2d82:	80 83       	st	Z, r24
    2d84:	2f ef       	ldi	r18, 0xFF	; 255
    2d86:	81 ee       	ldi	r24, 0xE1	; 225
    2d88:	94 e0       	ldi	r25, 0x04	; 4
    2d8a:	21 50       	subi	r18, 0x01	; 1
    2d8c:	80 40       	sbci	r24, 0x00	; 0
    2d8e:	90 40       	sbci	r25, 0x00	; 0
    2d90:	e1 f7       	brne	.-8      	; 0x2d8a <decodeStateMachine+0xfa>
    2d92:	00 c0       	rjmp	.+0      	; 0x2d94 <decodeStateMachine+0x104>
    2d94:	00 00       	nop
    2d96:	80 81       	ld	r24, Z
    2d98:	82 60       	ori	r24, 0x02	; 2
    2d9a:	80 83       	st	Z, r24
		
		IDLE_M2;
    2d9c:	e2 e6       	ldi	r30, 0x62	; 98
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	87 7f       	andi	r24, 0xF7	; 247
    2da4:	80 83       	st	Z, r24
    2da6:	80 81       	ld	r24, Z
    2da8:	8b 7f       	andi	r24, 0xFB	; 251
    2daa:	80 83       	st	Z, r24
		SET_UNLOCK;
    2dac:	80 81       	ld	r24, Z
    2dae:	80 62       	ori	r24, 0x20	; 32
    2db0:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
		
		IDLE_M2;
		SET_UNLOCK;
		flashingActive=ACTIVE;
		
		break;
    2dbc:	2b c4       	rjmp	.+2134   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_OPENING_M1_INITIAL_PED:
		setMotorPower(powerInitial,0);
    2dbe:	80 91 12 01 	lds	r24, 0x0112
    2dc2:	90 91 13 01 	lds	r25, 0x0113
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		
		IDLE_M2;
    2dce:	e2 e6       	ldi	r30, 0x62	; 98
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	87 7f       	andi	r24, 0xF7	; 247
    2dd6:	80 83       	st	Z, r24
    2dd8:	80 81       	ld	r24, Z
    2dda:	8b 7f       	andi	r24, 0xFB	; 251
    2ddc:	80 83       	st	Z, r24
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    2dde:	80 91 01 05 	lds	r24, 0x0501
    2de2:	88 23       	and	r24, r24
    2de4:	39 f0       	breq	.+14     	; 0x2df4 <decodeStateMachine+0x164>
    2de6:	80 81       	ld	r24, Z
    2de8:	8d 7f       	andi	r24, 0xFD	; 253
    2dea:	80 83       	st	Z, r24
    2dec:	80 81       	ld	r24, Z
    2dee:	8e 7f       	andi	r24, 0xFE	; 254
    2df0:	80 83       	st	Z, r24
    2df2:	11 c0       	rjmp	.+34     	; 0x2e16 <decodeStateMachine+0x186>
		else OPEN_M1;
    2df4:	e2 e6       	ldi	r30, 0x62	; 98
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	8d 7f       	andi	r24, 0xFD	; 253
    2dfc:	80 83       	st	Z, r24
    2dfe:	2f ef       	ldi	r18, 0xFF	; 255
    2e00:	81 ee       	ldi	r24, 0xE1	; 225
    2e02:	94 e0       	ldi	r25, 0x04	; 4
    2e04:	21 50       	subi	r18, 0x01	; 1
    2e06:	80 40       	sbci	r24, 0x00	; 0
    2e08:	90 40       	sbci	r25, 0x00	; 0
    2e0a:	e1 f7       	brne	.-8      	; 0x2e04 <decodeStateMachine+0x174>
    2e0c:	00 c0       	rjmp	.+0      	; 0x2e0e <decodeStateMachine+0x17e>
    2e0e:	00 00       	nop
    2e10:	80 81       	ld	r24, Z
    2e12:	81 60       	ori	r24, 0x01	; 1
    2e14:	80 83       	st	Z, r24
		SET_UNLOCK;
    2e16:	e2 e6       	ldi	r30, 0x62	; 98
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	80 62       	ori	r24, 0x20	; 32
    2e1e:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
		IDLE_M2;
		if(!fca1State == REED_ACTIVE)IDLE_M1;
		else OPEN_M1;
		SET_UNLOCK;
		flashingActive=ACTIVE;
		break;
    2e2a:	f4 c3       	rjmp	.+2024   	; 0x3614 <decodeStateMachine+0x984>
		
		
		case STATE_OPENING_M1_COURSE_PED:
		setMotorPower(powerCourse,0);
    2e2c:	80 91 10 01 	lds	r24, 0x0110
    2e30:	90 91 11 01 	lds	r25, 0x0111
    2e34:	60 e0       	ldi	r22, 0x00	; 0
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    2e3c:	80 91 01 05 	lds	r24, 0x0501
    2e40:	88 23       	and	r24, r24
    2e42:	49 f0       	breq	.+18     	; 0x2e56 <decodeStateMachine+0x1c6>
    2e44:	e2 e6       	ldi	r30, 0x62	; 98
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	8d 7f       	andi	r24, 0xFD	; 253
    2e4c:	80 83       	st	Z, r24
    2e4e:	80 81       	ld	r24, Z
    2e50:	8e 7f       	andi	r24, 0xFE	; 254
    2e52:	80 83       	st	Z, r24
    2e54:	11 c0       	rjmp	.+34     	; 0x2e78 <decodeStateMachine+0x1e8>
		else OPEN_M1;
    2e56:	e2 e6       	ldi	r30, 0x62	; 98
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8d 7f       	andi	r24, 0xFD	; 253
    2e5e:	80 83       	st	Z, r24
    2e60:	2f ef       	ldi	r18, 0xFF	; 255
    2e62:	81 ee       	ldi	r24, 0xE1	; 225
    2e64:	94 e0       	ldi	r25, 0x04	; 4
    2e66:	21 50       	subi	r18, 0x01	; 1
    2e68:	80 40       	sbci	r24, 0x00	; 0
    2e6a:	90 40       	sbci	r25, 0x00	; 0
    2e6c:	e1 f7       	brne	.-8      	; 0x2e66 <decodeStateMachine+0x1d6>
    2e6e:	00 c0       	rjmp	.+0      	; 0x2e70 <decodeStateMachine+0x1e0>
    2e70:	00 00       	nop
    2e72:	80 81       	ld	r24, Z
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	80 83       	st	Z, r24
		IDLE_UNLOCK;
    2e78:	e2 e6       	ldi	r30, 0x62	; 98
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8f 7d       	andi	r24, 0xDF	; 223
    2e80:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
		setMotorPower(powerCourse,0);
		if(!fca1State == REED_ACTIVE)IDLE_M1;
		else OPEN_M1;
		IDLE_UNLOCK;
		flashingActive=ACTIVE;
		break;
    2e8c:	c3 c3       	rjmp	.+1926   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_WAITING_M1_TIME_OR_SIGNAL_PED:
		setMotorPower(0,0);
    2e8e:	60 e0       	ldi	r22, 0x00	; 0
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		IDLE_M1;
    2e9a:	e2 e6       	ldi	r30, 0x62	; 98
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8d 7f       	andi	r24, 0xFD	; 253
    2ea2:	80 83       	st	Z, r24
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8e 7f       	andi	r24, 0xFE	; 254
    2ea8:	80 83       	st	Z, r24
		IDLE_M2;
    2eaa:	80 81       	ld	r24, Z
    2eac:	87 7f       	andi	r24, 0xF7	; 247
    2eae:	80 83       	st	Z, r24
    2eb0:	80 81       	ld	r24, Z
    2eb2:	8b 7f       	andi	r24, 0xFB	; 251
    2eb4:	80 83       	st	Z, r24
		flashingActive=INACTIVE;
    2eb6:	10 92 fa 04 	sts	0x04FA, r1
		if(cellActive==ACTIVE){
    2eba:	80 91 23 01 	lds	r24, 0x0123
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	31 f4       	brne	.+12     	; 0x2ece <decodeStateMachine+0x23e>
			SET_POWER_CELLS;
    2ec2:	80 81       	ld	r24, Z
    2ec4:	80 68       	ori	r24, 0x80	; 128
    2ec6:	80 83       	st	Z, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a3 c3       	rjmp	.+1862   	; 0x3614 <decodeStateMachine+0x984>
		IDLE_M1;
		IDLE_M2;
		flashingActive=INACTIVE;
		if(cellActive==ACTIVE){
			SET_POWER_CELLS;
		}else IDLE_POWER_CELLS;
    2ece:	e2 e6       	ldi	r30, 0x62	; 98
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	8f 77       	andi	r24, 0x7F	; 127
    2ed6:	80 83       	st	Z, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9b c3       	rjmp	.+1846   	; 0x3614 <decodeStateMachine+0x984>
		}else IDLE_POWER_CELLS;
		
		break;
		
		case STATE_CLOSING_M1_RAM_PED:
		setMotorPower(powerInitial,0);
    2ede:	80 91 12 01 	lds	r24, 0x0112
    2ee2:	90 91 13 01 	lds	r25, 0x0113
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
    2eee:	80 91 00 05 	lds	r24, 0x0500
    2ef2:	88 23       	and	r24, r24
    2ef4:	49 f0       	breq	.+18     	; 0x2f08 <decodeStateMachine+0x278>
    2ef6:	e2 e6       	ldi	r30, 0x62	; 98
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	8d 7f       	andi	r24, 0xFD	; 253
    2efe:	80 83       	st	Z, r24
    2f00:	80 81       	ld	r24, Z
    2f02:	8e 7f       	andi	r24, 0xFE	; 254
    2f04:	80 83       	st	Z, r24
    2f06:	11 c0       	rjmp	.+34     	; 0x2f2a <decodeStateMachine+0x29a>
		else OPEN_M1;
    2f08:	e2 e6       	ldi	r30, 0x62	; 98
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8d 7f       	andi	r24, 0xFD	; 253
    2f10:	80 83       	st	Z, r24
    2f12:	2f ef       	ldi	r18, 0xFF	; 255
    2f14:	81 ee       	ldi	r24, 0xE1	; 225
    2f16:	94 e0       	ldi	r25, 0x04	; 4
    2f18:	21 50       	subi	r18, 0x01	; 1
    2f1a:	80 40       	sbci	r24, 0x00	; 0
    2f1c:	90 40       	sbci	r25, 0x00	; 0
    2f1e:	e1 f7       	brne	.-8      	; 0x2f18 <decodeStateMachine+0x288>
    2f20:	00 c0       	rjmp	.+0      	; 0x2f22 <decodeStateMachine+0x292>
    2f22:	00 00       	nop
    2f24:	80 81       	ld	r24, Z
    2f26:	81 60       	ori	r24, 0x01	; 1
    2f28:	80 83       	st	Z, r24
		IDLE_M2;
    2f2a:	e2 e6       	ldi	r30, 0x62	; 98
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	87 7f       	andi	r24, 0xF7	; 247
    2f32:	80 83       	st	Z, r24
    2f34:	80 81       	ld	r24, Z
    2f36:	8b 7f       	andi	r24, 0xFB	; 251
    2f38:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
		setMotorPower(powerInitial,0);
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
		else OPEN_M1;
		IDLE_M2;
		flashingActive=ACTIVE;
		break;
    2f44:	67 c3       	rjmp	.+1742   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CLOSING_M1_INITIAL_PED:
		setMotorPower(powerInitial,0);
    2f46:	80 91 12 01 	lds	r24, 0x0112
    2f4a:	90 91 13 01 	lds	r25, 0x0113
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
    2f56:	80 91 00 05 	lds	r24, 0x0500
    2f5a:	88 23       	and	r24, r24
    2f5c:	49 f0       	breq	.+18     	; 0x2f70 <decodeStateMachine+0x2e0>
    2f5e:	e2 e6       	ldi	r30, 0x62	; 98
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	8d 7f       	andi	r24, 0xFD	; 253
    2f66:	80 83       	st	Z, r24
    2f68:	80 81       	ld	r24, Z
    2f6a:	8e 7f       	andi	r24, 0xFE	; 254
    2f6c:	80 83       	st	Z, r24
    2f6e:	11 c0       	rjmp	.+34     	; 0x2f92 <decodeStateMachine+0x302>
		else CLOSE_M1;
    2f70:	e2 e6       	ldi	r30, 0x62	; 98
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	8e 7f       	andi	r24, 0xFE	; 254
    2f78:	80 83       	st	Z, r24
    2f7a:	2f ef       	ldi	r18, 0xFF	; 255
    2f7c:	81 ee       	ldi	r24, 0xE1	; 225
    2f7e:	94 e0       	ldi	r25, 0x04	; 4
    2f80:	21 50       	subi	r18, 0x01	; 1
    2f82:	80 40       	sbci	r24, 0x00	; 0
    2f84:	90 40       	sbci	r25, 0x00	; 0
    2f86:	e1 f7       	brne	.-8      	; 0x2f80 <decodeStateMachine+0x2f0>
    2f88:	00 c0       	rjmp	.+0      	; 0x2f8a <decodeStateMachine+0x2fa>
    2f8a:	00 00       	nop
    2f8c:	80 81       	ld	r24, Z
    2f8e:	82 60       	ori	r24, 0x02	; 2
    2f90:	80 83       	st	Z, r24
		
		IDLE_M2;
    2f92:	e2 e6       	ldi	r30, 0x62	; 98
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	87 7f       	andi	r24, 0xF7	; 247
    2f9a:	80 83       	st	Z, r24
    2f9c:	80 81       	ld	r24, Z
    2f9e:	8b 7f       	andi	r24, 0xFB	; 251
    2fa0:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
		else CLOSE_M1;
		
		IDLE_M2;
		flashingActive=ACTIVE;
		break;
    2fac:	33 c3       	rjmp	.+1638   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CLOSING_M1_COURSE_PED:
		setMotorPower(powerCourse,0);
    2fae:	80 91 10 01 	lds	r24, 0x0110
    2fb2:	90 91 11 01 	lds	r25, 0x0111
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
    2fbe:	80 91 00 05 	lds	r24, 0x0500
    2fc2:	88 23       	and	r24, r24
    2fc4:	49 f0       	breq	.+18     	; 0x2fd8 <decodeStateMachine+0x348>
    2fc6:	e2 e6       	ldi	r30, 0x62	; 98
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	8d 7f       	andi	r24, 0xFD	; 253
    2fce:	80 83       	st	Z, r24
    2fd0:	80 81       	ld	r24, Z
    2fd2:	8e 7f       	andi	r24, 0xFE	; 254
    2fd4:	80 83       	st	Z, r24
    2fd6:	11 c0       	rjmp	.+34     	; 0x2ffa <decodeStateMachine+0x36a>
		else CLOSE_M1;
    2fd8:	e2 e6       	ldi	r30, 0x62	; 98
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8e 7f       	andi	r24, 0xFE	; 254
    2fe0:	80 83       	st	Z, r24
    2fe2:	2f ef       	ldi	r18, 0xFF	; 255
    2fe4:	81 ee       	ldi	r24, 0xE1	; 225
    2fe6:	94 e0       	ldi	r25, 0x04	; 4
    2fe8:	21 50       	subi	r18, 0x01	; 1
    2fea:	80 40       	sbci	r24, 0x00	; 0
    2fec:	90 40       	sbci	r25, 0x00	; 0
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <decodeStateMachine+0x358>
    2ff0:	00 c0       	rjmp	.+0      	; 0x2ff2 <decodeStateMachine+0x362>
    2ff2:	00 00       	nop
    2ff4:	80 81       	ld	r24, Z
    2ff6:	82 60       	ori	r24, 0x02	; 2
    2ff8:	80 83       	st	Z, r24
		IDLE_M2;
    2ffa:	e2 e6       	ldi	r30, 0x62	; 98
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	87 7f       	andi	r24, 0xF7	; 247
    3002:	80 83       	st	Z, r24
    3004:	80 81       	ld	r24, Z
    3006:	8b 7f       	andi	r24, 0xFB	; 251
    3008:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
		setMotorPower(powerCourse,0);
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
		else CLOSE_M1;
		IDLE_M2;
		flashingActive=ACTIVE;
		break;
    3014:	ff c2       	rjmp	.+1534   	; 0x3614 <decodeStateMachine+0x984>
		
		
		case STATE_HOLD_CLOSING_M1_PED:
		setMotorPower(0,0);
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	70 e0       	ldi	r23, 0x00	; 0
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		IDLE_M1;
    3022:	e2 e6       	ldi	r30, 0x62	; 98
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8d 7f       	andi	r24, 0xFD	; 253
    302a:	80 83       	st	Z, r24
    302c:	80 81       	ld	r24, Z
    302e:	8e 7f       	andi	r24, 0xFE	; 254
    3030:	80 83       	st	Z, r24
		IDLE_M2;
    3032:	80 81       	ld	r24, Z
    3034:	87 7f       	andi	r24, 0xF7	; 247
    3036:	80 83       	st	Z, r24
    3038:	80 81       	ld	r24, Z
    303a:	8b 7f       	andi	r24, 0xFB	; 251
    303c:	80 83       	st	Z, r24
		flashingActive = INACTIVE;
    303e:	10 92 fa 04 	sts	0x04FA, r1
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
		setMotorPower(0,0);
		IDLE_M1;
		IDLE_M2;
		flashingActive = INACTIVE;
		
		break;
    3046:	e6 c2       	rjmp	.+1484   	; 0x3614 <decodeStateMachine+0x984>
		
		
		case STATE_CELL_CLOSING_M1_PED:
		setMotorPower(0,0);
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <setMotorPower>
		IDLE_M2;
    3054:	e2 e6       	ldi	r30, 0x62	; 98
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	87 7f       	andi	r24, 0xF7	; 247
    305c:	80 83       	st	Z, r24
    305e:	80 81       	ld	r24, Z
    3060:	8b 7f       	andi	r24, 0xFB	; 251
    3062:	80 83       	st	Z, r24
		IDLE_M1;
    3064:	80 81       	ld	r24, Z
    3066:	8d 7f       	andi	r24, 0xFD	; 253
    3068:	80 83       	st	Z, r24
    306a:	80 81       	ld	r24, Z
    306c:	8e 7f       	andi	r24, 0xFE	; 254
    306e:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CELL_CLOSING_M1_PED:
		setMotorPower(0,0);
		IDLE_M2;
		IDLE_M1;
		flashingActive=ACTIVE;
		break;
    307a:	cc c2       	rjmp	.+1432   	; 0x3614 <decodeStateMachine+0x984>
		
		
		case STATE_HOLD_OPENING_M1_PED:
		
		// ENABLE CELL IF STEP and CELL
		if(cellActive == ACTIVE){
    307c:	80 91 23 01 	lds	r24, 0x0123
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	31 f4       	brne	.+12     	; 0x3090 <decodeStateMachine+0x400>
			SET_POWER_CELLS;
    3084:	e2 e6       	ldi	r30, 0x62	; 98
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	80 68       	ori	r24, 0x80	; 128
    308c:	80 83       	st	Z, r24
    308e:	05 c0       	rjmp	.+10     	; 0x309a <decodeStateMachine+0x40a>
		}else IDLE_POWER_CELLS;
    3090:	e2 e6       	ldi	r30, 0x62	; 98
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 77       	andi	r24, 0x7F	; 127
    3098:	80 83       	st	Z, r24
		
		
		if(stepActive == ACTIVE){
    309a:	80 91 24 01 	lds	r24, 0x0124
    309e:	81 30       	cpi	r24, 0x01	; 1
    30a0:	19 f4       	brne	.+6      	; 0x30a8 <decodeStateMachine+0x418>
			flashingActive =INACTIVE;
    30a2:	10 92 fa 04 	sts	0x04FA, r1
    30a6:	03 c0       	rjmp	.+6      	; 0x30ae <decodeStateMachine+0x41e>
		}else flashingActive = ACTIVE;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	80 93 fa 04 	sts	0x04FA, r24
		
		IDLE_M1;
    30ae:	e2 e6       	ldi	r30, 0x62	; 98
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	8d 7f       	andi	r24, 0xFD	; 253
    30b6:	80 83       	st	Z, r24
    30b8:	80 81       	ld	r24, Z
    30ba:	8e 7f       	andi	r24, 0xFE	; 254
    30bc:	80 83       	st	Z, r24
		IDLE_M2;
    30be:	80 81       	ld	r24, Z
    30c0:	87 7f       	andi	r24, 0xF7	; 247
    30c2:	80 83       	st	Z, r24
    30c4:	80 81       	ld	r24, Z
    30c6:	8b 7f       	andi	r24, 0xFB	; 251
    30c8:	80 83       	st	Z, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
		}else flashingActive = ACTIVE;
		
		IDLE_M1;
		IDLE_M2;
		
		break;
    30ce:	a2 c2       	rjmp	.+1348   	; 0x3614 <decodeStateMachine+0x984>
		
		default:
		break;
		
		case STATE_OPENING_M1_RAM_M2_HOLD_SWING:
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    30d0:	80 91 01 05 	lds	r24, 0x0501
    30d4:	88 23       	and	r24, r24
    30d6:	49 f0       	breq	.+18     	; 0x30ea <decodeStateMachine+0x45a>
    30d8:	e2 e6       	ldi	r30, 0x62	; 98
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	8d 7f       	andi	r24, 0xFD	; 253
    30e0:	80 83       	st	Z, r24
    30e2:	80 81       	ld	r24, Z
    30e4:	8e 7f       	andi	r24, 0xFE	; 254
    30e6:	80 83       	st	Z, r24
    30e8:	11 c0       	rjmp	.+34     	; 0x310c <decodeStateMachine+0x47c>
		else CLOSE_M1;
    30ea:	e2 e6       	ldi	r30, 0x62	; 98
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	8e 7f       	andi	r24, 0xFE	; 254
    30f2:	80 83       	st	Z, r24
    30f4:	2f ef       	ldi	r18, 0xFF	; 255
    30f6:	81 ee       	ldi	r24, 0xE1	; 225
    30f8:	94 e0       	ldi	r25, 0x04	; 4
    30fa:	21 50       	subi	r18, 0x01	; 1
    30fc:	80 40       	sbci	r24, 0x00	; 0
    30fe:	90 40       	sbci	r25, 0x00	; 0
    3100:	e1 f7       	brne	.-8      	; 0x30fa <decodeStateMachine+0x46a>
    3102:	00 c0       	rjmp	.+0      	; 0x3104 <decodeStateMachine+0x474>
    3104:	00 00       	nop
    3106:	80 81       	ld	r24, Z
    3108:	82 60       	ori	r24, 0x02	; 2
    310a:	80 83       	st	Z, r24
		IDLE_M2;
    310c:	e2 e6       	ldi	r30, 0x62	; 98
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	87 7f       	andi	r24, 0xF7	; 247
    3114:	80 83       	st	Z, r24
    3116:	80 81       	ld	r24, Z
    3118:	8b 7f       	andi	r24, 0xFB	; 251
    311a:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
		if(!fca1State == REED_ACTIVE)IDLE_M1;
		else CLOSE_M1;
		IDLE_M2;
		flashingActive=ACTIVE;
		
		break;
    3126:	76 c2       	rjmp	.+1260   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_OPENING_M1_INITIAL_M2_HOLD_SWING:
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    3128:	80 91 01 05 	lds	r24, 0x0501
    312c:	88 23       	and	r24, r24
    312e:	49 f0       	breq	.+18     	; 0x3142 <decodeStateMachine+0x4b2>
    3130:	e2 e6       	ldi	r30, 0x62	; 98
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8d 7f       	andi	r24, 0xFD	; 253
    3138:	80 83       	st	Z, r24
    313a:	80 81       	ld	r24, Z
    313c:	8e 7f       	andi	r24, 0xFE	; 254
    313e:	80 83       	st	Z, r24
    3140:	11 c0       	rjmp	.+34     	; 0x3164 <decodeStateMachine+0x4d4>
		else OPEN_M1;
    3142:	e2 e6       	ldi	r30, 0x62	; 98
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	8d 7f       	andi	r24, 0xFD	; 253
    314a:	80 83       	st	Z, r24
    314c:	2f ef       	ldi	r18, 0xFF	; 255
    314e:	81 ee       	ldi	r24, 0xE1	; 225
    3150:	94 e0       	ldi	r25, 0x04	; 4
    3152:	21 50       	subi	r18, 0x01	; 1
    3154:	80 40       	sbci	r24, 0x00	; 0
    3156:	90 40       	sbci	r25, 0x00	; 0
    3158:	e1 f7       	brne	.-8      	; 0x3152 <decodeStateMachine+0x4c2>
    315a:	00 c0       	rjmp	.+0      	; 0x315c <decodeStateMachine+0x4cc>
    315c:	00 00       	nop
    315e:	80 81       	ld	r24, Z
    3160:	81 60       	ori	r24, 0x01	; 1
    3162:	80 83       	st	Z, r24
		IDLE_M2;
    3164:	e2 e6       	ldi	r30, 0x62	; 98
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	87 7f       	andi	r24, 0xF7	; 247
    316c:	80 83       	st	Z, r24
    316e:	80 81       	ld	r24, Z
    3170:	8b 7f       	andi	r24, 0xFB	; 251
    3172:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
		if(!fca1State == REED_ACTIVE)IDLE_M1;
		else OPEN_M1;
		IDLE_M2;
		flashingActive=ACTIVE;
		
		break;
    317e:	4a c2       	rjmp	.+1172   	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_OPENING_M1_COURSE_M2_RAM_SWING:
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    3180:	80 91 01 05 	lds	r24, 0x0501
    3184:	88 23       	and	r24, r24
    3186:	49 f0       	breq	.+18     	; 0x319a <decodeStateMachine+0x50a>
    3188:	e2 e6       	ldi	r30, 0x62	; 98
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	8d 7f       	andi	r24, 0xFD	; 253
    3190:	80 83       	st	Z, r24
    3192:	80 81       	ld	r24, Z
    3194:	8e 7f       	andi	r24, 0xFE	; 254
    3196:	80 83       	st	Z, r24
    3198:	11 c0       	rjmp	.+34     	; 0x31bc <decodeStateMachine+0x52c>
		else OPEN_M1;
    319a:	e2 e6       	ldi	r30, 0x62	; 98
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	8d 7f       	andi	r24, 0xFD	; 253
    31a2:	80 83       	st	Z, r24
    31a4:	2f ef       	ldi	r18, 0xFF	; 255
    31a6:	81 ee       	ldi	r24, 0xE1	; 225
    31a8:	94 e0       	ldi	r25, 0x04	; 4
    31aa:	21 50       	subi	r18, 0x01	; 1
    31ac:	80 40       	sbci	r24, 0x00	; 0
    31ae:	90 40       	sbci	r25, 0x00	; 0
    31b0:	e1 f7       	brne	.-8      	; 0x31aa <decodeStateMachine+0x51a>
    31b2:	00 c0       	rjmp	.+0      	; 0x31b4 <decodeStateMachine+0x524>
    31b4:	00 00       	nop
    31b6:	80 81       	ld	r24, Z
    31b8:	81 60       	ori	r24, 0x01	; 1
    31ba:	80 83       	st	Z, r24
		
		if(!fca2State == REED_ACTIVE)IDLE_M2;
    31bc:	80 91 ff 04 	lds	r24, 0x04FF
    31c0:	88 23       	and	r24, r24
    31c2:	49 f0       	breq	.+18     	; 0x31d6 <decodeStateMachine+0x546>
    31c4:	e2 e6       	ldi	r30, 0x62	; 98
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	87 7f       	andi	r24, 0xF7	; 247
    31cc:	80 83       	st	Z, r24
    31ce:	80 81       	ld	r24, Z
    31d0:	8b 7f       	andi	r24, 0xFB	; 251
    31d2:	80 83       	st	Z, r24
    31d4:	11 c0       	rjmp	.+34     	; 0x31f8 <decodeStateMachine+0x568>
		else CLOSE_M2;
    31d6:	e2 e6       	ldi	r30, 0x62	; 98
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	8b 7f       	andi	r24, 0xFB	; 251
    31de:	80 83       	st	Z, r24
    31e0:	2f ef       	ldi	r18, 0xFF	; 255
    31e2:	81 ee       	ldi	r24, 0xE1	; 225
    31e4:	94 e0       	ldi	r25, 0x04	; 4
    31e6:	21 50       	subi	r18, 0x01	; 1
    31e8:	80 40       	sbci	r24, 0x00	; 0
    31ea:	90 40       	sbci	r25, 0x00	; 0
    31ec:	e1 f7       	brne	.-8      	; 0x31e6 <decodeStateMachine+0x556>
    31ee:	00 c0       	rjmp	.+0      	; 0x31f0 <decodeStateMachine+0x560>
    31f0:	00 00       	nop
    31f2:	80 81       	ld	r24, Z
    31f4:	88 60       	ori	r24, 0x08	; 8
    31f6:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	80 93 fa 04 	sts	0x04FA, r24
		IDLE_UNLOCK;
    31fe:	e2 e6       	ldi	r30, 0x62	; 98
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8f 7d       	andi	r24, 0xDF	; 223
    3206:	80 83       	st	Z, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	90 e0       	ldi	r25, 0x00	; 0
		if(!fca2State == REED_ACTIVE)IDLE_M2;
		else CLOSE_M2;
		flashingActive=ACTIVE;
		IDLE_UNLOCK;
		
		break;
    320c:	03 c2       	rjmp	.+1030   	; 0x3614 <decodeStateMachine+0x984>
		
		
		case STATE_OPENING_M1_COURSE_M2_INITIAL_SWING:
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    320e:	80 91 01 05 	lds	r24, 0x0501
    3212:	88 23       	and	r24, r24
    3214:	49 f0       	breq	.+18     	; 0x3228 <decodeStateMachine+0x598>
    3216:	e2 e6       	ldi	r30, 0x62	; 98
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	8d 7f       	andi	r24, 0xFD	; 253
    321e:	80 83       	st	Z, r24
    3220:	80 81       	ld	r24, Z
    3222:	8e 7f       	andi	r24, 0xFE	; 254
    3224:	80 83       	st	Z, r24
    3226:	11 c0       	rjmp	.+34     	; 0x324a <decodeStateMachine+0x5ba>
		else OPEN_M1;
    3228:	e2 e6       	ldi	r30, 0x62	; 98
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	8d 7f       	andi	r24, 0xFD	; 253
    3230:	80 83       	st	Z, r24
    3232:	2f ef       	ldi	r18, 0xFF	; 255
    3234:	81 ee       	ldi	r24, 0xE1	; 225
    3236:	94 e0       	ldi	r25, 0x04	; 4
    3238:	21 50       	subi	r18, 0x01	; 1
    323a:	80 40       	sbci	r24, 0x00	; 0
    323c:	90 40       	sbci	r25, 0x00	; 0
    323e:	e1 f7       	brne	.-8      	; 0x3238 <decodeStateMachine+0x5a8>
    3240:	00 c0       	rjmp	.+0      	; 0x3242 <decodeStateMachine+0x5b2>
    3242:	00 00       	nop
    3244:	80 81       	ld	r24, Z
    3246:	81 60       	ori	r24, 0x01	; 1
    3248:	80 83       	st	Z, r24
		
		if(!fca2State == REED_ACTIVE)IDLE_M2;
    324a:	80 91 ff 04 	lds	r24, 0x04FF
    324e:	88 23       	and	r24, r24
    3250:	49 f0       	breq	.+18     	; 0x3264 <decodeStateMachine+0x5d4>
    3252:	e2 e6       	ldi	r30, 0x62	; 98
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	87 7f       	andi	r24, 0xF7	; 247
    325a:	80 83       	st	Z, r24
    325c:	80 81       	ld	r24, Z
    325e:	8b 7f       	andi	r24, 0xFB	; 251
    3260:	80 83       	st	Z, r24
    3262:	11 c0       	rjmp	.+34     	; 0x3286 <decodeStateMachine+0x5f6>
		else OPEN_M2;
    3264:	e2 e6       	ldi	r30, 0x62	; 98
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	87 7f       	andi	r24, 0xF7	; 247
    326c:	80 83       	st	Z, r24
    326e:	2f ef       	ldi	r18, 0xFF	; 255
    3270:	81 ee       	ldi	r24, 0xE1	; 225
    3272:	94 e0       	ldi	r25, 0x04	; 4
    3274:	21 50       	subi	r18, 0x01	; 1
    3276:	80 40       	sbci	r24, 0x00	; 0
    3278:	90 40       	sbci	r25, 0x00	; 0
    327a:	e1 f7       	brne	.-8      	; 0x3274 <decodeStateMachine+0x5e4>
    327c:	00 c0       	rjmp	.+0      	; 0x327e <decodeStateMachine+0x5ee>
    327e:	00 00       	nop
    3280:	80 81       	ld	r24, Z
    3282:	84 60       	ori	r24, 0x04	; 4
    3284:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	80 93 fa 04 	sts	0x04FA, r24
		IDLE_UNLOCK;
    328c:	e2 e6       	ldi	r30, 0x62	; 98
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	8f 7d       	andi	r24, 0xDF	; 223
    3294:	80 83       	st	Z, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	90 e0       	ldi	r25, 0x00	; 0
		
		if(!fca2State == REED_ACTIVE)IDLE_M2;
		else OPEN_M2;
		flashingActive=ACTIVE;
		IDLE_UNLOCK;
		break;
    329a:	bc c1       	rjmp	.+888    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_OPENING_M1_COURSE_M2_COURSE_SWING:
		if(!fca1State == REED_ACTIVE)IDLE_M1;
    329c:	80 91 01 05 	lds	r24, 0x0501
    32a0:	88 23       	and	r24, r24
    32a2:	49 f0       	breq	.+18     	; 0x32b6 <decodeStateMachine+0x626>
    32a4:	e2 e6       	ldi	r30, 0x62	; 98
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	8d 7f       	andi	r24, 0xFD	; 253
    32ac:	80 83       	st	Z, r24
    32ae:	80 81       	ld	r24, Z
    32b0:	8e 7f       	andi	r24, 0xFE	; 254
    32b2:	80 83       	st	Z, r24
    32b4:	11 c0       	rjmp	.+34     	; 0x32d8 <decodeStateMachine+0x648>
		else OPEN_M1;
    32b6:	e2 e6       	ldi	r30, 0x62	; 98
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	8d 7f       	andi	r24, 0xFD	; 253
    32be:	80 83       	st	Z, r24
    32c0:	2f ef       	ldi	r18, 0xFF	; 255
    32c2:	81 ee       	ldi	r24, 0xE1	; 225
    32c4:	94 e0       	ldi	r25, 0x04	; 4
    32c6:	21 50       	subi	r18, 0x01	; 1
    32c8:	80 40       	sbci	r24, 0x00	; 0
    32ca:	90 40       	sbci	r25, 0x00	; 0
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <decodeStateMachine+0x636>
    32ce:	00 c0       	rjmp	.+0      	; 0x32d0 <decodeStateMachine+0x640>
    32d0:	00 00       	nop
    32d2:	80 81       	ld	r24, Z
    32d4:	81 60       	ori	r24, 0x01	; 1
    32d6:	80 83       	st	Z, r24
		
		if(!fca2State == REED_ACTIVE)IDLE_M2;
    32d8:	80 91 ff 04 	lds	r24, 0x04FF
    32dc:	88 23       	and	r24, r24
    32de:	49 f0       	breq	.+18     	; 0x32f2 <decodeStateMachine+0x662>
    32e0:	e2 e6       	ldi	r30, 0x62	; 98
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	87 7f       	andi	r24, 0xF7	; 247
    32e8:	80 83       	st	Z, r24
    32ea:	80 81       	ld	r24, Z
    32ec:	8b 7f       	andi	r24, 0xFB	; 251
    32ee:	80 83       	st	Z, r24
    32f0:	11 c0       	rjmp	.+34     	; 0x3314 <decodeStateMachine+0x684>
		else OPEN_M2;
    32f2:	e2 e6       	ldi	r30, 0x62	; 98
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	87 7f       	andi	r24, 0xF7	; 247
    32fa:	80 83       	st	Z, r24
    32fc:	2f ef       	ldi	r18, 0xFF	; 255
    32fe:	81 ee       	ldi	r24, 0xE1	; 225
    3300:	94 e0       	ldi	r25, 0x04	; 4
    3302:	21 50       	subi	r18, 0x01	; 1
    3304:	80 40       	sbci	r24, 0x00	; 0
    3306:	90 40       	sbci	r25, 0x00	; 0
    3308:	e1 f7       	brne	.-8      	; 0x3302 <decodeStateMachine+0x672>
    330a:	00 c0       	rjmp	.+0      	; 0x330c <decodeStateMachine+0x67c>
    330c:	00 00       	nop
    330e:	80 81       	ld	r24, Z
    3310:	84 60       	ori	r24, 0x04	; 4
    3312:	80 83       	st	Z, r24
		flashingActive=ACTIVE;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
		else OPEN_M1;
		
		if(!fca2State == REED_ACTIVE)IDLE_M2;
		else OPEN_M2;
		flashingActive=ACTIVE;
		break;
    331e:	7a c1       	rjmp	.+756    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_WAITING_M1M2_SIGNAL_OR_SIGNAL_SWING:
		if(cellActive == ACTIVE)SET_POWER_CELLS;
    3320:	80 91 23 01 	lds	r24, 0x0123
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	31 f4       	brne	.+12     	; 0x3334 <decodeStateMachine+0x6a4>
    3328:	e2 e6       	ldi	r30, 0x62	; 98
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	80 68       	ori	r24, 0x80	; 128
    3330:	80 83       	st	Z, r24
    3332:	05 c0       	rjmp	.+10     	; 0x333e <decodeStateMachine+0x6ae>
		else IDLE_POWER_CELLS;
    3334:	e2 e6       	ldi	r30, 0x62	; 98
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	8f 77       	andi	r24, 0x7F	; 127
    333c:	80 83       	st	Z, r24
		IDLE_M1;
    333e:	e2 e6       	ldi	r30, 0x62	; 98
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	8d 7f       	andi	r24, 0xFD	; 253
    3346:	80 83       	st	Z, r24
    3348:	80 81       	ld	r24, Z
    334a:	8e 7f       	andi	r24, 0xFE	; 254
    334c:	80 83       	st	Z, r24
		IDLE_M2;
    334e:	80 81       	ld	r24, Z
    3350:	87 7f       	andi	r24, 0xF7	; 247
    3352:	80 83       	st	Z, r24
    3354:	80 81       	ld	r24, Z
    3356:	8b 7f       	andi	r24, 0xFB	; 251
    3358:	80 83       	st	Z, r24
		flashingActive=INACTIVE;
    335a:	10 92 fa 04 	sts	0x04FA, r1
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
		else IDLE_POWER_CELLS;
		IDLE_M1;
		IDLE_M2;
		flashingActive=INACTIVE;
		
		break;
    3362:	58 c1       	rjmp	.+688    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CLOSING_M1_HOLD_M2_RAM_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
    3364:	80 91 fe 04 	lds	r24, 0x04FE
    3368:	88 23       	and	r24, r24
    336a:	49 f0       	breq	.+18     	; 0x337e <decodeStateMachine+0x6ee>
    336c:	e2 e6       	ldi	r30, 0x62	; 98
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	87 7f       	andi	r24, 0xF7	; 247
    3374:	80 83       	st	Z, r24
    3376:	80 81       	ld	r24, Z
    3378:	8b 7f       	andi	r24, 0xFB	; 251
    337a:	80 83       	st	Z, r24
    337c:	11 c0       	rjmp	.+34     	; 0x33a0 <decodeStateMachine+0x710>
		else OPEN_M2;
    337e:	e2 e6       	ldi	r30, 0x62	; 98
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	87 7f       	andi	r24, 0xF7	; 247
    3386:	80 83       	st	Z, r24
    3388:	2f ef       	ldi	r18, 0xFF	; 255
    338a:	81 ee       	ldi	r24, 0xE1	; 225
    338c:	94 e0       	ldi	r25, 0x04	; 4
    338e:	21 50       	subi	r18, 0x01	; 1
    3390:	80 40       	sbci	r24, 0x00	; 0
    3392:	90 40       	sbci	r25, 0x00	; 0
    3394:	e1 f7       	brne	.-8      	; 0x338e <decodeStateMachine+0x6fe>
    3396:	00 c0       	rjmp	.+0      	; 0x3398 <decodeStateMachine+0x708>
    3398:	00 00       	nop
    339a:	80 81       	ld	r24, Z
    339c:	84 60       	ori	r24, 0x04	; 4
    339e:	80 83       	st	Z, r24
		
		flashingActive=ACTIVE;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CLOSING_M1_HOLD_M2_RAM_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
		else OPEN_M2;
		
		flashingActive=ACTIVE;
		break;
    33aa:	34 c1       	rjmp	.+616    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
    33ac:	80 91 fe 04 	lds	r24, 0x04FE
    33b0:	88 23       	and	r24, r24
    33b2:	49 f0       	breq	.+18     	; 0x33c6 <decodeStateMachine+0x736>
    33b4:	e2 e6       	ldi	r30, 0x62	; 98
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	87 7f       	andi	r24, 0xF7	; 247
    33bc:	80 83       	st	Z, r24
    33be:	80 81       	ld	r24, Z
    33c0:	8b 7f       	andi	r24, 0xFB	; 251
    33c2:	80 83       	st	Z, r24
    33c4:	11 c0       	rjmp	.+34     	; 0x33e8 <decodeStateMachine+0x758>
		else CLOSE_M2;
    33c6:	e2 e6       	ldi	r30, 0x62	; 98
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	8b 7f       	andi	r24, 0xFB	; 251
    33ce:	80 83       	st	Z, r24
    33d0:	2f ef       	ldi	r18, 0xFF	; 255
    33d2:	81 ee       	ldi	r24, 0xE1	; 225
    33d4:	94 e0       	ldi	r25, 0x04	; 4
    33d6:	21 50       	subi	r18, 0x01	; 1
    33d8:	80 40       	sbci	r24, 0x00	; 0
    33da:	90 40       	sbci	r25, 0x00	; 0
    33dc:	e1 f7       	brne	.-8      	; 0x33d6 <decodeStateMachine+0x746>
    33de:	00 c0       	rjmp	.+0      	; 0x33e0 <decodeStateMachine+0x750>
    33e0:	00 00       	nop
    33e2:	80 81       	ld	r24, Z
    33e4:	88 60       	ori	r24, 0x08	; 8
    33e6:	80 83       	st	Z, r24
		
		flashingActive=ACTIVE;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
		case STATE_CLOSING_M1_HOLD_M2_INITIAL_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
		else CLOSE_M2;
		
		flashingActive=ACTIVE;
		break;
    33f2:	10 c1       	rjmp	.+544    	; 0x3614 <decodeStateMachine+0x984>
		
		
		case STATE_CLOSING_M1_RAM_M2_COURSE_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
    33f4:	80 91 fe 04 	lds	r24, 0x04FE
    33f8:	88 23       	and	r24, r24
    33fa:	49 f0       	breq	.+18     	; 0x340e <decodeStateMachine+0x77e>
    33fc:	e2 e6       	ldi	r30, 0x62	; 98
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	87 7f       	andi	r24, 0xF7	; 247
    3404:	80 83       	st	Z, r24
    3406:	80 81       	ld	r24, Z
    3408:	8b 7f       	andi	r24, 0xFB	; 251
    340a:	80 83       	st	Z, r24
    340c:	11 c0       	rjmp	.+34     	; 0x3430 <decodeStateMachine+0x7a0>
		else CLOSE_M2;
    340e:	e2 e6       	ldi	r30, 0x62	; 98
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	8b 7f       	andi	r24, 0xFB	; 251
    3416:	80 83       	st	Z, r24
    3418:	2f ef       	ldi	r18, 0xFF	; 255
    341a:	81 ee       	ldi	r24, 0xE1	; 225
    341c:	94 e0       	ldi	r25, 0x04	; 4
    341e:	21 50       	subi	r18, 0x01	; 1
    3420:	80 40       	sbci	r24, 0x00	; 0
    3422:	90 40       	sbci	r25, 0x00	; 0
    3424:	e1 f7       	brne	.-8      	; 0x341e <decodeStateMachine+0x78e>
    3426:	00 c0       	rjmp	.+0      	; 0x3428 <decodeStateMachine+0x798>
    3428:	00 00       	nop
    342a:	80 81       	ld	r24, Z
    342c:	88 60       	ori	r24, 0x08	; 8
    342e:	80 83       	st	Z, r24
		
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
    3430:	80 91 00 05 	lds	r24, 0x0500
    3434:	88 23       	and	r24, r24
    3436:	49 f0       	breq	.+18     	; 0x344a <decodeStateMachine+0x7ba>
    3438:	e2 e6       	ldi	r30, 0x62	; 98
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	8d 7f       	andi	r24, 0xFD	; 253
    3440:	80 83       	st	Z, r24
    3442:	80 81       	ld	r24, Z
    3444:	8e 7f       	andi	r24, 0xFE	; 254
    3446:	80 83       	st	Z, r24
    3448:	11 c0       	rjmp	.+34     	; 0x346c <decodeStateMachine+0x7dc>
		else OPEN_M1;
    344a:	e2 e6       	ldi	r30, 0x62	; 98
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	8d 7f       	andi	r24, 0xFD	; 253
    3452:	80 83       	st	Z, r24
    3454:	2f ef       	ldi	r18, 0xFF	; 255
    3456:	81 ee       	ldi	r24, 0xE1	; 225
    3458:	94 e0       	ldi	r25, 0x04	; 4
    345a:	21 50       	subi	r18, 0x01	; 1
    345c:	80 40       	sbci	r24, 0x00	; 0
    345e:	90 40       	sbci	r25, 0x00	; 0
    3460:	e1 f7       	brne	.-8      	; 0x345a <decodeStateMachine+0x7ca>
    3462:	00 c0       	rjmp	.+0      	; 0x3464 <decodeStateMachine+0x7d4>
    3464:	00 00       	nop
    3466:	80 81       	ld	r24, Z
    3468:	81 60       	ori	r24, 0x01	; 1
    346a:	80 83       	st	Z, r24
		
		flashingActive=ACTIVE;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
		else OPEN_M1;
		
		flashingActive=ACTIVE;
		
		break;
    3476:	ce c0       	rjmp	.+412    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CLOSING_M1_INITIAL_M2_COURSE_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
    3478:	80 91 fe 04 	lds	r24, 0x04FE
    347c:	88 23       	and	r24, r24
    347e:	49 f0       	breq	.+18     	; 0x3492 <decodeStateMachine+0x802>
    3480:	e2 e6       	ldi	r30, 0x62	; 98
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	87 7f       	andi	r24, 0xF7	; 247
    3488:	80 83       	st	Z, r24
    348a:	80 81       	ld	r24, Z
    348c:	8b 7f       	andi	r24, 0xFB	; 251
    348e:	80 83       	st	Z, r24
    3490:	11 c0       	rjmp	.+34     	; 0x34b4 <decodeStateMachine+0x824>
		else CLOSE_M2;
    3492:	e2 e6       	ldi	r30, 0x62	; 98
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	8b 7f       	andi	r24, 0xFB	; 251
    349a:	80 83       	st	Z, r24
    349c:	2f ef       	ldi	r18, 0xFF	; 255
    349e:	81 ee       	ldi	r24, 0xE1	; 225
    34a0:	94 e0       	ldi	r25, 0x04	; 4
    34a2:	21 50       	subi	r18, 0x01	; 1
    34a4:	80 40       	sbci	r24, 0x00	; 0
    34a6:	90 40       	sbci	r25, 0x00	; 0
    34a8:	e1 f7       	brne	.-8      	; 0x34a2 <decodeStateMachine+0x812>
    34aa:	00 c0       	rjmp	.+0      	; 0x34ac <decodeStateMachine+0x81c>
    34ac:	00 00       	nop
    34ae:	80 81       	ld	r24, Z
    34b0:	88 60       	ori	r24, 0x08	; 8
    34b2:	80 83       	st	Z, r24
		
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
    34b4:	80 91 00 05 	lds	r24, 0x0500
    34b8:	88 23       	and	r24, r24
    34ba:	49 f0       	breq	.+18     	; 0x34ce <decodeStateMachine+0x83e>
    34bc:	e2 e6       	ldi	r30, 0x62	; 98
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	8d 7f       	andi	r24, 0xFD	; 253
    34c4:	80 83       	st	Z, r24
    34c6:	80 81       	ld	r24, Z
    34c8:	8e 7f       	andi	r24, 0xFE	; 254
    34ca:	80 83       	st	Z, r24
    34cc:	11 c0       	rjmp	.+34     	; 0x34f0 <decodeStateMachine+0x860>
		else CLOSE_M1;
    34ce:	e2 e6       	ldi	r30, 0x62	; 98
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	8e 7f       	andi	r24, 0xFE	; 254
    34d6:	80 83       	st	Z, r24
    34d8:	2f ef       	ldi	r18, 0xFF	; 255
    34da:	81 ee       	ldi	r24, 0xE1	; 225
    34dc:	94 e0       	ldi	r25, 0x04	; 4
    34de:	21 50       	subi	r18, 0x01	; 1
    34e0:	80 40       	sbci	r24, 0x00	; 0
    34e2:	90 40       	sbci	r25, 0x00	; 0
    34e4:	e1 f7       	brne	.-8      	; 0x34de <decodeStateMachine+0x84e>
    34e6:	00 c0       	rjmp	.+0      	; 0x34e8 <decodeStateMachine+0x858>
    34e8:	00 00       	nop
    34ea:	80 81       	ld	r24, Z
    34ec:	82 60       	ori	r24, 0x02	; 2
    34ee:	80 83       	st	Z, r24
		
		flashingActive=ACTIVE;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
		else CLOSE_M1;
		
		flashingActive=ACTIVE;
		
		break;
    34fa:	8c c0       	rjmp	.+280    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CLOSING_M1_COURSE_M2_COURSE_SWING:
		if(!fcc2State == REED_ACTIVE)IDLE_M2;
    34fc:	80 91 fe 04 	lds	r24, 0x04FE
    3500:	88 23       	and	r24, r24
    3502:	49 f0       	breq	.+18     	; 0x3516 <decodeStateMachine+0x886>
    3504:	e2 e6       	ldi	r30, 0x62	; 98
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	87 7f       	andi	r24, 0xF7	; 247
    350c:	80 83       	st	Z, r24
    350e:	80 81       	ld	r24, Z
    3510:	8b 7f       	andi	r24, 0xFB	; 251
    3512:	80 83       	st	Z, r24
    3514:	11 c0       	rjmp	.+34     	; 0x3538 <decodeStateMachine+0x8a8>
		else CLOSE_M2;
    3516:	e2 e6       	ldi	r30, 0x62	; 98
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	8b 7f       	andi	r24, 0xFB	; 251
    351e:	80 83       	st	Z, r24
    3520:	2f ef       	ldi	r18, 0xFF	; 255
    3522:	81 ee       	ldi	r24, 0xE1	; 225
    3524:	94 e0       	ldi	r25, 0x04	; 4
    3526:	21 50       	subi	r18, 0x01	; 1
    3528:	80 40       	sbci	r24, 0x00	; 0
    352a:	90 40       	sbci	r25, 0x00	; 0
    352c:	e1 f7       	brne	.-8      	; 0x3526 <decodeStateMachine+0x896>
    352e:	00 c0       	rjmp	.+0      	; 0x3530 <decodeStateMachine+0x8a0>
    3530:	00 00       	nop
    3532:	80 81       	ld	r24, Z
    3534:	88 60       	ori	r24, 0x08	; 8
    3536:	80 83       	st	Z, r24
		
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
    3538:	80 91 00 05 	lds	r24, 0x0500
    353c:	88 23       	and	r24, r24
    353e:	49 f0       	breq	.+18     	; 0x3552 <decodeStateMachine+0x8c2>
    3540:	e2 e6       	ldi	r30, 0x62	; 98
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	8d 7f       	andi	r24, 0xFD	; 253
    3548:	80 83       	st	Z, r24
    354a:	80 81       	ld	r24, Z
    354c:	8e 7f       	andi	r24, 0xFE	; 254
    354e:	80 83       	st	Z, r24
    3550:	11 c0       	rjmp	.+34     	; 0x3574 <decodeStateMachine+0x8e4>
		else CLOSE_M1;
    3552:	e2 e6       	ldi	r30, 0x62	; 98
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	8e 7f       	andi	r24, 0xFE	; 254
    355a:	80 83       	st	Z, r24
    355c:	2f ef       	ldi	r18, 0xFF	; 255
    355e:	81 ee       	ldi	r24, 0xE1	; 225
    3560:	94 e0       	ldi	r25, 0x04	; 4
    3562:	21 50       	subi	r18, 0x01	; 1
    3564:	80 40       	sbci	r24, 0x00	; 0
    3566:	90 40       	sbci	r25, 0x00	; 0
    3568:	e1 f7       	brne	.-8      	; 0x3562 <decodeStateMachine+0x8d2>
    356a:	00 c0       	rjmp	.+0      	; 0x356c <decodeStateMachine+0x8dc>
    356c:	00 00       	nop
    356e:	80 81       	ld	r24, Z
    3570:	82 60       	ori	r24, 0x02	; 2
    3572:	80 83       	st	Z, r24
		
		flashingActive=ACTIVE;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	80 93 fa 04 	sts	0x04FA, r24
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	90 e0       	ldi	r25, 0x00	; 0
		if(!fcc1State == REED_ACTIVE)IDLE_M1;
		else CLOSE_M1;
		
		flashingActive=ACTIVE;
		
		break;
    357e:	4a c0       	rjmp	.+148    	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_HOLD_CLOSING_M1M2_SWING:
		if(cellActive == ACTIVE)SET_POWER_CELLS;
    3580:	80 91 23 01 	lds	r24, 0x0123
    3584:	81 30       	cpi	r24, 0x01	; 1
    3586:	31 f4       	brne	.+12     	; 0x3594 <decodeStateMachine+0x904>
    3588:	e2 e6       	ldi	r30, 0x62	; 98
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 68       	ori	r24, 0x80	; 128
    3590:	80 83       	st	Z, r24
    3592:	05 c0       	rjmp	.+10     	; 0x359e <decodeStateMachine+0x90e>
		else IDLE_POWER_CELLS;
    3594:	e2 e6       	ldi	r30, 0x62	; 98
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	8f 77       	andi	r24, 0x7F	; 127
    359c:	80 83       	st	Z, r24
		IDLE_M1;
    359e:	e2 e6       	ldi	r30, 0x62	; 98
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	8d 7f       	andi	r24, 0xFD	; 253
    35a6:	80 83       	st	Z, r24
    35a8:	80 81       	ld	r24, Z
    35aa:	8e 7f       	andi	r24, 0xFE	; 254
    35ac:	80 83       	st	Z, r24
		IDLE_M2;
    35ae:	80 81       	ld	r24, Z
    35b0:	87 7f       	andi	r24, 0xF7	; 247
    35b2:	80 83       	st	Z, r24
    35b4:	80 81       	ld	r24, Z
    35b6:	8b 7f       	andi	r24, 0xFB	; 251
    35b8:	80 83       	st	Z, r24
		
		flashingActive = INACTIVE;
    35ba:	10 92 fa 04 	sts	0x04FA, r1
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
		else IDLE_POWER_CELLS;
		IDLE_M1;
		IDLE_M2;
		
		flashingActive = INACTIVE;
		break;
    35c2:	28 c0       	rjmp	.+80     	; 0x3614 <decodeStateMachine+0x984>
		
		case STATE_CELL_CLOSING_M1M2_SWING:
		if(cellActive == ACTIVE)SET_POWER_CELLS;
    35c4:	80 91 23 01 	lds	r24, 0x0123
    35c8:	81 30       	cpi	r24, 0x01	; 1
    35ca:	31 f4       	brne	.+12     	; 0x35d8 <decodeStateMachine+0x948>
    35cc:	e2 e6       	ldi	r30, 0x62	; 98
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	80 68       	ori	r24, 0x80	; 128
    35d4:	80 83       	st	Z, r24
    35d6:	05 c0       	rjmp	.+10     	; 0x35e2 <decodeStateMachine+0x952>
		else IDLE_POWER_CELLS;
    35d8:	e2 e6       	ldi	r30, 0x62	; 98
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	8f 77       	andi	r24, 0x7F	; 127
    35e0:	80 83       	st	Z, r24
		IDLE_M1;
    35e2:	e2 e6       	ldi	r30, 0x62	; 98
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	8d 7f       	andi	r24, 0xFD	; 253
    35ea:	80 83       	st	Z, r24
    35ec:	80 81       	ld	r24, Z
    35ee:	8e 7f       	andi	r24, 0xFE	; 254
    35f0:	80 83       	st	Z, r24
		IDLE_M2;
    35f2:	80 81       	ld	r24, Z
    35f4:	87 7f       	andi	r24, 0xF7	; 247
    35f6:	80 83       	st	Z, r24
    35f8:	80 81       	ld	r24, Z
    35fa:	8b 7f       	andi	r24, 0xFB	; 251
    35fc:	80 83       	st	Z, r24
		
		flashingActive = ACTIVE;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	80 93 fa 04 	sts	0x04FA, r24
		break;
		
		
	}
	return(1);
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
		else IDLE_POWER_CELLS;
		IDLE_M1;
		IDLE_M2;
		
		flashingActive = ACTIVE;
		break;
    3608:	05 c0       	rjmp	.+10     	; 0x3614 <decodeStateMachine+0x984>
/* set outputs according machine state                                                                     */
/************************************************************************/
int decodeStateMachine(uint8_t state){
	
	static uint8_t lastState;
	if(lastState == state) return (0);
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <decodeStateMachine+0x984>
		flashingActive = ACTIVE;
		break;
		
		
	}
	return(1);
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
}
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	08 95       	ret

0000361a <stateMachineProgram>:


/************************************************************************/
/* @ State Machine Program                                                                     */
/************************************************************************/
void stateMachineProgram (uint8_t sig){
    361a:	cf 93       	push	r28
    361c:	c8 2f       	mov	r28, r24
	
	
	switch(stateProgram){
    361e:	40 91 0e 01 	lds	r20, 0x010E
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	fa 01       	movw	r30, r20
    3626:	31 97       	sbiw	r30, 0x01	; 1
    3628:	ec 32       	cpi	r30, 0x2C	; 44
    362a:	f1 05       	cpc	r31, r1
    362c:	08 f0       	brcs	.+2      	; 0x3630 <stateMachineProgram+0x16>
    362e:	a0 c1       	rjmp	.+832    	; 0x3970 <stateMachineProgram+0x356>
    3630:	e7 5e       	subi	r30, 0xE7	; 231
    3632:	fc 4f       	sbci	r31, 0xFC	; 252
    3634:	bd c1       	rjmp	.+890    	; 0x39b0 <__tablejump2__>
		
		case PRG_STATE_RUN:
		if(sig == BUTTON_PRG) stateProgram = PRG_STATE_SETUP_POWER_INI;
    3636:	87 30       	cpi	r24, 0x07	; 7
    3638:	09 f0       	breq	.+2      	; 0x363c <stateMachineProgram+0x22>
    363a:	a4 c1       	rjmp	.+840    	; 0x3984 <stateMachineProgram+0x36a>
    363c:	80 e1       	ldi	r24, 0x10	; 16
    363e:	80 93 0e 01 	sts	0x010E, r24
    3642:	a0 c1       	rjmp	.+832    	; 0x3984 <stateMachineProgram+0x36a>
		case PRG_STATE_SETUP_POWER_INI:
		#ifdef DEBUG_STATE
		USART1_sendStr("PRG : POWER_INI\n\r");
		#endif
		
		if(sig == BUTTON_UP) setPWMInitial(1);
    3644:	85 30       	cpi	r24, 0x05	; 5
    3646:	21 f4       	brne	.+8      	; 0x3650 <stateMachineProgram+0x36>
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <setPWMInitial>
    364e:	0c c0       	rjmp	.+24     	; 0x3668 <stateMachineProgram+0x4e>
		if(sig == BUTTON_DOWN) setPWMInitial(0);
    3650:	86 30       	cpi	r24, 0x06	; 6
    3652:	21 f4       	brne	.+8      	; 0x365c <stateMachineProgram+0x42>
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <setPWMInitial>
    365a:	94 c1       	rjmp	.+808    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_POWER_COU;
    365c:	84 30       	cpi	r24, 0x04	; 4
    365e:	21 f4       	brne	.+8      	; 0x3668 <stateMachineProgram+0x4e>
    3660:	81 e1       	ldi	r24, 0x11	; 17
    3662:	80 93 0e 01 	sts	0x010E, r24
    3666:	8e c1       	rjmp	.+796    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3668:	c3 30       	cpi	r28, 0x03	; 3
    366a:	09 f0       	breq	.+2      	; 0x366e <stateMachineProgram+0x54>
    366c:	8b c1       	rjmp	.+790    	; 0x3984 <stateMachineProgram+0x36a>
    366e:	8d e0       	ldi	r24, 0x0D	; 13
    3670:	80 93 0e 01 	sts	0x010E, r24
    3674:	87 c1       	rjmp	.+782    	; 0x3984 <stateMachineProgram+0x36a>
		case PRG_STATE_SETUP_POWER_COU:
		#ifdef DEBUG_STATE
		USART1_sendStr("PRG : POWER_COU\n\r");
		#endif
		
		if(sig == BUTTON_UP) setPWMCourse(1);
    3676:	85 30       	cpi	r24, 0x05	; 5
    3678:	21 f4       	brne	.+8      	; 0x3682 <stateMachineProgram+0x68>
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <setPWMCourse>
    3680:	0c c0       	rjmp	.+24     	; 0x369a <stateMachineProgram+0x80>
		if(sig == BUTTON_DOWN) setPWMCourse(0);
    3682:	86 30       	cpi	r24, 0x06	; 6
    3684:	21 f4       	brne	.+8      	; 0x368e <stateMachineProgram+0x74>
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <setPWMCourse>
    368c:	7b c1       	rjmp	.+758    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_PREFLASHING_MODE;
    368e:	84 30       	cpi	r24, 0x04	; 4
    3690:	21 f4       	brne	.+8      	; 0x369a <stateMachineProgram+0x80>
    3692:	82 e0       	ldi	r24, 0x02	; 2
    3694:	80 93 0e 01 	sts	0x010E, r24
    3698:	75 c1       	rjmp	.+746    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    369a:	c3 30       	cpi	r28, 0x03	; 3
    369c:	09 f0       	breq	.+2      	; 0x36a0 <stateMachineProgram+0x86>
    369e:	72 c1       	rjmp	.+740    	; 0x3984 <stateMachineProgram+0x36a>
    36a0:	8d e0       	ldi	r24, 0x0D	; 13
    36a2:	80 93 0e 01 	sts	0x010E, r24
    36a6:	6e c1       	rjmp	.+732    	; 0x3984 <stateMachineProgram+0x36a>
		case PRG_STATE_SETUP_PREFLASHING_MODE:
		#ifdef DEBUG_STATE
		USART1_sendStr("PRG : PRE_FLASH_MODE\n\r");
		#endif
		
		if(sig == BUTTON_UP) preFlashingActive=1;
    36a8:	85 30       	cpi	r24, 0x05	; 5
    36aa:	41 f4       	brne	.+16     	; 0x36bc <stateMachineProgram+0xa2>
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	80 93 26 01 	sts	0x0126, r24
		if(sig == BUTTON_DOWN) preFlashingActive=0;
		if(preFlashingActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_PREFLASHING_TIME;
    36b2:	80 91 26 01 	lds	r24, 0x0126
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	c9 f4       	brne	.+50     	; 0x36ec <stateMachineProgram+0xd2>
    36ba:	5e c1       	rjmp	.+700    	; 0x3978 <stateMachineProgram+0x35e>
		#ifdef DEBUG_STATE
		USART1_sendStr("PRG : PRE_FLASH_MODE\n\r");
		#endif
		
		if(sig == BUTTON_UP) preFlashingActive=1;
		if(sig == BUTTON_DOWN) preFlashingActive=0;
    36bc:	86 30       	cpi	r24, 0x06	; 6
    36be:	39 f4       	brne	.+14     	; 0x36ce <stateMachineProgram+0xb4>
    36c0:	10 92 26 01 	sts	0x0126, r1
		if(preFlashingActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_PREFLASHING_TIME;
    36c4:	80 91 26 01 	lds	r24, 0x0126
		if(preFlashingActive == INACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_UNLOCK_TIME;
    36c8:	80 91 26 01 	lds	r24, 0x0126
    36cc:	19 c0       	rjmp	.+50     	; 0x3700 <stateMachineProgram+0xe6>
		USART1_sendStr("PRG : PRE_FLASH_MODE\n\r");
		#endif
		
		if(sig == BUTTON_UP) preFlashingActive=1;
		if(sig == BUTTON_DOWN) preFlashingActive=0;
		if(preFlashingActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_PREFLASHING_TIME;
    36ce:	80 91 26 01 	lds	r24, 0x0126
    36d2:	81 30       	cpi	r24, 0x01	; 1
    36d4:	59 f4       	brne	.+22     	; 0x36ec <stateMachineProgram+0xd2>
    36d6:	c4 30       	cpi	r28, 0x04	; 4
    36d8:	09 f0       	breq	.+2      	; 0x36dc <stateMachineProgram+0xc2>
    36da:	4e c1       	rjmp	.+668    	; 0x3978 <stateMachineProgram+0x35e>
    36dc:	83 e0       	ldi	r24, 0x03	; 3
    36de:	80 93 0e 01 	sts	0x010E, r24
		if(preFlashingActive == INACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_UNLOCK_TIME;
    36e2:	80 91 26 01 	lds	r24, 0x0126
    36e6:	88 23       	and	r24, r24
    36e8:	39 f0       	breq	.+14     	; 0x36f8 <stateMachineProgram+0xde>
    36ea:	4c c1       	rjmp	.+664    	; 0x3984 <stateMachineProgram+0x36a>
    36ec:	80 91 26 01 	lds	r24, 0x0126
    36f0:	81 11       	cpse	r24, r1
    36f2:	06 c0       	rjmp	.+12     	; 0x3700 <stateMachineProgram+0xe6>
    36f4:	c4 30       	cpi	r28, 0x04	; 4
    36f6:	21 f4       	brne	.+8      	; 0x3700 <stateMachineProgram+0xe6>
    36f8:	84 e0       	ldi	r24, 0x04	; 4
    36fa:	80 93 0e 01 	sts	0x010E, r24
    36fe:	42 c1       	rjmp	.+644    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3700:	c3 30       	cpi	r28, 0x03	; 3
    3702:	09 f0       	breq	.+2      	; 0x3706 <stateMachineProgram+0xec>
    3704:	3f c1       	rjmp	.+638    	; 0x3984 <stateMachineProgram+0x36a>
    3706:	8d e0       	ldi	r24, 0x0D	; 13
    3708:	80 93 0e 01 	sts	0x010E, r24
    370c:	3b c1       	rjmp	.+630    	; 0x3984 <stateMachineProgram+0x36a>
		
		break;
		
		
		case PRG_STATE_SETUP_PREFLASHING_TIME:
		if(sig == BUTTON_UP) setTimePreFlashing(1);
    370e:	85 30       	cpi	r24, 0x05	; 5
    3710:	21 f4       	brne	.+8      	; 0x371a <stateMachineProgram+0x100>
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <setTimePreFlashing>
    3718:	0c c0       	rjmp	.+24     	; 0x3732 <stateMachineProgram+0x118>
		if(sig == BUTTON_DOWN) setTimePreFlashing(0);
    371a:	86 30       	cpi	r24, 0x06	; 6
    371c:	21 f4       	brne	.+8      	; 0x3726 <stateMachineProgram+0x10c>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <setTimePreFlashing>
    3724:	2f c1       	rjmp	.+606    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_UNLOCK_TIME;
    3726:	84 30       	cpi	r24, 0x04	; 4
    3728:	21 f4       	brne	.+8      	; 0x3732 <stateMachineProgram+0x118>
    372a:	84 e0       	ldi	r24, 0x04	; 4
    372c:	80 93 0e 01 	sts	0x010E, r24
    3730:	29 c1       	rjmp	.+594    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3732:	c3 30       	cpi	r28, 0x03	; 3
    3734:	09 f0       	breq	.+2      	; 0x3738 <stateMachineProgram+0x11e>
    3736:	26 c1       	rjmp	.+588    	; 0x3984 <stateMachineProgram+0x36a>
    3738:	8d e0       	ldi	r24, 0x0D	; 13
    373a:	80 93 0e 01 	sts	0x010E, r24
    373e:	22 c1       	rjmp	.+580    	; 0x3984 <stateMachineProgram+0x36a>
		case PRG_STATE_SETUP_UNLOCK_TIME:
		#ifdef DEBUG_STATE
		USART1_sendStr("PRG : UNLOCK_TIME\n\r");
		#endif
		
		if(sig == BUTTON_UP) setTimeUnlock(1);
    3740:	85 30       	cpi	r24, 0x05	; 5
    3742:	21 f4       	brne	.+8      	; 0x374c <stateMachineProgram+0x132>
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <setTimeUnlock>
    374a:	0c c0       	rjmp	.+24     	; 0x3764 <stateMachineProgram+0x14a>
		if(sig == BUTTON_DOWN) setTimeUnlock(0); // Secrease
    374c:	86 30       	cpi	r24, 0x06	; 6
    374e:	21 f4       	brne	.+8      	; 0x3758 <stateMachineProgram+0x13e>
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <setTimeUnlock>
    3756:	16 c1       	rjmp	.+556    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_RAMBLOW_MODE;
    3758:	84 30       	cpi	r24, 0x04	; 4
    375a:	21 f4       	brne	.+8      	; 0x3764 <stateMachineProgram+0x14a>
    375c:	8c e2       	ldi	r24, 0x2C	; 44
    375e:	80 93 0e 01 	sts	0x010E, r24
    3762:	10 c1       	rjmp	.+544    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3764:	c3 30       	cpi	r28, 0x03	; 3
    3766:	09 f0       	breq	.+2      	; 0x376a <stateMachineProgram+0x150>
    3768:	0d c1       	rjmp	.+538    	; 0x3984 <stateMachineProgram+0x36a>
    376a:	8d e0       	ldi	r24, 0x0D	; 13
    376c:	80 93 0e 01 	sts	0x010E, r24
    3770:	09 c1       	rjmp	.+530    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		case PRG_STATE_SETUP_RAMBLOW_MODE:
		if(sig == BUTTON_UP) ramBlowActive=1;
    3772:	85 30       	cpi	r24, 0x05	; 5
    3774:	41 f4       	brne	.+16     	; 0x3786 <stateMachineProgram+0x16c>
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	80 93 25 01 	sts	0x0125, r24
		if(sig == BUTTON_DOWN) ramBlowActive=0;
		if(ramBlowActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_RAMBLOW_TIME;
    377c:	80 91 25 01 	lds	r24, 0x0125
    3780:	81 30       	cpi	r24, 0x01	; 1
    3782:	c9 f4       	brne	.+50     	; 0x37b6 <stateMachineProgram+0x19c>
    3784:	fc c0       	rjmp	.+504    	; 0x397e <stateMachineProgram+0x364>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
		break;
		
		case PRG_STATE_SETUP_RAMBLOW_MODE:
		if(sig == BUTTON_UP) ramBlowActive=1;
		if(sig == BUTTON_DOWN) ramBlowActive=0;
    3786:	86 30       	cpi	r24, 0x06	; 6
    3788:	39 f4       	brne	.+14     	; 0x3798 <stateMachineProgram+0x17e>
    378a:	10 92 25 01 	sts	0x0125, r1
		if(ramBlowActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_RAMBLOW_TIME;
    378e:	80 91 25 01 	lds	r24, 0x0125
		if(ramBlowActive == INACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_DELAY_GATES_TIME;
    3792:	80 91 25 01 	lds	r24, 0x0125
    3796:	19 c0       	rjmp	.+50     	; 0x37ca <stateMachineProgram+0x1b0>
		break;
		
		case PRG_STATE_SETUP_RAMBLOW_MODE:
		if(sig == BUTTON_UP) ramBlowActive=1;
		if(sig == BUTTON_DOWN) ramBlowActive=0;
		if(ramBlowActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_RAMBLOW_TIME;
    3798:	80 91 25 01 	lds	r24, 0x0125
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	59 f4       	brne	.+22     	; 0x37b6 <stateMachineProgram+0x19c>
    37a0:	c4 30       	cpi	r28, 0x04	; 4
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <stateMachineProgram+0x18c>
    37a4:	ec c0       	rjmp	.+472    	; 0x397e <stateMachineProgram+0x364>
    37a6:	85 e0       	ldi	r24, 0x05	; 5
    37a8:	80 93 0e 01 	sts	0x010E, r24
		if(ramBlowActive == INACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_DELAY_GATES_TIME;
    37ac:	80 91 25 01 	lds	r24, 0x0125
    37b0:	88 23       	and	r24, r24
    37b2:	39 f0       	breq	.+14     	; 0x37c2 <stateMachineProgram+0x1a8>
    37b4:	e7 c0       	rjmp	.+462    	; 0x3984 <stateMachineProgram+0x36a>
    37b6:	80 91 25 01 	lds	r24, 0x0125
    37ba:	81 11       	cpse	r24, r1
    37bc:	06 c0       	rjmp	.+12     	; 0x37ca <stateMachineProgram+0x1b0>
    37be:	c4 30       	cpi	r28, 0x04	; 4
    37c0:	21 f4       	brne	.+8      	; 0x37ca <stateMachineProgram+0x1b0>
    37c2:	86 e0       	ldi	r24, 0x06	; 6
    37c4:	80 93 0e 01 	sts	0x010E, r24
    37c8:	dd c0       	rjmp	.+442    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_DELAY_GATES_TIME; // got to next
    37ca:	c3 30       	cpi	r28, 0x03	; 3
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <stateMachineProgram+0x1b6>
    37ce:	da c0       	rjmp	.+436    	; 0x3984 <stateMachineProgram+0x36a>
    37d0:	86 e0       	ldi	r24, 0x06	; 6
    37d2:	80 93 0e 01 	sts	0x010E, r24
    37d6:	d6 c0       	rjmp	.+428    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		
		case PRG_STATE_SETUP_RAMBLOW_TIME:
		if(sig == BUTTON_UP) setTimeRamBlow(1);
    37d8:	85 30       	cpi	r24, 0x05	; 5
    37da:	21 f4       	brne	.+8      	; 0x37e4 <stateMachineProgram+0x1ca>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <setTimeRamBlow>
    37e2:	0c c0       	rjmp	.+24     	; 0x37fc <stateMachineProgram+0x1e2>
		if(sig == BUTTON_DOWN) setTimeRamBlow(0); // DECREASE
    37e4:	86 30       	cpi	r24, 0x06	; 6
    37e6:	21 f4       	brne	.+8      	; 0x37f0 <stateMachineProgram+0x1d6>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <setTimeRamBlow>
    37ee:	ca c0       	rjmp	.+404    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_DELAY_GATES_TIME;
    37f0:	84 30       	cpi	r24, 0x04	; 4
    37f2:	21 f4       	brne	.+8      	; 0x37fc <stateMachineProgram+0x1e2>
    37f4:	86 e0       	ldi	r24, 0x06	; 6
    37f6:	80 93 0e 01 	sts	0x010E, r24
    37fa:	c4 c0       	rjmp	.+392    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    37fc:	c3 30       	cpi	r28, 0x03	; 3
    37fe:	09 f0       	breq	.+2      	; 0x3802 <stateMachineProgram+0x1e8>
    3800:	c1 c0       	rjmp	.+386    	; 0x3984 <stateMachineProgram+0x36a>
    3802:	8d e0       	ldi	r24, 0x0D	; 13
    3804:	80 93 0e 01 	sts	0x010E, r24
    3808:	bd c0       	rjmp	.+378    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		
		case PRG_STATE_SETUP_DELAY_GATES_TIME:
		if(sig == BUTTON_UP) setTimeDelayGates(1); // INCREASE
    380a:	85 30       	cpi	r24, 0x05	; 5
    380c:	21 f4       	brne	.+8      	; 0x3816 <stateMachineProgram+0x1fc>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <setTimeDelayGates>
    3814:	0c c0       	rjmp	.+24     	; 0x382e <stateMachineProgram+0x214>
		if(sig == BUTTON_DOWN) setTimeDelayGates(0); // decrease
    3816:	86 30       	cpi	r24, 0x06	; 6
    3818:	21 f4       	brne	.+8      	; 0x3822 <stateMachineProgram+0x208>
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <setTimeDelayGates>
    3820:	b1 c0       	rjmp	.+354    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_WORKING_TIME;
    3822:	84 30       	cpi	r24, 0x04	; 4
    3824:	21 f4       	brne	.+8      	; 0x382e <stateMachineProgram+0x214>
    3826:	87 e0       	ldi	r24, 0x07	; 7
    3828:	80 93 0e 01 	sts	0x010E, r24
    382c:	ab c0       	rjmp	.+342    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    382e:	c3 30       	cpi	r28, 0x03	; 3
    3830:	09 f0       	breq	.+2      	; 0x3834 <stateMachineProgram+0x21a>
    3832:	a8 c0       	rjmp	.+336    	; 0x3984 <stateMachineProgram+0x36a>
    3834:	8d e0       	ldi	r24, 0x0D	; 13
    3836:	80 93 0e 01 	sts	0x010E, r24
    383a:	a4 c0       	rjmp	.+328    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		
		case PRG_STATE_SETUP_WORKING_TIME:
		if(sig == BUTTON_UP) setTimeWorking(1); // INCREASE
    383c:	85 30       	cpi	r24, 0x05	; 5
    383e:	21 f4       	brne	.+8      	; 0x3848 <stateMachineProgram+0x22e>
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <setTimeWorking>
    3846:	0c c0       	rjmp	.+24     	; 0x3860 <stateMachineProgram+0x246>
		if(sig == BUTTON_DOWN)setTimeWorking(0); // decrease
    3848:	86 30       	cpi	r24, 0x06	; 6
    384a:	21 f4       	brne	.+8      	; 0x3854 <stateMachineProgram+0x23a>
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <setTimeWorking>
    3852:	98 c0       	rjmp	.+304    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_WAITNG_TIME;
    3854:	84 30       	cpi	r24, 0x04	; 4
    3856:	21 f4       	brne	.+8      	; 0x3860 <stateMachineProgram+0x246>
    3858:	88 e0       	ldi	r24, 0x08	; 8
    385a:	80 93 0e 01 	sts	0x010E, r24
    385e:	92 c0       	rjmp	.+292    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3860:	c3 30       	cpi	r28, 0x03	; 3
    3862:	09 f0       	breq	.+2      	; 0x3866 <stateMachineProgram+0x24c>
    3864:	8f c0       	rjmp	.+286    	; 0x3984 <stateMachineProgram+0x36a>
    3866:	8d e0       	ldi	r24, 0x0D	; 13
    3868:	80 93 0e 01 	sts	0x010E, r24
    386c:	8b c0       	rjmp	.+278    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		
		
		case PRG_STATE_SETUP_WAITNG_TIME:
		if(sig == BUTTON_UP) setTimeWating(1); // INCREASE
    386e:	85 30       	cpi	r24, 0x05	; 5
    3870:	21 f4       	brne	.+8      	; 0x387a <stateMachineProgram+0x260>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <setTimeWating>
    3878:	0c c0       	rjmp	.+24     	; 0x3892 <stateMachineProgram+0x278>
		if(sig == BUTTON_DOWN) setTimeWating(0); // decrease
    387a:	86 30       	cpi	r24, 0x06	; 6
    387c:	21 f4       	brne	.+8      	; 0x3886 <stateMachineProgram+0x26c>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <setTimeWating>
    3884:	7f c0       	rjmp	.+254    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_HOLD_TIME;
    3886:	84 30       	cpi	r24, 0x04	; 4
    3888:	21 f4       	brne	.+8      	; 0x3892 <stateMachineProgram+0x278>
    388a:	89 e0       	ldi	r24, 0x09	; 9
    388c:	80 93 0e 01 	sts	0x010E, r24
    3890:	79 c0       	rjmp	.+242    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3892:	c3 30       	cpi	r28, 0x03	; 3
    3894:	09 f0       	breq	.+2      	; 0x3898 <stateMachineProgram+0x27e>
    3896:	76 c0       	rjmp	.+236    	; 0x3984 <stateMachineProgram+0x36a>
    3898:	8d e0       	ldi	r24, 0x0D	; 13
    389a:	80 93 0e 01 	sts	0x010E, r24
    389e:	72 c0       	rjmp	.+228    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		case PRG_STATE_SETUP_HOLD_TIME:
		if(sig == BUTTON_UP) setTimeHold(1); // INCREASE
    38a0:	85 30       	cpi	r24, 0x05	; 5
    38a2:	21 f4       	brne	.+8      	; 0x38ac <stateMachineProgram+0x292>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <setTimeHold>
    38aa:	0c c0       	rjmp	.+24     	; 0x38c4 <stateMachineProgram+0x2aa>
		if(sig == BUTTON_DOWN) setTimeHold(0); // decrease
    38ac:	86 30       	cpi	r24, 0x06	; 6
    38ae:	21 f4       	brne	.+8      	; 0x38b8 <stateMachineProgram+0x29e>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <setTimeHold>
    38b6:	66 c0       	rjmp	.+204    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_PHOTOCELL_MODE;
    38b8:	84 30       	cpi	r24, 0x04	; 4
    38ba:	21 f4       	brne	.+8      	; 0x38c4 <stateMachineProgram+0x2aa>
    38bc:	8a e0       	ldi	r24, 0x0A	; 10
    38be:	80 93 0e 01 	sts	0x010E, r24
    38c2:	60 c0       	rjmp	.+192    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    38c4:	c3 30       	cpi	r28, 0x03	; 3
    38c6:	09 f0       	breq	.+2      	; 0x38ca <stateMachineProgram+0x2b0>
    38c8:	5d c0       	rjmp	.+186    	; 0x3984 <stateMachineProgram+0x36a>
    38ca:	8d e0       	ldi	r24, 0x0D	; 13
    38cc:	80 93 0e 01 	sts	0x010E, r24
    38d0:	59 c0       	rjmp	.+178    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		case PRG_STATE_SETUP_PHOTOCELL_MODE:
		if(sig == BUTTON_UP) cellActive =1;
    38d2:	85 30       	cpi	r24, 0x05	; 5
    38d4:	21 f4       	brne	.+8      	; 0x38de <stateMachineProgram+0x2c4>
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 23 01 	sts	0x0123, r24
    38dc:	0b c0       	rjmp	.+22     	; 0x38f4 <stateMachineProgram+0x2da>
		if(sig == BUTTON_DOWN) cellActive =0;
    38de:	86 30       	cpi	r24, 0x06	; 6
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <stateMachineProgram+0x2ce>
    38e2:	10 92 23 01 	sts	0x0123, r1
    38e6:	4e c0       	rjmp	.+156    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_AUTOMATIC_MODE;
    38e8:	84 30       	cpi	r24, 0x04	; 4
    38ea:	21 f4       	brne	.+8      	; 0x38f4 <stateMachineProgram+0x2da>
    38ec:	8b e0       	ldi	r24, 0x0B	; 11
    38ee:	80 93 0e 01 	sts	0x010E, r24
    38f2:	48 c0       	rjmp	.+144    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    38f4:	c3 30       	cpi	r28, 0x03	; 3
    38f6:	09 f0       	breq	.+2      	; 0x38fa <stateMachineProgram+0x2e0>
    38f8:	45 c0       	rjmp	.+138    	; 0x3984 <stateMachineProgram+0x36a>
    38fa:	8d e0       	ldi	r24, 0x0D	; 13
    38fc:	80 93 0e 01 	sts	0x010E, r24
    3900:	41 c0       	rjmp	.+130    	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		case PRG_STATE_SETUP_AUTOMATIC_MODE:
		if(sig == BUTTON_UP) autoCloseActive=1;
    3902:	85 30       	cpi	r24, 0x05	; 5
    3904:	21 f4       	brne	.+8      	; 0x390e <stateMachineProgram+0x2f4>
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	80 93 22 01 	sts	0x0122, r24
    390c:	0b c0       	rjmp	.+22     	; 0x3924 <stateMachineProgram+0x30a>
		if(sig == BUTTON_DOWN) autoCloseActive=0;
    390e:	86 30       	cpi	r24, 0x06	; 6
    3910:	19 f4       	brne	.+6      	; 0x3918 <stateMachineProgram+0x2fe>
    3912:	10 92 22 01 	sts	0x0122, r1
    3916:	36 c0       	rjmp	.+108    	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_STEP_MODE;
    3918:	84 30       	cpi	r24, 0x04	; 4
    391a:	21 f4       	brne	.+8      	; 0x3924 <stateMachineProgram+0x30a>
    391c:	8c e0       	ldi	r24, 0x0C	; 12
    391e:	80 93 0e 01 	sts	0x010E, r24
    3922:	30 c0       	rjmp	.+96     	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3924:	c3 30       	cpi	r28, 0x03	; 3
    3926:	71 f5       	brne	.+92     	; 0x3984 <stateMachineProgram+0x36a>
    3928:	8d e0       	ldi	r24, 0x0D	; 13
    392a:	80 93 0e 01 	sts	0x010E, r24
    392e:	2a c0       	rjmp	.+84     	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		case PRG_STATE_SETUP_STEP_MODE:
		if(sig == BUTTON_UP) stepActive =1;
    3930:	85 30       	cpi	r24, 0x05	; 5
    3932:	21 f4       	brne	.+8      	; 0x393c <stateMachineProgram+0x322>
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	80 93 24 01 	sts	0x0124, r24
    393a:	0b c0       	rjmp	.+22     	; 0x3952 <stateMachineProgram+0x338>
		if(sig == BUTTON_DOWN) stepActive=0;
    393c:	86 30       	cpi	r24, 0x06	; 6
    393e:	19 f4       	brne	.+6      	; 0x3946 <stateMachineProgram+0x32c>
    3940:	10 92 24 01 	sts	0x0124, r1
    3944:	1f c0       	rjmp	.+62     	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3946:	84 30       	cpi	r24, 0x04	; 4
    3948:	21 f4       	brne	.+8      	; 0x3952 <stateMachineProgram+0x338>
    394a:	8d e0       	ldi	r24, 0x0D	; 13
    394c:	80 93 0e 01 	sts	0x010E, r24
    3950:	19 c0       	rjmp	.+50     	; 0x3984 <stateMachineProgram+0x36a>
		if(sig == BUTTON_ESC) stateProgram = PRG_STATE_SETUP_SAVE_PARAMETERS;
    3952:	c3 30       	cpi	r28, 0x03	; 3
    3954:	b9 f4       	brne	.+46     	; 0x3984 <stateMachineProgram+0x36a>
    3956:	8d e0       	ldi	r24, 0x0D	; 13
    3958:	80 93 0e 01 	sts	0x010E, r24
    395c:	13 c0       	rjmp	.+38     	; 0x3984 <stateMachineProgram+0x36a>
		break;
		
		case PRG_STATE_SETUP_SAVE_PARAMETERS:
		flagSaveMemory++;
    395e:	80 91 0f 05 	lds	r24, 0x050F
    3962:	8f 5f       	subi	r24, 0xFF	; 255
    3964:	80 93 0f 05 	sts	0x050F, r24
		stateProgram = PRG_STATE_RUN;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	80 93 0e 01 	sts	0x010E, r24
		break;
    396e:	0a c0       	rjmp	.+20     	; 0x3984 <stateMachineProgram+0x36a>
		
		default:
		stateProgram = PRG_STATE_RUN;
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	80 93 0e 01 	sts	0x010E, r24
		break;
    3976:	06 c0       	rjmp	.+12     	; 0x3984 <stateMachineProgram+0x36a>
		#endif
		
		if(sig == BUTTON_UP) preFlashingActive=1;
		if(sig == BUTTON_DOWN) preFlashingActive=0;
		if(preFlashingActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_PREFLASHING_TIME;
		if(preFlashingActive == INACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_UNLOCK_TIME;
    3978:	80 91 26 01 	lds	r24, 0x0126
    397c:	c1 ce       	rjmp	.-638    	; 0x3700 <stateMachineProgram+0xe6>
		
		case PRG_STATE_SETUP_RAMBLOW_MODE:
		if(sig == BUTTON_UP) ramBlowActive=1;
		if(sig == BUTTON_DOWN) ramBlowActive=0;
		if(ramBlowActive == ACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_RAMBLOW_TIME;
		if(ramBlowActive == INACTIVE && sig == BUTTON_ENTER) stateProgram = PRG_STATE_SETUP_DELAY_GATES_TIME;
    397e:	80 91 25 01 	lds	r24, 0x0125
    3982:	23 cf       	rjmp	.-442    	; 0x37ca <stateMachineProgram+0x1b0>
		break;
		
	}
	
	
}
    3984:	cf 91       	pop	r28
    3986:	08 95       	ret

00003988 <__udivmodhi4>:
    3988:	aa 1b       	sub	r26, r26
    398a:	bb 1b       	sub	r27, r27
    398c:	51 e1       	ldi	r21, 0x11	; 17
    398e:	07 c0       	rjmp	.+14     	; 0x399e <__udivmodhi4_ep>

00003990 <__udivmodhi4_loop>:
    3990:	aa 1f       	adc	r26, r26
    3992:	bb 1f       	adc	r27, r27
    3994:	a6 17       	cp	r26, r22
    3996:	b7 07       	cpc	r27, r23
    3998:	10 f0       	brcs	.+4      	; 0x399e <__udivmodhi4_ep>
    399a:	a6 1b       	sub	r26, r22
    399c:	b7 0b       	sbc	r27, r23

0000399e <__udivmodhi4_ep>:
    399e:	88 1f       	adc	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	5a 95       	dec	r21
    39a4:	a9 f7       	brne	.-22     	; 0x3990 <__udivmodhi4_loop>
    39a6:	80 95       	com	r24
    39a8:	90 95       	com	r25
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	08 95       	ret

000039b0 <__tablejump2__>:
    39b0:	ee 0f       	add	r30, r30
    39b2:	ff 1f       	adc	r31, r31

000039b4 <__tablejump__>:
    39b4:	05 90       	lpm	r0, Z+
    39b6:	f4 91       	lpm	r31, Z
    39b8:	e0 2d       	mov	r30, r0
    39ba:	09 94       	ijmp

000039bc <sprintf>:
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	cf 93       	push	r28
    39c2:	df 93       	push	r29
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	2e 97       	sbiw	r28, 0x0e	; 14
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	0d 89       	ldd	r16, Y+21	; 0x15
    39d6:	1e 89       	ldd	r17, Y+22	; 0x16
    39d8:	86 e0       	ldi	r24, 0x06	; 6
    39da:	8c 83       	std	Y+4, r24	; 0x04
    39dc:	1a 83       	std	Y+2, r17	; 0x02
    39de:	09 83       	std	Y+1, r16	; 0x01
    39e0:	8f ef       	ldi	r24, 0xFF	; 255
    39e2:	9f e7       	ldi	r25, 0x7F	; 127
    39e4:	9e 83       	std	Y+6, r25	; 0x06
    39e6:	8d 83       	std	Y+5, r24	; 0x05
    39e8:	ae 01       	movw	r20, r28
    39ea:	47 5e       	subi	r20, 0xE7	; 231
    39ec:	5f 4f       	sbci	r21, 0xFF	; 255
    39ee:	6f 89       	ldd	r22, Y+23	; 0x17
    39f0:	78 8d       	ldd	r23, Y+24	; 0x18
    39f2:	ce 01       	movw	r24, r28
    39f4:	01 96       	adiw	r24, 0x01	; 1
    39f6:	10 d0       	rcall	.+32     	; 0x3a18 <vfprintf>
    39f8:	ef 81       	ldd	r30, Y+7	; 0x07
    39fa:	f8 85       	ldd	r31, Y+8	; 0x08
    39fc:	e0 0f       	add	r30, r16
    39fe:	f1 1f       	adc	r31, r17
    3a00:	10 82       	st	Z, r1
    3a02:	2e 96       	adiw	r28, 0x0e	; 14
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <vfprintf>:
    3a18:	2f 92       	push	r2
    3a1a:	3f 92       	push	r3
    3a1c:	4f 92       	push	r4
    3a1e:	5f 92       	push	r5
    3a20:	6f 92       	push	r6
    3a22:	7f 92       	push	r7
    3a24:	8f 92       	push	r8
    3a26:	9f 92       	push	r9
    3a28:	af 92       	push	r10
    3a2a:	bf 92       	push	r11
    3a2c:	cf 92       	push	r12
    3a2e:	df 92       	push	r13
    3a30:	ef 92       	push	r14
    3a32:	ff 92       	push	r15
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	2c 97       	sbiw	r28, 0x0c	; 12
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	7c 01       	movw	r14, r24
    3a4e:	6b 01       	movw	r12, r22
    3a50:	8a 01       	movw	r16, r20
    3a52:	fc 01       	movw	r30, r24
    3a54:	17 82       	std	Z+7, r1	; 0x07
    3a56:	16 82       	std	Z+6, r1	; 0x06
    3a58:	83 81       	ldd	r24, Z+3	; 0x03
    3a5a:	81 ff       	sbrs	r24, 1
    3a5c:	b0 c1       	rjmp	.+864    	; 0x3dbe <vfprintf+0x3a6>
    3a5e:	ce 01       	movw	r24, r28
    3a60:	01 96       	adiw	r24, 0x01	; 1
    3a62:	4c 01       	movw	r8, r24
    3a64:	f7 01       	movw	r30, r14
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	f6 01       	movw	r30, r12
    3a6a:	93 fd       	sbrc	r25, 3
    3a6c:	85 91       	lpm	r24, Z+
    3a6e:	93 ff       	sbrs	r25, 3
    3a70:	81 91       	ld	r24, Z+
    3a72:	6f 01       	movw	r12, r30
    3a74:	88 23       	and	r24, r24
    3a76:	09 f4       	brne	.+2      	; 0x3a7a <vfprintf+0x62>
    3a78:	9e c1       	rjmp	.+828    	; 0x3db6 <vfprintf+0x39e>
    3a7a:	85 32       	cpi	r24, 0x25	; 37
    3a7c:	39 f4       	brne	.+14     	; 0x3a8c <vfprintf+0x74>
    3a7e:	93 fd       	sbrc	r25, 3
    3a80:	85 91       	lpm	r24, Z+
    3a82:	93 ff       	sbrs	r25, 3
    3a84:	81 91       	ld	r24, Z+
    3a86:	6f 01       	movw	r12, r30
    3a88:	85 32       	cpi	r24, 0x25	; 37
    3a8a:	21 f4       	brne	.+8      	; 0x3a94 <vfprintf+0x7c>
    3a8c:	b7 01       	movw	r22, r14
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	ed d1       	rcall	.+986    	; 0x3e6c <fputc>
    3a92:	e8 cf       	rjmp	.-48     	; 0x3a64 <vfprintf+0x4c>
    3a94:	51 2c       	mov	r5, r1
    3a96:	31 2c       	mov	r3, r1
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	20 32       	cpi	r18, 0x20	; 32
    3a9c:	a0 f4       	brcc	.+40     	; 0x3ac6 <vfprintf+0xae>
    3a9e:	8b 32       	cpi	r24, 0x2B	; 43
    3aa0:	69 f0       	breq	.+26     	; 0x3abc <vfprintf+0xa4>
    3aa2:	30 f4       	brcc	.+12     	; 0x3ab0 <vfprintf+0x98>
    3aa4:	80 32       	cpi	r24, 0x20	; 32
    3aa6:	59 f0       	breq	.+22     	; 0x3abe <vfprintf+0xa6>
    3aa8:	83 32       	cpi	r24, 0x23	; 35
    3aaa:	69 f4       	brne	.+26     	; 0x3ac6 <vfprintf+0xae>
    3aac:	20 61       	ori	r18, 0x10	; 16
    3aae:	2c c0       	rjmp	.+88     	; 0x3b08 <vfprintf+0xf0>
    3ab0:	8d 32       	cpi	r24, 0x2D	; 45
    3ab2:	39 f0       	breq	.+14     	; 0x3ac2 <vfprintf+0xaa>
    3ab4:	80 33       	cpi	r24, 0x30	; 48
    3ab6:	39 f4       	brne	.+14     	; 0x3ac6 <vfprintf+0xae>
    3ab8:	21 60       	ori	r18, 0x01	; 1
    3aba:	26 c0       	rjmp	.+76     	; 0x3b08 <vfprintf+0xf0>
    3abc:	22 60       	ori	r18, 0x02	; 2
    3abe:	24 60       	ori	r18, 0x04	; 4
    3ac0:	23 c0       	rjmp	.+70     	; 0x3b08 <vfprintf+0xf0>
    3ac2:	28 60       	ori	r18, 0x08	; 8
    3ac4:	21 c0       	rjmp	.+66     	; 0x3b08 <vfprintf+0xf0>
    3ac6:	27 fd       	sbrc	r18, 7
    3ac8:	27 c0       	rjmp	.+78     	; 0x3b18 <vfprintf+0x100>
    3aca:	30 ed       	ldi	r19, 0xD0	; 208
    3acc:	38 0f       	add	r19, r24
    3ace:	3a 30       	cpi	r19, 0x0A	; 10
    3ad0:	78 f4       	brcc	.+30     	; 0x3af0 <vfprintf+0xd8>
    3ad2:	26 ff       	sbrs	r18, 6
    3ad4:	06 c0       	rjmp	.+12     	; 0x3ae2 <vfprintf+0xca>
    3ad6:	fa e0       	ldi	r31, 0x0A	; 10
    3ad8:	5f 9e       	mul	r5, r31
    3ada:	30 0d       	add	r19, r0
    3adc:	11 24       	eor	r1, r1
    3ade:	53 2e       	mov	r5, r19
    3ae0:	13 c0       	rjmp	.+38     	; 0x3b08 <vfprintf+0xf0>
    3ae2:	8a e0       	ldi	r24, 0x0A	; 10
    3ae4:	38 9e       	mul	r3, r24
    3ae6:	30 0d       	add	r19, r0
    3ae8:	11 24       	eor	r1, r1
    3aea:	33 2e       	mov	r3, r19
    3aec:	20 62       	ori	r18, 0x20	; 32
    3aee:	0c c0       	rjmp	.+24     	; 0x3b08 <vfprintf+0xf0>
    3af0:	8e 32       	cpi	r24, 0x2E	; 46
    3af2:	21 f4       	brne	.+8      	; 0x3afc <vfprintf+0xe4>
    3af4:	26 fd       	sbrc	r18, 6
    3af6:	5f c1       	rjmp	.+702    	; 0x3db6 <vfprintf+0x39e>
    3af8:	20 64       	ori	r18, 0x40	; 64
    3afa:	06 c0       	rjmp	.+12     	; 0x3b08 <vfprintf+0xf0>
    3afc:	8c 36       	cpi	r24, 0x6C	; 108
    3afe:	11 f4       	brne	.+4      	; 0x3b04 <vfprintf+0xec>
    3b00:	20 68       	ori	r18, 0x80	; 128
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <vfprintf+0xf0>
    3b04:	88 36       	cpi	r24, 0x68	; 104
    3b06:	41 f4       	brne	.+16     	; 0x3b18 <vfprintf+0x100>
    3b08:	f6 01       	movw	r30, r12
    3b0a:	93 fd       	sbrc	r25, 3
    3b0c:	85 91       	lpm	r24, Z+
    3b0e:	93 ff       	sbrs	r25, 3
    3b10:	81 91       	ld	r24, Z+
    3b12:	6f 01       	movw	r12, r30
    3b14:	81 11       	cpse	r24, r1
    3b16:	c1 cf       	rjmp	.-126    	; 0x3a9a <vfprintf+0x82>
    3b18:	98 2f       	mov	r25, r24
    3b1a:	9f 7d       	andi	r25, 0xDF	; 223
    3b1c:	95 54       	subi	r25, 0x45	; 69
    3b1e:	93 30       	cpi	r25, 0x03	; 3
    3b20:	28 f4       	brcc	.+10     	; 0x3b2c <vfprintf+0x114>
    3b22:	0c 5f       	subi	r16, 0xFC	; 252
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	ff e3       	ldi	r31, 0x3F	; 63
    3b28:	f9 83       	std	Y+1, r31	; 0x01
    3b2a:	0d c0       	rjmp	.+26     	; 0x3b46 <vfprintf+0x12e>
    3b2c:	83 36       	cpi	r24, 0x63	; 99
    3b2e:	31 f0       	breq	.+12     	; 0x3b3c <vfprintf+0x124>
    3b30:	83 37       	cpi	r24, 0x73	; 115
    3b32:	71 f0       	breq	.+28     	; 0x3b50 <vfprintf+0x138>
    3b34:	83 35       	cpi	r24, 0x53	; 83
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <vfprintf+0x122>
    3b38:	57 c0       	rjmp	.+174    	; 0x3be8 <vfprintf+0x1d0>
    3b3a:	21 c0       	rjmp	.+66     	; 0x3b7e <vfprintf+0x166>
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	80 81       	ld	r24, Z
    3b40:	89 83       	std	Y+1, r24	; 0x01
    3b42:	0e 5f       	subi	r16, 0xFE	; 254
    3b44:	1f 4f       	sbci	r17, 0xFF	; 255
    3b46:	44 24       	eor	r4, r4
    3b48:	43 94       	inc	r4
    3b4a:	51 2c       	mov	r5, r1
    3b4c:	54 01       	movw	r10, r8
    3b4e:	14 c0       	rjmp	.+40     	; 0x3b78 <vfprintf+0x160>
    3b50:	38 01       	movw	r6, r16
    3b52:	f2 e0       	ldi	r31, 0x02	; 2
    3b54:	6f 0e       	add	r6, r31
    3b56:	71 1c       	adc	r7, r1
    3b58:	f8 01       	movw	r30, r16
    3b5a:	a0 80       	ld	r10, Z
    3b5c:	b1 80       	ldd	r11, Z+1	; 0x01
    3b5e:	26 ff       	sbrs	r18, 6
    3b60:	03 c0       	rjmp	.+6      	; 0x3b68 <vfprintf+0x150>
    3b62:	65 2d       	mov	r22, r5
    3b64:	70 e0       	ldi	r23, 0x00	; 0
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <vfprintf+0x154>
    3b68:	6f ef       	ldi	r22, 0xFF	; 255
    3b6a:	7f ef       	ldi	r23, 0xFF	; 255
    3b6c:	c5 01       	movw	r24, r10
    3b6e:	2c 87       	std	Y+12, r18	; 0x0c
    3b70:	72 d1       	rcall	.+740    	; 0x3e56 <strnlen>
    3b72:	2c 01       	movw	r4, r24
    3b74:	83 01       	movw	r16, r6
    3b76:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b78:	2f 77       	andi	r18, 0x7F	; 127
    3b7a:	22 2e       	mov	r2, r18
    3b7c:	16 c0       	rjmp	.+44     	; 0x3baa <vfprintf+0x192>
    3b7e:	38 01       	movw	r6, r16
    3b80:	f2 e0       	ldi	r31, 0x02	; 2
    3b82:	6f 0e       	add	r6, r31
    3b84:	71 1c       	adc	r7, r1
    3b86:	f8 01       	movw	r30, r16
    3b88:	a0 80       	ld	r10, Z
    3b8a:	b1 80       	ldd	r11, Z+1	; 0x01
    3b8c:	26 ff       	sbrs	r18, 6
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <vfprintf+0x17e>
    3b90:	65 2d       	mov	r22, r5
    3b92:	70 e0       	ldi	r23, 0x00	; 0
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <vfprintf+0x182>
    3b96:	6f ef       	ldi	r22, 0xFF	; 255
    3b98:	7f ef       	ldi	r23, 0xFF	; 255
    3b9a:	c5 01       	movw	r24, r10
    3b9c:	2c 87       	std	Y+12, r18	; 0x0c
    3b9e:	50 d1       	rcall	.+672    	; 0x3e40 <strnlen_P>
    3ba0:	2c 01       	movw	r4, r24
    3ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ba4:	20 68       	ori	r18, 0x80	; 128
    3ba6:	22 2e       	mov	r2, r18
    3ba8:	83 01       	movw	r16, r6
    3baa:	23 fc       	sbrc	r2, 3
    3bac:	19 c0       	rjmp	.+50     	; 0x3be0 <vfprintf+0x1c8>
    3bae:	83 2d       	mov	r24, r3
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	48 16       	cp	r4, r24
    3bb4:	59 06       	cpc	r5, r25
    3bb6:	a0 f4       	brcc	.+40     	; 0x3be0 <vfprintf+0x1c8>
    3bb8:	b7 01       	movw	r22, r14
    3bba:	80 e2       	ldi	r24, 0x20	; 32
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	56 d1       	rcall	.+684    	; 0x3e6c <fputc>
    3bc0:	3a 94       	dec	r3
    3bc2:	f5 cf       	rjmp	.-22     	; 0x3bae <vfprintf+0x196>
    3bc4:	f5 01       	movw	r30, r10
    3bc6:	27 fc       	sbrc	r2, 7
    3bc8:	85 91       	lpm	r24, Z+
    3bca:	27 fe       	sbrs	r2, 7
    3bcc:	81 91       	ld	r24, Z+
    3bce:	5f 01       	movw	r10, r30
    3bd0:	b7 01       	movw	r22, r14
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	4b d1       	rcall	.+662    	; 0x3e6c <fputc>
    3bd6:	31 10       	cpse	r3, r1
    3bd8:	3a 94       	dec	r3
    3bda:	f1 e0       	ldi	r31, 0x01	; 1
    3bdc:	4f 1a       	sub	r4, r31
    3bde:	51 08       	sbc	r5, r1
    3be0:	41 14       	cp	r4, r1
    3be2:	51 04       	cpc	r5, r1
    3be4:	79 f7       	brne	.-34     	; 0x3bc4 <vfprintf+0x1ac>
    3be6:	de c0       	rjmp	.+444    	; 0x3da4 <vfprintf+0x38c>
    3be8:	84 36       	cpi	r24, 0x64	; 100
    3bea:	11 f0       	breq	.+4      	; 0x3bf0 <vfprintf+0x1d8>
    3bec:	89 36       	cpi	r24, 0x69	; 105
    3bee:	31 f5       	brne	.+76     	; 0x3c3c <vfprintf+0x224>
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	27 ff       	sbrs	r18, 7
    3bf4:	07 c0       	rjmp	.+14     	; 0x3c04 <vfprintf+0x1ec>
    3bf6:	60 81       	ld	r22, Z
    3bf8:	71 81       	ldd	r23, Z+1	; 0x01
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	93 81       	ldd	r25, Z+3	; 0x03
    3bfe:	0c 5f       	subi	r16, 0xFC	; 252
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	08 c0       	rjmp	.+16     	; 0x3c14 <vfprintf+0x1fc>
    3c04:	60 81       	ld	r22, Z
    3c06:	71 81       	ldd	r23, Z+1	; 0x01
    3c08:	88 27       	eor	r24, r24
    3c0a:	77 fd       	sbrc	r23, 7
    3c0c:	80 95       	com	r24
    3c0e:	98 2f       	mov	r25, r24
    3c10:	0e 5f       	subi	r16, 0xFE	; 254
    3c12:	1f 4f       	sbci	r17, 0xFF	; 255
    3c14:	2f 76       	andi	r18, 0x6F	; 111
    3c16:	b2 2e       	mov	r11, r18
    3c18:	97 ff       	sbrs	r25, 7
    3c1a:	09 c0       	rjmp	.+18     	; 0x3c2e <vfprintf+0x216>
    3c1c:	90 95       	com	r25
    3c1e:	80 95       	com	r24
    3c20:	70 95       	com	r23
    3c22:	61 95       	neg	r22
    3c24:	7f 4f       	sbci	r23, 0xFF	; 255
    3c26:	8f 4f       	sbci	r24, 0xFF	; 255
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	20 68       	ori	r18, 0x80	; 128
    3c2c:	b2 2e       	mov	r11, r18
    3c2e:	2a e0       	ldi	r18, 0x0A	; 10
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	a4 01       	movw	r20, r8
    3c34:	4d d1       	rcall	.+666    	; 0x3ed0 <__ultoa_invert>
    3c36:	a8 2e       	mov	r10, r24
    3c38:	a8 18       	sub	r10, r8
    3c3a:	43 c0       	rjmp	.+134    	; 0x3cc2 <vfprintf+0x2aa>
    3c3c:	85 37       	cpi	r24, 0x75	; 117
    3c3e:	29 f4       	brne	.+10     	; 0x3c4a <vfprintf+0x232>
    3c40:	2f 7e       	andi	r18, 0xEF	; 239
    3c42:	b2 2e       	mov	r11, r18
    3c44:	2a e0       	ldi	r18, 0x0A	; 10
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	25 c0       	rjmp	.+74     	; 0x3c94 <vfprintf+0x27c>
    3c4a:	f2 2f       	mov	r31, r18
    3c4c:	f9 7f       	andi	r31, 0xF9	; 249
    3c4e:	bf 2e       	mov	r11, r31
    3c50:	8f 36       	cpi	r24, 0x6F	; 111
    3c52:	c1 f0       	breq	.+48     	; 0x3c84 <vfprintf+0x26c>
    3c54:	18 f4       	brcc	.+6      	; 0x3c5c <vfprintf+0x244>
    3c56:	88 35       	cpi	r24, 0x58	; 88
    3c58:	79 f0       	breq	.+30     	; 0x3c78 <vfprintf+0x260>
    3c5a:	ad c0       	rjmp	.+346    	; 0x3db6 <vfprintf+0x39e>
    3c5c:	80 37       	cpi	r24, 0x70	; 112
    3c5e:	19 f0       	breq	.+6      	; 0x3c66 <vfprintf+0x24e>
    3c60:	88 37       	cpi	r24, 0x78	; 120
    3c62:	21 f0       	breq	.+8      	; 0x3c6c <vfprintf+0x254>
    3c64:	a8 c0       	rjmp	.+336    	; 0x3db6 <vfprintf+0x39e>
    3c66:	2f 2f       	mov	r18, r31
    3c68:	20 61       	ori	r18, 0x10	; 16
    3c6a:	b2 2e       	mov	r11, r18
    3c6c:	b4 fe       	sbrs	r11, 4
    3c6e:	0d c0       	rjmp	.+26     	; 0x3c8a <vfprintf+0x272>
    3c70:	8b 2d       	mov	r24, r11
    3c72:	84 60       	ori	r24, 0x04	; 4
    3c74:	b8 2e       	mov	r11, r24
    3c76:	09 c0       	rjmp	.+18     	; 0x3c8a <vfprintf+0x272>
    3c78:	24 ff       	sbrs	r18, 4
    3c7a:	0a c0       	rjmp	.+20     	; 0x3c90 <vfprintf+0x278>
    3c7c:	9f 2f       	mov	r25, r31
    3c7e:	96 60       	ori	r25, 0x06	; 6
    3c80:	b9 2e       	mov	r11, r25
    3c82:	06 c0       	rjmp	.+12     	; 0x3c90 <vfprintf+0x278>
    3c84:	28 e0       	ldi	r18, 0x08	; 8
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	05 c0       	rjmp	.+10     	; 0x3c94 <vfprintf+0x27c>
    3c8a:	20 e1       	ldi	r18, 0x10	; 16
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <vfprintf+0x27c>
    3c90:	20 e1       	ldi	r18, 0x10	; 16
    3c92:	32 e0       	ldi	r19, 0x02	; 2
    3c94:	f8 01       	movw	r30, r16
    3c96:	b7 fe       	sbrs	r11, 7
    3c98:	07 c0       	rjmp	.+14     	; 0x3ca8 <vfprintf+0x290>
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	0c 5f       	subi	r16, 0xFC	; 252
    3ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca6:	06 c0       	rjmp	.+12     	; 0x3cb4 <vfprintf+0x29c>
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e 5f       	subi	r16, 0xFE	; 254
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	a4 01       	movw	r20, r8
    3cb6:	0c d1       	rcall	.+536    	; 0x3ed0 <__ultoa_invert>
    3cb8:	a8 2e       	mov	r10, r24
    3cba:	a8 18       	sub	r10, r8
    3cbc:	fb 2d       	mov	r31, r11
    3cbe:	ff 77       	andi	r31, 0x7F	; 127
    3cc0:	bf 2e       	mov	r11, r31
    3cc2:	b6 fe       	sbrs	r11, 6
    3cc4:	0b c0       	rjmp	.+22     	; 0x3cdc <vfprintf+0x2c4>
    3cc6:	2b 2d       	mov	r18, r11
    3cc8:	2e 7f       	andi	r18, 0xFE	; 254
    3cca:	a5 14       	cp	r10, r5
    3ccc:	50 f4       	brcc	.+20     	; 0x3ce2 <vfprintf+0x2ca>
    3cce:	b4 fe       	sbrs	r11, 4
    3cd0:	0a c0       	rjmp	.+20     	; 0x3ce6 <vfprintf+0x2ce>
    3cd2:	b2 fc       	sbrc	r11, 2
    3cd4:	08 c0       	rjmp	.+16     	; 0x3ce6 <vfprintf+0x2ce>
    3cd6:	2b 2d       	mov	r18, r11
    3cd8:	2e 7e       	andi	r18, 0xEE	; 238
    3cda:	05 c0       	rjmp	.+10     	; 0x3ce6 <vfprintf+0x2ce>
    3cdc:	7a 2c       	mov	r7, r10
    3cde:	2b 2d       	mov	r18, r11
    3ce0:	03 c0       	rjmp	.+6      	; 0x3ce8 <vfprintf+0x2d0>
    3ce2:	7a 2c       	mov	r7, r10
    3ce4:	01 c0       	rjmp	.+2      	; 0x3ce8 <vfprintf+0x2d0>
    3ce6:	75 2c       	mov	r7, r5
    3ce8:	24 ff       	sbrs	r18, 4
    3cea:	0d c0       	rjmp	.+26     	; 0x3d06 <vfprintf+0x2ee>
    3cec:	fe 01       	movw	r30, r28
    3cee:	ea 0d       	add	r30, r10
    3cf0:	f1 1d       	adc	r31, r1
    3cf2:	80 81       	ld	r24, Z
    3cf4:	80 33       	cpi	r24, 0x30	; 48
    3cf6:	11 f4       	brne	.+4      	; 0x3cfc <vfprintf+0x2e4>
    3cf8:	29 7e       	andi	r18, 0xE9	; 233
    3cfa:	09 c0       	rjmp	.+18     	; 0x3d0e <vfprintf+0x2f6>
    3cfc:	22 ff       	sbrs	r18, 2
    3cfe:	06 c0       	rjmp	.+12     	; 0x3d0c <vfprintf+0x2f4>
    3d00:	73 94       	inc	r7
    3d02:	73 94       	inc	r7
    3d04:	04 c0       	rjmp	.+8      	; 0x3d0e <vfprintf+0x2f6>
    3d06:	82 2f       	mov	r24, r18
    3d08:	86 78       	andi	r24, 0x86	; 134
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <vfprintf+0x2f6>
    3d0c:	73 94       	inc	r7
    3d0e:	23 fd       	sbrc	r18, 3
    3d10:	12 c0       	rjmp	.+36     	; 0x3d36 <vfprintf+0x31e>
    3d12:	20 ff       	sbrs	r18, 0
    3d14:	06 c0       	rjmp	.+12     	; 0x3d22 <vfprintf+0x30a>
    3d16:	5a 2c       	mov	r5, r10
    3d18:	73 14       	cp	r7, r3
    3d1a:	18 f4       	brcc	.+6      	; 0x3d22 <vfprintf+0x30a>
    3d1c:	53 0c       	add	r5, r3
    3d1e:	57 18       	sub	r5, r7
    3d20:	73 2c       	mov	r7, r3
    3d22:	73 14       	cp	r7, r3
    3d24:	60 f4       	brcc	.+24     	; 0x3d3e <vfprintf+0x326>
    3d26:	b7 01       	movw	r22, r14
    3d28:	80 e2       	ldi	r24, 0x20	; 32
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	2c 87       	std	Y+12, r18	; 0x0c
    3d2e:	9e d0       	rcall	.+316    	; 0x3e6c <fputc>
    3d30:	73 94       	inc	r7
    3d32:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d34:	f6 cf       	rjmp	.-20     	; 0x3d22 <vfprintf+0x30a>
    3d36:	73 14       	cp	r7, r3
    3d38:	10 f4       	brcc	.+4      	; 0x3d3e <vfprintf+0x326>
    3d3a:	37 18       	sub	r3, r7
    3d3c:	01 c0       	rjmp	.+2      	; 0x3d40 <vfprintf+0x328>
    3d3e:	31 2c       	mov	r3, r1
    3d40:	24 ff       	sbrs	r18, 4
    3d42:	11 c0       	rjmp	.+34     	; 0x3d66 <vfprintf+0x34e>
    3d44:	b7 01       	movw	r22, r14
    3d46:	80 e3       	ldi	r24, 0x30	; 48
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	2c 87       	std	Y+12, r18	; 0x0c
    3d4c:	8f d0       	rcall	.+286    	; 0x3e6c <fputc>
    3d4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d50:	22 ff       	sbrs	r18, 2
    3d52:	16 c0       	rjmp	.+44     	; 0x3d80 <vfprintf+0x368>
    3d54:	21 ff       	sbrs	r18, 1
    3d56:	03 c0       	rjmp	.+6      	; 0x3d5e <vfprintf+0x346>
    3d58:	88 e5       	ldi	r24, 0x58	; 88
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <vfprintf+0x34a>
    3d5e:	88 e7       	ldi	r24, 0x78	; 120
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	b7 01       	movw	r22, r14
    3d64:	0c c0       	rjmp	.+24     	; 0x3d7e <vfprintf+0x366>
    3d66:	82 2f       	mov	r24, r18
    3d68:	86 78       	andi	r24, 0x86	; 134
    3d6a:	51 f0       	breq	.+20     	; 0x3d80 <vfprintf+0x368>
    3d6c:	21 fd       	sbrc	r18, 1
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <vfprintf+0x35c>
    3d70:	80 e2       	ldi	r24, 0x20	; 32
    3d72:	01 c0       	rjmp	.+2      	; 0x3d76 <vfprintf+0x35e>
    3d74:	8b e2       	ldi	r24, 0x2B	; 43
    3d76:	27 fd       	sbrc	r18, 7
    3d78:	8d e2       	ldi	r24, 0x2D	; 45
    3d7a:	b7 01       	movw	r22, r14
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	76 d0       	rcall	.+236    	; 0x3e6c <fputc>
    3d80:	a5 14       	cp	r10, r5
    3d82:	30 f4       	brcc	.+12     	; 0x3d90 <vfprintf+0x378>
    3d84:	b7 01       	movw	r22, r14
    3d86:	80 e3       	ldi	r24, 0x30	; 48
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	70 d0       	rcall	.+224    	; 0x3e6c <fputc>
    3d8c:	5a 94       	dec	r5
    3d8e:	f8 cf       	rjmp	.-16     	; 0x3d80 <vfprintf+0x368>
    3d90:	aa 94       	dec	r10
    3d92:	f4 01       	movw	r30, r8
    3d94:	ea 0d       	add	r30, r10
    3d96:	f1 1d       	adc	r31, r1
    3d98:	80 81       	ld	r24, Z
    3d9a:	b7 01       	movw	r22, r14
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	66 d0       	rcall	.+204    	; 0x3e6c <fputc>
    3da0:	a1 10       	cpse	r10, r1
    3da2:	f6 cf       	rjmp	.-20     	; 0x3d90 <vfprintf+0x378>
    3da4:	33 20       	and	r3, r3
    3da6:	09 f4       	brne	.+2      	; 0x3daa <vfprintf+0x392>
    3da8:	5d ce       	rjmp	.-838    	; 0x3a64 <vfprintf+0x4c>
    3daa:	b7 01       	movw	r22, r14
    3dac:	80 e2       	ldi	r24, 0x20	; 32
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	5d d0       	rcall	.+186    	; 0x3e6c <fputc>
    3db2:	3a 94       	dec	r3
    3db4:	f7 cf       	rjmp	.-18     	; 0x3da4 <vfprintf+0x38c>
    3db6:	f7 01       	movw	r30, r14
    3db8:	86 81       	ldd	r24, Z+6	; 0x06
    3dba:	97 81       	ldd	r25, Z+7	; 0x07
    3dbc:	02 c0       	rjmp	.+4      	; 0x3dc2 <vfprintf+0x3aa>
    3dbe:	8f ef       	ldi	r24, 0xFF	; 255
    3dc0:	9f ef       	ldi	r25, 0xFF	; 255
    3dc2:	2c 96       	adiw	r28, 0x0c	; 12
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	de bf       	out	0x3e, r29	; 62
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	df 91       	pop	r29
    3dd0:	cf 91       	pop	r28
    3dd2:	1f 91       	pop	r17
    3dd4:	0f 91       	pop	r16
    3dd6:	ff 90       	pop	r15
    3dd8:	ef 90       	pop	r14
    3dda:	df 90       	pop	r13
    3ddc:	cf 90       	pop	r12
    3dde:	bf 90       	pop	r11
    3de0:	af 90       	pop	r10
    3de2:	9f 90       	pop	r9
    3de4:	8f 90       	pop	r8
    3de6:	7f 90       	pop	r7
    3de8:	6f 90       	pop	r6
    3dea:	5f 90       	pop	r5
    3dec:	4f 90       	pop	r4
    3dee:	3f 90       	pop	r3
    3df0:	2f 90       	pop	r2
    3df2:	08 95       	ret

00003df4 <__eerd_block_m128>:
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22

00003df8 <__eerd_blraw_m128>:
    3df8:	fc 01       	movw	r30, r24
    3dfa:	e1 99       	sbic	0x1c, 1	; 28
    3dfc:	fe cf       	rjmp	.-4      	; 0x3dfa <__eerd_blraw_m128+0x2>
    3dfe:	06 c0       	rjmp	.+12     	; 0x3e0c <__eerd_blraw_m128+0x14>
    3e00:	ff bb       	out	0x1f, r31	; 31
    3e02:	ee bb       	out	0x1e, r30	; 30
    3e04:	e0 9a       	sbi	0x1c, 0	; 28
    3e06:	31 96       	adiw	r30, 0x01	; 1
    3e08:	0d b2       	in	r0, 0x1d	; 29
    3e0a:	0d 92       	st	X+, r0
    3e0c:	41 50       	subi	r20, 0x01	; 1
    3e0e:	50 40       	sbci	r21, 0x00	; 0
    3e10:	b8 f7       	brcc	.-18     	; 0x3e00 <__eerd_blraw_m128+0x8>
    3e12:	08 95       	ret

00003e14 <__eewr_block_m128>:
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <__eewr_block_m128+0xa>
    3e1a:	2d 91       	ld	r18, X+
    3e1c:	05 d0       	rcall	.+10     	; 0x3e28 <__eewr_r18_m128>
    3e1e:	41 50       	subi	r20, 0x01	; 1
    3e20:	50 40       	sbci	r21, 0x00	; 0
    3e22:	d8 f7       	brcc	.-10     	; 0x3e1a <__eewr_block_m128+0x6>
    3e24:	08 95       	ret

00003e26 <__eewr_byte_m128>:
    3e26:	26 2f       	mov	r18, r22

00003e28 <__eewr_r18_m128>:
    3e28:	e1 99       	sbic	0x1c, 1	; 28
    3e2a:	fe cf       	rjmp	.-4      	; 0x3e28 <__eewr_r18_m128>
    3e2c:	9f bb       	out	0x1f, r25	; 31
    3e2e:	8e bb       	out	0x1e, r24	; 30
    3e30:	2d bb       	out	0x1d, r18	; 29
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	e2 9a       	sbi	0x1c, 2	; 28
    3e38:	e1 9a       	sbi	0x1c, 1	; 28
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	01 96       	adiw	r24, 0x01	; 1
    3e3e:	08 95       	ret

00003e40 <strnlen_P>:
    3e40:	fc 01       	movw	r30, r24
    3e42:	05 90       	lpm	r0, Z+
    3e44:	61 50       	subi	r22, 0x01	; 1
    3e46:	70 40       	sbci	r23, 0x00	; 0
    3e48:	01 10       	cpse	r0, r1
    3e4a:	d8 f7       	brcc	.-10     	; 0x3e42 <strnlen_P+0x2>
    3e4c:	80 95       	com	r24
    3e4e:	90 95       	com	r25
    3e50:	8e 0f       	add	r24, r30
    3e52:	9f 1f       	adc	r25, r31
    3e54:	08 95       	ret

00003e56 <strnlen>:
    3e56:	fc 01       	movw	r30, r24
    3e58:	61 50       	subi	r22, 0x01	; 1
    3e5a:	70 40       	sbci	r23, 0x00	; 0
    3e5c:	01 90       	ld	r0, Z+
    3e5e:	01 10       	cpse	r0, r1
    3e60:	d8 f7       	brcc	.-10     	; 0x3e58 <strnlen+0x2>
    3e62:	80 95       	com	r24
    3e64:	90 95       	com	r25
    3e66:	8e 0f       	add	r24, r30
    3e68:	9f 1f       	adc	r25, r31
    3e6a:	08 95       	ret

00003e6c <fputc>:
    3e6c:	0f 93       	push	r16
    3e6e:	1f 93       	push	r17
    3e70:	cf 93       	push	r28
    3e72:	df 93       	push	r29
    3e74:	18 2f       	mov	r17, r24
    3e76:	09 2f       	mov	r16, r25
    3e78:	eb 01       	movw	r28, r22
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	81 fd       	sbrc	r24, 1
    3e7e:	03 c0       	rjmp	.+6      	; 0x3e86 <fputc+0x1a>
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	9f ef       	ldi	r25, 0xFF	; 255
    3e84:	20 c0       	rjmp	.+64     	; 0x3ec6 <fputc+0x5a>
    3e86:	82 ff       	sbrs	r24, 2
    3e88:	10 c0       	rjmp	.+32     	; 0x3eaa <fputc+0x3e>
    3e8a:	4e 81       	ldd	r20, Y+6	; 0x06
    3e8c:	5f 81       	ldd	r21, Y+7	; 0x07
    3e8e:	2c 81       	ldd	r18, Y+4	; 0x04
    3e90:	3d 81       	ldd	r19, Y+5	; 0x05
    3e92:	42 17       	cp	r20, r18
    3e94:	53 07       	cpc	r21, r19
    3e96:	7c f4       	brge	.+30     	; 0x3eb6 <fputc+0x4a>
    3e98:	e8 81       	ld	r30, Y
    3e9a:	f9 81       	ldd	r31, Y+1	; 0x01
    3e9c:	9f 01       	movw	r18, r30
    3e9e:	2f 5f       	subi	r18, 0xFF	; 255
    3ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea2:	39 83       	std	Y+1, r19	; 0x01
    3ea4:	28 83       	st	Y, r18
    3ea6:	10 83       	st	Z, r17
    3ea8:	06 c0       	rjmp	.+12     	; 0x3eb6 <fputc+0x4a>
    3eaa:	e8 85       	ldd	r30, Y+8	; 0x08
    3eac:	f9 85       	ldd	r31, Y+9	; 0x09
    3eae:	81 2f       	mov	r24, r17
    3eb0:	09 95       	icall
    3eb2:	89 2b       	or	r24, r25
    3eb4:	29 f7       	brne	.-54     	; 0x3e80 <fputc+0x14>
    3eb6:	2e 81       	ldd	r18, Y+6	; 0x06
    3eb8:	3f 81       	ldd	r19, Y+7	; 0x07
    3eba:	2f 5f       	subi	r18, 0xFF	; 255
    3ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ebe:	3f 83       	std	Y+7, r19	; 0x07
    3ec0:	2e 83       	std	Y+6, r18	; 0x06
    3ec2:	81 2f       	mov	r24, r17
    3ec4:	90 2f       	mov	r25, r16
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	08 95       	ret

00003ed0 <__ultoa_invert>:
    3ed0:	fa 01       	movw	r30, r20
    3ed2:	aa 27       	eor	r26, r26
    3ed4:	28 30       	cpi	r18, 0x08	; 8
    3ed6:	51 f1       	breq	.+84     	; 0x3f2c <__ultoa_invert+0x5c>
    3ed8:	20 31       	cpi	r18, 0x10	; 16
    3eda:	81 f1       	breq	.+96     	; 0x3f3c <__ultoa_invert+0x6c>
    3edc:	e8 94       	clt
    3ede:	6f 93       	push	r22
    3ee0:	6e 7f       	andi	r22, 0xFE	; 254
    3ee2:	6e 5f       	subi	r22, 0xFE	; 254
    3ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eea:	af 4f       	sbci	r26, 0xFF	; 255
    3eec:	b1 e0       	ldi	r27, 0x01	; 1
    3eee:	3e d0       	rcall	.+124    	; 0x3f6c <__ultoa_invert+0x9c>
    3ef0:	b4 e0       	ldi	r27, 0x04	; 4
    3ef2:	3c d0       	rcall	.+120    	; 0x3f6c <__ultoa_invert+0x9c>
    3ef4:	67 0f       	add	r22, r23
    3ef6:	78 1f       	adc	r23, r24
    3ef8:	89 1f       	adc	r24, r25
    3efa:	9a 1f       	adc	r25, r26
    3efc:	a1 1d       	adc	r26, r1
    3efe:	68 0f       	add	r22, r24
    3f00:	79 1f       	adc	r23, r25
    3f02:	8a 1f       	adc	r24, r26
    3f04:	91 1d       	adc	r25, r1
    3f06:	a1 1d       	adc	r26, r1
    3f08:	6a 0f       	add	r22, r26
    3f0a:	71 1d       	adc	r23, r1
    3f0c:	81 1d       	adc	r24, r1
    3f0e:	91 1d       	adc	r25, r1
    3f10:	a1 1d       	adc	r26, r1
    3f12:	20 d0       	rcall	.+64     	; 0x3f54 <__ultoa_invert+0x84>
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <__ultoa_invert+0x48>
    3f16:	68 94       	set
    3f18:	3f 91       	pop	r19
    3f1a:	2a e0       	ldi	r18, 0x0A	; 10
    3f1c:	26 9f       	mul	r18, r22
    3f1e:	11 24       	eor	r1, r1
    3f20:	30 19       	sub	r19, r0
    3f22:	30 5d       	subi	r19, 0xD0	; 208
    3f24:	31 93       	st	Z+, r19
    3f26:	de f6       	brtc	.-74     	; 0x3ede <__ultoa_invert+0xe>
    3f28:	cf 01       	movw	r24, r30
    3f2a:	08 95       	ret
    3f2c:	46 2f       	mov	r20, r22
    3f2e:	47 70       	andi	r20, 0x07	; 7
    3f30:	40 5d       	subi	r20, 0xD0	; 208
    3f32:	41 93       	st	Z+, r20
    3f34:	b3 e0       	ldi	r27, 0x03	; 3
    3f36:	0f d0       	rcall	.+30     	; 0x3f56 <__ultoa_invert+0x86>
    3f38:	c9 f7       	brne	.-14     	; 0x3f2c <__ultoa_invert+0x5c>
    3f3a:	f6 cf       	rjmp	.-20     	; 0x3f28 <__ultoa_invert+0x58>
    3f3c:	46 2f       	mov	r20, r22
    3f3e:	4f 70       	andi	r20, 0x0F	; 15
    3f40:	40 5d       	subi	r20, 0xD0	; 208
    3f42:	4a 33       	cpi	r20, 0x3A	; 58
    3f44:	18 f0       	brcs	.+6      	; 0x3f4c <__ultoa_invert+0x7c>
    3f46:	49 5d       	subi	r20, 0xD9	; 217
    3f48:	31 fd       	sbrc	r19, 1
    3f4a:	40 52       	subi	r20, 0x20	; 32
    3f4c:	41 93       	st	Z+, r20
    3f4e:	02 d0       	rcall	.+4      	; 0x3f54 <__ultoa_invert+0x84>
    3f50:	a9 f7       	brne	.-22     	; 0x3f3c <__ultoa_invert+0x6c>
    3f52:	ea cf       	rjmp	.-44     	; 0x3f28 <__ultoa_invert+0x58>
    3f54:	b4 e0       	ldi	r27, 0x04	; 4
    3f56:	a6 95       	lsr	r26
    3f58:	97 95       	ror	r25
    3f5a:	87 95       	ror	r24
    3f5c:	77 95       	ror	r23
    3f5e:	67 95       	ror	r22
    3f60:	ba 95       	dec	r27
    3f62:	c9 f7       	brne	.-14     	; 0x3f56 <__ultoa_invert+0x86>
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	61 05       	cpc	r22, r1
    3f68:	71 05       	cpc	r23, r1
    3f6a:	08 95       	ret
    3f6c:	9b 01       	movw	r18, r22
    3f6e:	ac 01       	movw	r20, r24
    3f70:	0a 2e       	mov	r0, r26
    3f72:	06 94       	lsr	r0
    3f74:	57 95       	ror	r21
    3f76:	47 95       	ror	r20
    3f78:	37 95       	ror	r19
    3f7a:	27 95       	ror	r18
    3f7c:	ba 95       	dec	r27
    3f7e:	c9 f7       	brne	.-14     	; 0x3f72 <__ultoa_invert+0xa2>
    3f80:	62 0f       	add	r22, r18
    3f82:	73 1f       	adc	r23, r19
    3f84:	84 1f       	adc	r24, r20
    3f86:	95 1f       	adc	r25, r21
    3f88:	a0 1d       	adc	r26, r0
    3f8a:	08 95       	ret

00003f8c <_exit>:
    3f8c:	f8 94       	cli

00003f8e <__stop_program>:
    3f8e:	ff cf       	rjmp	.-2      	; 0x3f8e <__stop_program>
